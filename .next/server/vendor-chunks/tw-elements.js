"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tw-elements";
exports.ids = ["vendor-chunks/tw-elements"];
exports.modules = {

/***/ "(ssr)/./node_modules/tw-elements/dist/js/chart.es.js":
/*!******************************************************!*\
  !*** ./node_modules/tw-elements/dist/js/chart.es.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ ye),\n/* harmony export */   B: () => (/* binding */ Me),\n/* harmony export */   P: () => (/* binding */ ve),\n/* harmony export */   a: () => (/* binding */ K),\n/* harmony export */   b: () => (/* binding */ D),\n/* harmony export */   c: () => (/* binding */ I),\n/* harmony export */   d: () => (/* binding */ O),\n/* harmony export */   e: () => (/* binding */ E),\n/* harmony export */   f: () => (/* binding */ Yc),\n/* harmony export */   i: () => (/* binding */ T),\n/* harmony export */   m: () => (/* binding */ ne),\n/* harmony export */   r: () => (/* binding */ Zt),\n/* harmony export */   t: () => (/* binding */ $),\n/* harmony export */   v: () => (/* binding */ C)\n/* harmony export */ });\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */ function ct() {}\nconst _o = function() {\n    let i = 0;\n    return function() {\n        return i++;\n    };\n}();\nfunction T(i) {\n    return i === null || typeof i > \"u\";\n}\nfunction z(i) {\n    if (Array.isArray && Array.isArray(i)) return !0;\n    const t = Object.prototype.toString.call(i);\n    return t.slice(0, 7) === \"[object\" && t.slice(-6) === \"Array]\";\n}\nfunction D(i) {\n    return i !== null && Object.prototype.toString.call(i) === \"[object Object]\";\n}\nconst N = (i)=>(typeof i == \"number\" || i instanceof Number) && isFinite(+i);\nfunction Q(i, t) {\n    return N(i) ? i : t;\n}\nfunction C(i, t) {\n    return typeof i > \"u\" ? t : i;\n}\nconst yo = (i, t)=>typeof i == \"string\" && i.endsWith(\"%\") ? parseFloat(i) / 100 : i / t, an = (i, t)=>typeof i == \"string\" && i.endsWith(\"%\") ? parseFloat(i) / 100 * t : +i;\nfunction I(i, t, e) {\n    if (i && typeof i.call == \"function\") return i.apply(e, t);\n}\nfunction E(i, t, e, s) {\n    let n, o, r;\n    if (z(i)) if (o = i.length, s) for(n = o - 1; n >= 0; n--)t.call(e, i[n], n);\n    else for(n = 0; n < o; n++)t.call(e, i[n], n);\n    else if (D(i)) for(r = Object.keys(i), o = r.length, n = 0; n < o; n++)t.call(e, i[r[n]], r[n]);\n}\nfunction ze(i, t) {\n    let e, s, n, o;\n    if (!i || !t || i.length !== t.length) return !1;\n    for(e = 0, s = i.length; e < s; ++e)if (n = i[e], o = t[e], n.datasetIndex !== o.datasetIndex || n.index !== o.index) return !1;\n    return !0;\n}\nfunction Be(i) {\n    if (z(i)) return i.map(Be);\n    if (D(i)) {\n        const t = /* @__PURE__ */ Object.create(null), e = Object.keys(i), s = e.length;\n        let n = 0;\n        for(; n < s; ++n)t[e[n]] = Be(i[e[n]]);\n        return t;\n    }\n    return i;\n}\nfunction ln(i) {\n    return [\n        \"__proto__\",\n        \"prototype\",\n        \"constructor\"\n    ].indexOf(i) === -1;\n}\nfunction vo(i, t, e, s) {\n    if (!ln(i)) return;\n    const n = t[i], o = e[i];\n    D(n) && D(o) ? ne(n, o, s) : t[i] = Be(o);\n}\nfunction ne(i, t, e) {\n    const s = z(t) ? t : [\n        t\n    ], n = s.length;\n    if (!D(i)) return i;\n    e = e || {};\n    const o = e.merger || vo;\n    for(let r = 0; r < n; ++r){\n        if (t = s[r], !D(t)) continue;\n        const a = Object.keys(t);\n        for(let l = 0, c = a.length; l < c; ++l)o(a[l], i, t, e);\n    }\n    return i;\n}\nfunction Qt(i, t) {\n    return ne(i, t, {\n        merger: Mo\n    });\n}\nfunction Mo(i, t, e) {\n    if (!ln(i)) return;\n    const s = t[i], n = e[i];\n    D(s) && D(n) ? Qt(s, n) : Object.prototype.hasOwnProperty.call(t, i) || (t[i] = Be(n));\n}\nconst Xi = {\n    \"\": (i)=>i,\n    x: (i)=>i.x,\n    y: (i)=>i.y\n};\nfunction _t(i, t) {\n    return (Xi[t] || (Xi[t] = ko(t)))(i);\n}\nfunction ko(i) {\n    const t = wo(i);\n    return (e)=>{\n        for (const s of t){\n            if (s === \"\") break;\n            e = e && e[s];\n        }\n        return e;\n    };\n}\nfunction wo(i) {\n    const t = i.split(\".\"), e = [];\n    let s = \"\";\n    for (const n of t)s += n, s.endsWith(\"\\\\\") ? s = s.slice(0, -1) + \".\" : (e.push(s), s = \"\");\n    return e;\n}\nfunction Oi(i) {\n    return i.charAt(0).toUpperCase() + i.slice(1);\n}\nconst et = (i)=>typeof i < \"u\", yt = (i)=>typeof i == \"function\", Ui = (i, t)=>{\n    if (i.size !== t.size) return !1;\n    for (const e of i)if (!t.has(e)) return !1;\n    return !0;\n};\nfunction So(i) {\n    return i.type === \"mouseup\" || i.type === \"click\" || i.type === \"contextmenu\";\n}\nconst B = Math.PI, F = 2 * B, Po = F + B, Ve = Number.POSITIVE_INFINITY, Co = B / 180, V = B / 2, $t = B / 4, Ki = B * 2 / 3, tt = Math.log10, lt = Math.sign;\nfunction qi(i) {\n    const t = Math.round(i);\n    i = te(i, t, i / 1e3) ? t : i;\n    const e = Math.pow(10, Math.floor(tt(i))), s = i / e;\n    return (s <= 1 ? 1 : s <= 2 ? 2 : s <= 5 ? 5 : 10) * e;\n}\nfunction Do(i) {\n    const t = [], e = Math.sqrt(i);\n    let s;\n    for(s = 1; s < e; s++)i % s === 0 && (t.push(s), t.push(i / s));\n    return e === (e | 0) && t.push(e), t.sort((n, o)=>n - o).pop(), t;\n}\nfunction Bt(i) {\n    return !isNaN(parseFloat(i)) && isFinite(i);\n}\nfunction te(i, t, e) {\n    return Math.abs(i - t) < e;\n}\nfunction Oo(i, t) {\n    const e = Math.round(i);\n    return e - t <= i && e + t >= i;\n}\nfunction cn(i, t, e) {\n    let s, n, o;\n    for(s = 0, n = i.length; s < n; s++)o = i[s][e], isNaN(o) || (t.min = Math.min(t.min, o), t.max = Math.max(t.max, o));\n}\nfunction nt(i) {\n    return i * (B / 180);\n}\nfunction Ai(i) {\n    return i * (180 / B);\n}\nfunction Gi(i) {\n    if (!N(i)) return;\n    let t = 1, e = 0;\n    for(; Math.round(i * t) / t !== i;)t *= 10, e++;\n    return e;\n}\nfunction hn(i, t) {\n    const e = t.x - i.x, s = t.y - i.y, n = Math.sqrt(e * e + s * s);\n    let o = Math.atan2(s, e);\n    return o < -0.5 * B && (o += F), {\n        angle: o,\n        distance: n\n    };\n}\nfunction bi(i, t) {\n    return Math.sqrt(Math.pow(t.x - i.x, 2) + Math.pow(t.y - i.y, 2));\n}\nfunction Ao(i, t) {\n    return (i - t + Po) % F - B;\n}\nfunction Z(i) {\n    return (i % F + F) % F;\n}\nfunction oe(i, t, e, s) {\n    const n = Z(i), o = Z(t), r = Z(e), a = Z(o - n), l = Z(r - n), c = Z(n - o), h = Z(n - r);\n    return n === o || n === r || s && o === r || a > l && c < h;\n}\nfunction Y(i, t, e) {\n    return Math.max(t, Math.min(e, i));\n}\nfunction To(i) {\n    return Y(i, -32768, 32767);\n}\nfunction ut(i, t, e, s = 1e-6) {\n    return i >= Math.min(t, e) - s && i <= Math.max(t, e) + s;\n}\nfunction Ti(i, t, e) {\n    e = e || ((r)=>i[r] < t);\n    let s = i.length - 1, n = 0, o;\n    for(; s - n > 1;)o = n + s >> 1, e(o) ? n = o : s = o;\n    return {\n        lo: n,\n        hi: s\n    };\n}\nconst ft = (i, t, e, s)=>Ti(i, e, s ? (n)=>i[n][t] <= e : (n)=>i[n][t] < e), Lo = (i, t, e)=>Ti(i, e, (s)=>i[s][t] >= e);\nfunction Ro(i, t, e) {\n    let s = 0, n = i.length;\n    for(; s < n && i[s] < t;)s++;\n    for(; n > s && i[n - 1] > e;)n--;\n    return s > 0 || n < i.length ? i.slice(s, n) : i;\n}\nconst dn = [\n    \"push\",\n    \"pop\",\n    \"shift\",\n    \"splice\",\n    \"unshift\"\n];\nfunction Eo(i, t) {\n    if (i._chartjs) {\n        i._chartjs.listeners.push(t);\n        return;\n    }\n    Object.defineProperty(i, \"_chartjs\", {\n        configurable: !0,\n        enumerable: !1,\n        value: {\n            listeners: [\n                t\n            ]\n        }\n    }), dn.forEach((e)=>{\n        const s = \"_onData\" + Oi(e), n = i[e];\n        Object.defineProperty(i, e, {\n            configurable: !0,\n            enumerable: !1,\n            value (...o) {\n                const r = n.apply(this, o);\n                return i._chartjs.listeners.forEach((a)=>{\n                    typeof a[s] == \"function\" && a[s](...o);\n                }), r;\n            }\n        });\n    });\n}\nfunction Zi(i, t) {\n    const e = i._chartjs;\n    if (!e) return;\n    const s = e.listeners, n = s.indexOf(t);\n    n !== -1 && s.splice(n, 1), !(s.length > 0) && (dn.forEach((o)=>{\n        delete i[o];\n    }), delete i._chartjs);\n}\nfunction un(i) {\n    const t = /* @__PURE__ */ new Set();\n    let e, s;\n    for(e = 0, s = i.length; e < s; ++e)t.add(i[e]);\n    return t.size === s ? i : Array.from(t);\n}\nconst fn = function() {\n    return  true ? function(i) {\n        return i();\n    } : 0;\n}();\nfunction gn(i, t, e) {\n    const s = e || ((r)=>Array.prototype.slice.call(r));\n    let n = !1, o = [];\n    return function(...r) {\n        o = s(r), n || (n = !0, fn.call(window, ()=>{\n            n = !1, i.apply(t, o);\n        }));\n    };\n}\nfunction Fo(i, t) {\n    let e;\n    return function(...s) {\n        return t ? (clearTimeout(e), e = setTimeout(i, t, s)) : i.apply(this, s), t;\n    };\n}\nconst Li = (i)=>i === \"start\" ? \"left\" : i === \"end\" ? \"right\" : \"center\", U = (i, t, e)=>i === \"start\" ? t : i === \"end\" ? e : (t + e) / 2, Io = (i, t, e, s)=>i === (s ? \"left\" : \"right\") ? e : i === \"center\" ? (t + e) / 2 : t;\nfunction pn(i, t, e) {\n    const s = t.length;\n    let n = 0, o = s;\n    if (i._sorted) {\n        const { iScale: r, _parsed: a } = i, l = r.axis, { min: c, max: h, minDefined: d, maxDefined: u } = r.getUserBounds();\n        d && (n = Y(Math.min(ft(a, r.axis, c).lo, e ? s : ft(t, l, r.getPixelForValue(c)).lo), 0, s - 1)), u ? o = Y(Math.max(ft(a, r.axis, h, !0).hi + 1, e ? 0 : ft(t, l, r.getPixelForValue(h), !0).hi + 1), n, s) - n : o = s - n;\n    }\n    return {\n        start: n,\n        count: o\n    };\n}\nfunction mn(i) {\n    const { xScale: t, yScale: e, _scaleRanges: s } = i, n = {\n        xmin: t.min,\n        xmax: t.max,\n        ymin: e.min,\n        ymax: e.max\n    };\n    if (!s) return i._scaleRanges = n, !0;\n    const o = s.xmin !== t.min || s.xmax !== t.max || s.ymin !== e.min || s.ymax !== e.max;\n    return Object.assign(s, n), o;\n}\nconst we = (i)=>i === 0 || i === 1, Ji = (i, t, e)=>-(Math.pow(2, 10 * (i -= 1)) * Math.sin((i - t) * F / e)), Qi = (i, t, e)=>Math.pow(2, -10 * i) * Math.sin((i - t) * F / e) + 1, ee = {\n    linear: (i)=>i,\n    easeInQuad: (i)=>i * i,\n    easeOutQuad: (i)=>-i * (i - 2),\n    easeInOutQuad: (i)=>(i /= 0.5) < 1 ? 0.5 * i * i : -0.5 * (--i * (i - 2) - 1),\n    easeInCubic: (i)=>i * i * i,\n    easeOutCubic: (i)=>(i -= 1) * i * i + 1,\n    easeInOutCubic: (i)=>(i /= 0.5) < 1 ? 0.5 * i * i * i : 0.5 * ((i -= 2) * i * i + 2),\n    easeInQuart: (i)=>i * i * i * i,\n    easeOutQuart: (i)=>-((i -= 1) * i * i * i - 1),\n    easeInOutQuart: (i)=>(i /= 0.5) < 1 ? 0.5 * i * i * i * i : -0.5 * ((i -= 2) * i * i * i - 2),\n    easeInQuint: (i)=>i * i * i * i * i,\n    easeOutQuint: (i)=>(i -= 1) * i * i * i * i + 1,\n    easeInOutQuint: (i)=>(i /= 0.5) < 1 ? 0.5 * i * i * i * i * i : 0.5 * ((i -= 2) * i * i * i * i + 2),\n    easeInSine: (i)=>-Math.cos(i * V) + 1,\n    easeOutSine: (i)=>Math.sin(i * V),\n    easeInOutSine: (i)=>-0.5 * (Math.cos(B * i) - 1),\n    easeInExpo: (i)=>i === 0 ? 0 : Math.pow(2, 10 * (i - 1)),\n    easeOutExpo: (i)=>i === 1 ? 1 : -Math.pow(2, -10 * i) + 1,\n    easeInOutExpo: (i)=>we(i) ? i : i < 0.5 ? 0.5 * Math.pow(2, 10 * (i * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (i * 2 - 1)) + 2),\n    easeInCirc: (i)=>i >= 1 ? i : -(Math.sqrt(1 - i * i) - 1),\n    easeOutCirc: (i)=>Math.sqrt(1 - (i -= 1) * i),\n    easeInOutCirc: (i)=>(i /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - i * i) - 1) : 0.5 * (Math.sqrt(1 - (i -= 2) * i) + 1),\n    easeInElastic: (i)=>we(i) ? i : Ji(i, 0.075, 0.3),\n    easeOutElastic: (i)=>we(i) ? i : Qi(i, 0.075, 0.3),\n    easeInOutElastic (i) {\n        return we(i) ? i : i < 0.5 ? 0.5 * Ji(i * 2, 0.1125, 0.45) : 0.5 + 0.5 * Qi(i * 2 - 1, 0.1125, 0.45);\n    },\n    easeInBack (i) {\n        return i * i * ((1.70158 + 1) * i - 1.70158);\n    },\n    easeOutBack (i) {\n        return (i -= 1) * i * ((1.70158 + 1) * i + 1.70158) + 1;\n    },\n    easeInOutBack (i) {\n        let t = 1.70158;\n        return (i /= 0.5) < 1 ? 0.5 * (i * i * (((t *= 1.525) + 1) * i - t)) : 0.5 * ((i -= 2) * i * (((t *= 1.525) + 1) * i + t) + 2);\n    },\n    easeInBounce: (i)=>1 - ee.easeOutBounce(1 - i),\n    easeOutBounce (i) {\n        return i < 1 / 2.75 ? 7.5625 * i * i : i < 2 / 2.75 ? 7.5625 * (i -= 1.5 / 2.75) * i + 0.75 : i < 2.5 / 2.75 ? 7.5625 * (i -= 2.25 / 2.75) * i + 0.9375 : 7.5625 * (i -= 2.625 / 2.75) * i + 0.984375;\n    },\n    easeInOutBounce: (i)=>i < 0.5 ? ee.easeInBounce(i * 2) * 0.5 : ee.easeOutBounce(i * 2 - 1) * 0.5 + 0.5\n};\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */ function he(i) {\n    return i + 0.5 | 0;\n}\nconst mt = (i, t, e)=>Math.max(Math.min(i, e), t);\nfunction Gt(i) {\n    return mt(he(i * 2.55), 0, 255);\n}\nfunction xt(i) {\n    return mt(he(i * 255), 0, 255);\n}\nfunction dt(i) {\n    return mt(he(i / 2.55) / 100, 0, 1);\n}\nfunction ts(i) {\n    return mt(he(i * 100), 0, 100);\n}\nconst J = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n}, xi = [\n    ...\"0123456789ABCDEF\"\n], zo = (i)=>xi[i & 15], Bo = (i)=>xi[(i & 240) >> 4] + xi[i & 15], Se = (i)=>(i & 240) >> 4 === (i & 15), Vo = (i)=>Se(i.r) && Se(i.g) && Se(i.b) && Se(i.a);\nfunction Wo(i) {\n    var t = i.length, e;\n    return i[0] === \"#\" && (t === 4 || t === 5 ? e = {\n        r: 255 & J[i[1]] * 17,\n        g: 255 & J[i[2]] * 17,\n        b: 255 & J[i[3]] * 17,\n        a: t === 5 ? J[i[4]] * 17 : 255\n    } : (t === 7 || t === 9) && (e = {\n        r: J[i[1]] << 4 | J[i[2]],\n        g: J[i[3]] << 4 | J[i[4]],\n        b: J[i[5]] << 4 | J[i[6]],\n        a: t === 9 ? J[i[7]] << 4 | J[i[8]] : 255\n    })), e;\n}\nconst No = (i, t)=>i < 255 ? t(i) : \"\";\nfunction Ho(i) {\n    var t = Vo(i) ? zo : Bo;\n    return i ? \"#\" + t(i.r) + t(i.g) + t(i.b) + No(i.a, t) : void 0;\n}\nconst jo = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction bn(i, t, e) {\n    const s = t * Math.min(e, 1 - e), n = (o, r = (o + i / 30) % 12)=>e - s * Math.max(Math.min(r - 3, 9 - r, 1), -1);\n    return [\n        n(0),\n        n(8),\n        n(4)\n    ];\n}\nfunction $o(i, t, e) {\n    const s = (n, o = (n + i / 60) % 6)=>e - e * t * Math.max(Math.min(o, 4 - o, 1), 0);\n    return [\n        s(5),\n        s(3),\n        s(1)\n    ];\n}\nfunction Yo(i, t, e) {\n    const s = bn(i, 1, 0.5);\n    let n;\n    for(t + e > 1 && (n = 1 / (t + e), t *= n, e *= n), n = 0; n < 3; n++)s[n] *= 1 - t - e, s[n] += t;\n    return s;\n}\nfunction Xo(i, t, e, s, n) {\n    return i === n ? (t - e) / s + (t < e ? 6 : 0) : t === n ? (e - i) / s + 2 : (i - t) / s + 4;\n}\nfunction Ri(i) {\n    const e = i.r / 255, s = i.g / 255, n = i.b / 255, o = Math.max(e, s, n), r = Math.min(e, s, n), a = (o + r) / 2;\n    let l, c, h;\n    return o !== r && (h = o - r, c = a > 0.5 ? h / (2 - o - r) : h / (o + r), l = Xo(e, s, n, h, o), l = l * 60 + 0.5), [\n        l | 0,\n        c || 0,\n        a\n    ];\n}\nfunction Ei(i, t, e, s) {\n    return (Array.isArray(t) ? i(t[0], t[1], t[2]) : i(t, e, s)).map(xt);\n}\nfunction Fi(i, t, e) {\n    return Ei(bn, i, t, e);\n}\nfunction Uo(i, t, e) {\n    return Ei(Yo, i, t, e);\n}\nfunction Ko(i, t, e) {\n    return Ei($o, i, t, e);\n}\nfunction xn(i) {\n    return (i % 360 + 360) % 360;\n}\nfunction qo(i) {\n    const t = jo.exec(i);\n    let e = 255, s;\n    if (!t) return;\n    t[5] !== s && (e = t[6] ? Gt(+t[5]) : xt(+t[5]));\n    const n = xn(+t[2]), o = +t[3] / 100, r = +t[4] / 100;\n    return t[1] === \"hwb\" ? s = Uo(n, o, r) : t[1] === \"hsv\" ? s = Ko(n, o, r) : s = Fi(n, o, r), {\n        r: s[0],\n        g: s[1],\n        b: s[2],\n        a: e\n    };\n}\nfunction Go(i, t) {\n    var e = Ri(i);\n    e[0] = xn(e[0] + t), e = Fi(e), i.r = e[0], i.g = e[1], i.b = e[2];\n}\nfunction Zo(i) {\n    if (!i) return;\n    const t = Ri(i), e = t[0], s = ts(t[1]), n = ts(t[2]);\n    return i.a < 255 ? `hsla(${e}, ${s}%, ${n}%, ${dt(i.a)})` : `hsl(${e}, ${s}%, ${n}%)`;\n}\nconst es = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n}, is = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n};\nfunction Jo() {\n    const i = {}, t = Object.keys(is), e = Object.keys(es);\n    let s, n, o, r, a;\n    for(s = 0; s < t.length; s++){\n        for(r = a = t[s], n = 0; n < e.length; n++)o = e[n], a = a.replace(o, es[o]);\n        o = parseInt(is[r], 16), i[a] = [\n            o >> 16 & 255,\n            o >> 8 & 255,\n            o & 255\n        ];\n    }\n    return i;\n}\nlet Pe;\nfunction Qo(i) {\n    Pe || (Pe = Jo(), Pe.transparent = [\n        0,\n        0,\n        0,\n        0\n    ]);\n    const t = Pe[i.toLowerCase()];\n    return t && {\n        r: t[0],\n        g: t[1],\n        b: t[2],\n        a: t.length === 4 ? t[3] : 255\n    };\n}\nconst tr = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction er(i) {\n    const t = tr.exec(i);\n    let e = 255, s, n, o;\n    if (t) {\n        if (t[7] !== s) {\n            const r = +t[7];\n            e = t[8] ? Gt(r) : mt(r * 255, 0, 255);\n        }\n        return s = +t[1], n = +t[3], o = +t[5], s = 255 & (t[2] ? Gt(s) : mt(s, 0, 255)), n = 255 & (t[4] ? Gt(n) : mt(n, 0, 255)), o = 255 & (t[6] ? Gt(o) : mt(o, 0, 255)), {\n            r: s,\n            g: n,\n            b: o,\n            a: e\n        };\n    }\n}\nfunction ir(i) {\n    return i && (i.a < 255 ? `rgba(${i.r}, ${i.g}, ${i.b}, ${dt(i.a)})` : `rgb(${i.r}, ${i.g}, ${i.b})`);\n}\nconst ni = (i)=>i <= 31308e-7 ? i * 12.92 : Math.pow(i, 1 / 2.4) * 1.055 - 0.055, Ft = (i)=>i <= 0.04045 ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);\nfunction sr(i, t, e) {\n    const s = Ft(dt(i.r)), n = Ft(dt(i.g)), o = Ft(dt(i.b));\n    return {\n        r: xt(ni(s + e * (Ft(dt(t.r)) - s))),\n        g: xt(ni(n + e * (Ft(dt(t.g)) - n))),\n        b: xt(ni(o + e * (Ft(dt(t.b)) - o))),\n        a: i.a + e * (t.a - i.a)\n    };\n}\nfunction Ce(i, t, e) {\n    if (i) {\n        let s = Ri(i);\n        s[t] = Math.max(0, Math.min(s[t] + s[t] * e, t === 0 ? 360 : 1)), s = Fi(s), i.r = s[0], i.g = s[1], i.b = s[2];\n    }\n}\nfunction _n(i, t) {\n    return i && Object.assign(t || {}, i);\n}\nfunction ss(i) {\n    var t = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n    };\n    return Array.isArray(i) ? i.length >= 3 && (t = {\n        r: i[0],\n        g: i[1],\n        b: i[2],\n        a: 255\n    }, i.length > 3 && (t.a = xt(i[3]))) : (t = _n(i, {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 1\n    }), t.a = xt(t.a)), t;\n}\nfunction nr(i) {\n    return i.charAt(0) === \"r\" ? er(i) : qo(i);\n}\nclass We {\n    constructor(t){\n        if (t instanceof We) return t;\n        const e = typeof t;\n        let s;\n        e === \"object\" ? s = ss(t) : e === \"string\" && (s = Wo(t) || Qo(t) || nr(t)), this._rgb = s, this._valid = !!s;\n    }\n    get valid() {\n        return this._valid;\n    }\n    get rgb() {\n        var t = _n(this._rgb);\n        return t && (t.a = dt(t.a)), t;\n    }\n    set rgb(t) {\n        this._rgb = ss(t);\n    }\n    rgbString() {\n        return this._valid ? ir(this._rgb) : void 0;\n    }\n    hexString() {\n        return this._valid ? Ho(this._rgb) : void 0;\n    }\n    hslString() {\n        return this._valid ? Zo(this._rgb) : void 0;\n    }\n    mix(t, e) {\n        if (t) {\n            const s = this.rgb, n = t.rgb;\n            let o;\n            const r = e === o ? 0.5 : e, a = 2 * r - 1, l = s.a - n.a, c = ((a * l === -1 ? a : (a + l) / (1 + a * l)) + 1) / 2;\n            o = 1 - c, s.r = 255 & c * s.r + o * n.r + 0.5, s.g = 255 & c * s.g + o * n.g + 0.5, s.b = 255 & c * s.b + o * n.b + 0.5, s.a = r * s.a + (1 - r) * n.a, this.rgb = s;\n        }\n        return this;\n    }\n    interpolate(t, e) {\n        return t && (this._rgb = sr(this._rgb, t._rgb, e)), this;\n    }\n    clone() {\n        return new We(this.rgb);\n    }\n    alpha(t) {\n        return this._rgb.a = xt(t), this;\n    }\n    clearer(t) {\n        const e = this._rgb;\n        return e.a *= 1 - t, this;\n    }\n    greyscale() {\n        const t = this._rgb, e = he(t.r * 0.3 + t.g * 0.59 + t.b * 0.11);\n        return t.r = t.g = t.b = e, this;\n    }\n    opaquer(t) {\n        const e = this._rgb;\n        return e.a *= 1 + t, this;\n    }\n    negate() {\n        const t = this._rgb;\n        return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this;\n    }\n    lighten(t) {\n        return Ce(this._rgb, 2, t), this;\n    }\n    darken(t) {\n        return Ce(this._rgb, 2, -t), this;\n    }\n    saturate(t) {\n        return Ce(this._rgb, 1, t), this;\n    }\n    desaturate(t) {\n        return Ce(this._rgb, 1, -t), this;\n    }\n    rotate(t) {\n        return Go(this._rgb, t), this;\n    }\n}\nfunction yn(i) {\n    return new We(i);\n}\nfunction vn(i) {\n    if (i && typeof i == \"object\") {\n        const t = i.toString();\n        return t === \"[object CanvasPattern]\" || t === \"[object CanvasGradient]\";\n    }\n    return !1;\n}\nfunction ns(i) {\n    return vn(i) ? i : yn(i);\n}\nfunction oi(i) {\n    return vn(i) ? i : yn(i).saturate(0.5).darken(0.1).hexString();\n}\nconst At = /* @__PURE__ */ Object.create(null), _i = /* @__PURE__ */ Object.create(null);\nfunction ie(i, t) {\n    if (!t) return i;\n    const e = t.split(\".\");\n    for(let s = 0, n = e.length; s < n; ++s){\n        const o = e[s];\n        i = i[o] || (i[o] = /* @__PURE__ */ Object.create(null));\n    }\n    return i;\n}\nfunction ri(i, t, e) {\n    return typeof t == \"string\" ? ne(ie(i, t), e) : ne(ie(i, \"\"), t);\n}\nclass or {\n    constructor(t){\n        this.animation = void 0, this.backgroundColor = \"rgba(0,0,0,0.1)\", this.borderColor = \"rgba(0,0,0,0.1)\", this.color = \"#666\", this.datasets = {}, this.devicePixelRatio = (e)=>e.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = [\n            \"mousemove\",\n            \"mouseout\",\n            \"click\",\n            \"touchstart\",\n            \"touchmove\"\n        ], this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: \"normal\",\n            lineHeight: 1.2,\n            weight: null\n        }, this.hover = {}, this.hoverBackgroundColor = (e, s)=>oi(s.backgroundColor), this.hoverBorderColor = (e, s)=>oi(s.borderColor), this.hoverColor = (e, s)=>oi(s.color), this.indexAxis = \"x\", this.interaction = {\n            mode: \"nearest\",\n            intersect: !0,\n            includeInvisible: !1\n        }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.drawActiveElementsOnTop = !0, this.describe(t);\n    }\n    set(t, e) {\n        return ri(this, t, e);\n    }\n    get(t) {\n        return ie(this, t);\n    }\n    describe(t, e) {\n        return ri(_i, t, e);\n    }\n    override(t, e) {\n        return ri(At, t, e);\n    }\n    route(t, e, s, n) {\n        const o = ie(this, t), r = ie(this, s), a = \"_\" + e;\n        Object.defineProperties(o, {\n            [a]: {\n                value: o[e],\n                writable: !0\n            },\n            [e]: {\n                enumerable: !0,\n                get () {\n                    const l = this[a], c = r[n];\n                    return D(l) ? Object.assign({}, c, l) : C(l, c);\n                },\n                set (l) {\n                    this[a] = l;\n                }\n            }\n        });\n    }\n}\nvar O = new or({\n    _scriptable: (i)=>!i.startsWith(\"on\"),\n    _indexable: (i)=>i !== \"events\",\n    hover: {\n        _fallback: \"interaction\"\n    },\n    interaction: {\n        _scriptable: !1,\n        _indexable: !1\n    }\n});\nfunction rr(i) {\n    return !i || T(i.size) || T(i.family) ? null : (i.style ? i.style + \" \" : \"\") + (i.weight ? i.weight + \" \" : \"\") + i.size + \"px \" + i.family;\n}\nfunction Ne(i, t, e, s, n) {\n    let o = t[n];\n    return o || (o = t[n] = i.measureText(n).width, e.push(n)), o > s && (s = o), s;\n}\nfunction ar(i, t, e, s) {\n    s = s || {};\n    let n = s.data = s.data || {}, o = s.garbageCollect = s.garbageCollect || [];\n    s.font !== t && (n = s.data = {}, o = s.garbageCollect = [], s.font = t), i.save(), i.font = t;\n    let r = 0;\n    const a = e.length;\n    let l, c, h, d, u;\n    for(l = 0; l < a; l++)if (d = e[l], d != null && z(d) !== !0) r = Ne(i, n, o, r, d);\n    else if (z(d)) for(c = 0, h = d.length; c < h; c++)u = d[c], u != null && !z(u) && (r = Ne(i, n, o, r, u));\n    i.restore();\n    const f = o.length / 2;\n    if (f > e.length) {\n        for(l = 0; l < f; l++)delete n[o[l]];\n        o.splice(0, f);\n    }\n    return r;\n}\nfunction wt(i, t, e) {\n    const s = i.currentDevicePixelRatio, n = e !== 0 ? Math.max(e / 2, 0.5) : 0;\n    return Math.round((t - n) * s) / s + n;\n}\nfunction os(i, t) {\n    t = t || i.getContext(\"2d\"), t.save(), t.resetTransform(), t.clearRect(0, 0, i.width, i.height), t.restore();\n}\nfunction yi(i, t, e, s) {\n    Mn(i, t, e, s, null);\n}\nfunction Mn(i, t, e, s, n) {\n    let o, r, a, l, c, h;\n    const d = t.pointStyle, u = t.rotation, f = t.radius;\n    let g = (u || 0) * Co;\n    if (d && typeof d == \"object\" && (o = d.toString(), o === \"[object HTMLImageElement]\" || o === \"[object HTMLCanvasElement]\")) {\n        i.save(), i.translate(e, s), i.rotate(g), i.drawImage(d, -d.width / 2, -d.height / 2, d.width, d.height), i.restore();\n        return;\n    }\n    if (!(isNaN(f) || f <= 0)) {\n        switch(i.beginPath(), d){\n            default:\n                n ? i.ellipse(e, s, n / 2, f, 0, 0, F) : i.arc(e, s, f, 0, F), i.closePath();\n                break;\n            case \"triangle\":\n                i.moveTo(e + Math.sin(g) * f, s - Math.cos(g) * f), g += Ki, i.lineTo(e + Math.sin(g) * f, s - Math.cos(g) * f), g += Ki, i.lineTo(e + Math.sin(g) * f, s - Math.cos(g) * f), i.closePath();\n                break;\n            case \"rectRounded\":\n                c = f * 0.516, l = f - c, r = Math.cos(g + $t) * l, a = Math.sin(g + $t) * l, i.arc(e - r, s - a, c, g - B, g - V), i.arc(e + a, s - r, c, g - V, g), i.arc(e + r, s + a, c, g, g + V), i.arc(e - a, s + r, c, g + V, g + B), i.closePath();\n                break;\n            case \"rect\":\n                if (!u) {\n                    l = Math.SQRT1_2 * f, h = n ? n / 2 : l, i.rect(e - h, s - l, 2 * h, 2 * l);\n                    break;\n                }\n                g += $t;\n            case \"rectRot\":\n                r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + a, s - r), i.lineTo(e + r, s + a), i.lineTo(e - a, s + r), i.closePath();\n                break;\n            case \"crossRot\":\n                g += $t;\n            case \"cross\":\n                r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r);\n                break;\n            case \"star\":\n                r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r), g += $t, r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r);\n                break;\n            case \"line\":\n                r = n ? n / 2 : Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a);\n                break;\n            case \"dash\":\n                i.moveTo(e, s), i.lineTo(e + Math.cos(g) * f, s + Math.sin(g) * f);\n                break;\n        }\n        i.fill(), t.borderWidth > 0 && i.stroke();\n    }\n}\nfunction re(i, t, e) {\n    return e = e || 0.5, !t || i && i.x > t.left - e && i.x < t.right + e && i.y > t.top - e && i.y < t.bottom + e;\n}\nfunction Xe(i, t) {\n    i.save(), i.beginPath(), i.rect(t.left, t.top, t.right - t.left, t.bottom - t.top), i.clip();\n}\nfunction Ue(i) {\n    i.restore();\n}\nfunction lr(i, t, e, s, n) {\n    if (!t) return i.lineTo(e.x, e.y);\n    if (n === \"middle\") {\n        const o = (t.x + e.x) / 2;\n        i.lineTo(o, t.y), i.lineTo(o, e.y);\n    } else n === \"after\" != !!s ? i.lineTo(t.x, e.y) : i.lineTo(e.x, t.y);\n    i.lineTo(e.x, e.y);\n}\nfunction cr(i, t, e, s) {\n    if (!t) return i.lineTo(e.x, e.y);\n    i.bezierCurveTo(s ? t.cp1x : t.cp2x, s ? t.cp1y : t.cp2y, s ? e.cp2x : e.cp1x, s ? e.cp2y : e.cp1y, e.x, e.y);\n}\nfunction Tt(i, t, e, s, n, o = {}) {\n    const r = z(t) ? t : [\n        t\n    ], a = o.strokeWidth > 0 && o.strokeColor !== \"\";\n    let l, c;\n    for(i.save(), i.font = n.string, hr(i, o), l = 0; l < r.length; ++l)c = r[l], a && (o.strokeColor && (i.strokeStyle = o.strokeColor), T(o.strokeWidth) || (i.lineWidth = o.strokeWidth), i.strokeText(c, e, s, o.maxWidth)), i.fillText(c, e, s, o.maxWidth), dr(i, e, s, c, o), s += n.lineHeight;\n    i.restore();\n}\nfunction hr(i, t) {\n    t.translation && i.translate(t.translation[0], t.translation[1]), T(t.rotation) || i.rotate(t.rotation), t.color && (i.fillStyle = t.color), t.textAlign && (i.textAlign = t.textAlign), t.textBaseline && (i.textBaseline = t.textBaseline);\n}\nfunction dr(i, t, e, s, n) {\n    if (n.strikethrough || n.underline) {\n        const o = i.measureText(s), r = t - o.actualBoundingBoxLeft, a = t + o.actualBoundingBoxRight, l = e - o.actualBoundingBoxAscent, c = e + o.actualBoundingBoxDescent, h = n.strikethrough ? (l + c) / 2 : c;\n        i.strokeStyle = i.fillStyle, i.beginPath(), i.lineWidth = n.decorationWidth || 2, i.moveTo(r, h), i.lineTo(a, h), i.stroke();\n    }\n}\nfunction ae(i, t) {\n    const { x: e, y: s, w: n, h: o, radius: r } = t;\n    i.arc(e + r.topLeft, s + r.topLeft, r.topLeft, -V, B, !0), i.lineTo(e, s + o - r.bottomLeft), i.arc(e + r.bottomLeft, s + o - r.bottomLeft, r.bottomLeft, B, V, !0), i.lineTo(e + n - r.bottomRight, s + o), i.arc(e + n - r.bottomRight, s + o - r.bottomRight, r.bottomRight, V, 0, !0), i.lineTo(e + n, s + r.topRight), i.arc(e + n - r.topRight, s + r.topRight, r.topRight, 0, -V, !0), i.lineTo(e + r.topLeft, s);\n}\nconst ur = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/), fr = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction gr(i, t) {\n    const e = (\"\" + i).match(ur);\n    if (!e || e[1] === \"normal\") return t * 1.2;\n    switch(i = +e[2], e[3]){\n        case \"px\":\n            return i;\n        case \"%\":\n            i /= 100;\n            break;\n    }\n    return t * i;\n}\nconst pr = (i)=>+i || 0;\nfunction Ii(i, t) {\n    const e = {}, s = D(t), n = s ? Object.keys(t) : t, o = D(i) ? s ? (r)=>C(i[r], i[t[r]]) : (r)=>i[r] : ()=>i;\n    for (const r of n)e[r] = pr(o(r));\n    return e;\n}\nfunction kn(i) {\n    return Ii(i, {\n        top: \"y\",\n        right: \"x\",\n        bottom: \"y\",\n        left: \"x\"\n    });\n}\nfunction Dt(i) {\n    return Ii(i, [\n        \"topLeft\",\n        \"topRight\",\n        \"bottomLeft\",\n        \"bottomRight\"\n    ]);\n}\nfunction K(i) {\n    const t = kn(i);\n    return t.width = t.left + t.right, t.height = t.top + t.bottom, t;\n}\nfunction $(i, t) {\n    i = i || {}, t = t || O.font;\n    let e = C(i.size, t.size);\n    typeof e == \"string\" && (e = parseInt(e, 10));\n    let s = C(i.style, t.style);\n    s && !(\"\" + s).match(fr) && (console.warn('Invalid font style specified: \"' + s + '\"'), s = \"\");\n    const n = {\n        family: C(i.family, t.family),\n        lineHeight: gr(C(i.lineHeight, t.lineHeight), e),\n        size: e,\n        style: s,\n        weight: C(i.weight, t.weight),\n        string: \"\"\n    };\n    return n.string = rr(n), n;\n}\nfunction Zt(i, t, e, s) {\n    let n = !0, o, r, a;\n    for(o = 0, r = i.length; o < r; ++o)if (a = i[o], a !== void 0 && (t !== void 0 && typeof a == \"function\" && (a = a(t), n = !1), e !== void 0 && z(a) && (a = a[e % a.length], n = !1), a !== void 0)) return s && !n && (s.cacheable = !1), a;\n}\nfunction mr(i, t, e) {\n    const { min: s, max: n } = i, o = an(t, (n - s) / 2), r = (a, l)=>e && a === 0 ? 0 : a + l;\n    return {\n        min: r(s, -Math.abs(o)),\n        max: r(n, o)\n    };\n}\nfunction vt(i, t) {\n    return Object.assign(Object.create(i), t);\n}\nfunction zi(i, t = [\n    \"\"\n], e = i, s, n = ()=>i[0]) {\n    et(s) || (s = Cn(\"_fallback\", i));\n    const o = {\n        [Symbol.toStringTag]: \"Object\",\n        _cacheable: !0,\n        _scopes: i,\n        _rootScopes: e,\n        _fallback: s,\n        _getTarget: n,\n        override: (r)=>zi([\n                r,\n                ...i\n            ], t, e, s)\n    };\n    return new Proxy(o, {\n        deleteProperty (r, a) {\n            return delete r[a], delete r._keys, delete i[0][a], !0;\n        },\n        get (r, a) {\n            return Sn(r, a, ()=>wr(a, t, i, r));\n        },\n        getOwnPropertyDescriptor (r, a) {\n            return Reflect.getOwnPropertyDescriptor(r._scopes[0], a);\n        },\n        getPrototypeOf () {\n            return Reflect.getPrototypeOf(i[0]);\n        },\n        has (r, a) {\n            return as(r).includes(a);\n        },\n        ownKeys (r) {\n            return as(r);\n        },\n        set (r, a, l) {\n            const c = r._storage || (r._storage = n());\n            return r[a] = c[a] = l, delete r._keys, !0;\n        }\n    });\n}\nfunction Vt(i, t, e, s) {\n    const n = {\n        _cacheable: !1,\n        _proxy: i,\n        _context: t,\n        _subProxy: e,\n        _stack: /* @__PURE__ */ new Set(),\n        _descriptors: wn(i, s),\n        setContext: (o)=>Vt(i, o, e, s),\n        override: (o)=>Vt(i.override(o), t, e, s)\n    };\n    return new Proxy(n, {\n        deleteProperty (o, r) {\n            return delete o[r], delete i[r], !0;\n        },\n        get (o, r, a) {\n            return Sn(o, r, ()=>xr(o, r, a));\n        },\n        getOwnPropertyDescriptor (o, r) {\n            return o._descriptors.allKeys ? Reflect.has(i, r) ? {\n                enumerable: !0,\n                configurable: !0\n            } : void 0 : Reflect.getOwnPropertyDescriptor(i, r);\n        },\n        getPrototypeOf () {\n            return Reflect.getPrototypeOf(i);\n        },\n        has (o, r) {\n            return Reflect.has(i, r);\n        },\n        ownKeys () {\n            return Reflect.ownKeys(i);\n        },\n        set (o, r, a) {\n            return i[r] = a, delete o[r], !0;\n        }\n    });\n}\nfunction wn(i, t = {\n    scriptable: !0,\n    indexable: !0\n}) {\n    const { _scriptable: e = t.scriptable, _indexable: s = t.indexable, _allKeys: n = t.allKeys } = i;\n    return {\n        allKeys: n,\n        scriptable: e,\n        indexable: s,\n        isScriptable: yt(e) ? e : ()=>e,\n        isIndexable: yt(s) ? s : ()=>s\n    };\n}\nconst br = (i, t)=>i ? i + Oi(t) : t, Bi = (i, t)=>D(t) && i !== \"adapters\" && (Object.getPrototypeOf(t) === null || t.constructor === Object);\nfunction Sn(i, t, e) {\n    if (Object.prototype.hasOwnProperty.call(i, t)) return i[t];\n    const s = e();\n    return i[t] = s, s;\n}\nfunction xr(i, t, e) {\n    const { _proxy: s, _context: n, _subProxy: o, _descriptors: r } = i;\n    let a = s[t];\n    return yt(a) && r.isScriptable(t) && (a = _r(t, a, i, e)), z(a) && a.length && (a = yr(t, a, i, r.isIndexable)), Bi(t, a) && (a = Vt(a, n, o && o[t], r)), a;\n}\nfunction _r(i, t, e, s) {\n    const { _proxy: n, _context: o, _subProxy: r, _stack: a } = e;\n    if (a.has(i)) throw new Error(\"Recursion detected: \" + Array.from(a).join(\"->\") + \"->\" + i);\n    return a.add(i), t = t(o, r || s), a.delete(i), Bi(i, t) && (t = Vi(n._scopes, n, i, t)), t;\n}\nfunction yr(i, t, e, s) {\n    const { _proxy: n, _context: o, _subProxy: r, _descriptors: a } = e;\n    if (et(o.index) && s(i)) t = t[o.index % t.length];\n    else if (D(t[0])) {\n        const l = t, c = n._scopes.filter((h)=>h !== l);\n        t = [];\n        for (const h of l){\n            const d = Vi(c, n, i, h);\n            t.push(Vt(d, o, r && r[i], a));\n        }\n    }\n    return t;\n}\nfunction Pn(i, t, e) {\n    return yt(i) ? i(t, e) : i;\n}\nconst vr = (i, t)=>i === !0 ? t : typeof i == \"string\" ? _t(t, i) : void 0;\nfunction Mr(i, t, e, s, n) {\n    for (const o of t){\n        const r = vr(e, o);\n        if (r) {\n            i.add(r);\n            const a = Pn(r._fallback, e, n);\n            if (et(a) && a !== e && a !== s) return a;\n        } else if (r === !1 && et(s) && e !== s) return null;\n    }\n    return !1;\n}\nfunction Vi(i, t, e, s) {\n    const n = t._rootScopes, o = Pn(t._fallback, e, s), r = [\n        ...i,\n        ...n\n    ], a = /* @__PURE__ */ new Set();\n    a.add(s);\n    let l = rs(a, r, e, o || e, s);\n    return l === null || et(o) && o !== e && (l = rs(a, r, o, l, s), l === null) ? !1 : zi(Array.from(a), [\n        \"\"\n    ], n, o, ()=>kr(t, e, s));\n}\nfunction rs(i, t, e, s, n) {\n    for(; e;)e = Mr(i, t, e, s, n);\n    return e;\n}\nfunction kr(i, t, e) {\n    const s = i._getTarget();\n    t in s || (s[t] = {});\n    const n = s[t];\n    return z(n) && D(e) ? e : n;\n}\nfunction wr(i, t, e, s) {\n    let n;\n    for (const o of t)if (n = Cn(br(o, i), e), et(n)) return Bi(i, n) ? Vi(e, s, i, n) : n;\n}\nfunction Cn(i, t) {\n    for (const e of t){\n        if (!e) continue;\n        const s = e[i];\n        if (et(s)) return s;\n    }\n}\nfunction as(i) {\n    let t = i._keys;\n    return t || (t = i._keys = Sr(i._scopes)), t;\n}\nfunction Sr(i) {\n    const t = /* @__PURE__ */ new Set();\n    for (const e of i)for (const s of Object.keys(e).filter((n)=>!n.startsWith(\"_\")))t.add(s);\n    return Array.from(t);\n}\nfunction Dn(i, t, e, s) {\n    const { iScale: n } = i, { key: o = \"r\" } = this._parsing, r = new Array(s);\n    let a, l, c, h;\n    for(a = 0, l = s; a < l; ++a)c = a + e, h = t[c], r[a] = {\n        r: n.parse(_t(h, o), c)\n    };\n    return r;\n}\nconst Pr = Number.EPSILON || 1e-14, Wt = (i, t)=>t < i.length && !i[t].skip && i[t], On = (i)=>i === \"x\" ? \"y\" : \"x\";\nfunction Cr(i, t, e, s) {\n    const n = i.skip ? t : i, o = t, r = e.skip ? t : e, a = bi(o, n), l = bi(r, o);\n    let c = a / (a + l), h = l / (a + l);\n    c = isNaN(c) ? 0 : c, h = isNaN(h) ? 0 : h;\n    const d = s * c, u = s * h;\n    return {\n        previous: {\n            x: o.x - d * (r.x - n.x),\n            y: o.y - d * (r.y - n.y)\n        },\n        next: {\n            x: o.x + u * (r.x - n.x),\n            y: o.y + u * (r.y - n.y)\n        }\n    };\n}\nfunction Dr(i, t, e) {\n    const s = i.length;\n    let n, o, r, a, l, c = Wt(i, 0);\n    for(let h = 0; h < s - 1; ++h)if (l = c, c = Wt(i, h + 1), !(!l || !c)) {\n        if (te(t[h], 0, Pr)) {\n            e[h] = e[h + 1] = 0;\n            continue;\n        }\n        n = e[h] / t[h], o = e[h + 1] / t[h], a = Math.pow(n, 2) + Math.pow(o, 2), !(a <= 9) && (r = 3 / Math.sqrt(a), e[h] = n * r * t[h], e[h + 1] = o * r * t[h]);\n    }\n}\nfunction Or(i, t, e = \"x\") {\n    const s = On(e), n = i.length;\n    let o, r, a, l = Wt(i, 0);\n    for(let c = 0; c < n; ++c){\n        if (r = a, a = l, l = Wt(i, c + 1), !a) continue;\n        const h = a[e], d = a[s];\n        r && (o = (h - r[e]) / 3, a[`cp1${e}`] = h - o, a[`cp1${s}`] = d - o * t[c]), l && (o = (l[e] - h) / 3, a[`cp2${e}`] = h + o, a[`cp2${s}`] = d + o * t[c]);\n    }\n}\nfunction Ar(i, t = \"x\") {\n    const e = On(t), s = i.length, n = Array(s).fill(0), o = Array(s);\n    let r, a, l, c = Wt(i, 0);\n    for(r = 0; r < s; ++r)if (a = l, l = c, c = Wt(i, r + 1), !!l) {\n        if (c) {\n            const h = c[t] - l[t];\n            n[r] = h !== 0 ? (c[e] - l[e]) / h : 0;\n        }\n        o[r] = a ? c ? lt(n[r - 1]) !== lt(n[r]) ? 0 : (n[r - 1] + n[r]) / 2 : n[r - 1] : n[r];\n    }\n    Dr(i, n, o), Or(i, o, t);\n}\nfunction De(i, t, e) {\n    return Math.max(Math.min(i, e), t);\n}\nfunction Tr(i, t) {\n    let e, s, n, o, r, a = re(i[0], t);\n    for(e = 0, s = i.length; e < s; ++e)r = o, o = a, a = e < s - 1 && re(i[e + 1], t), o && (n = i[e], r && (n.cp1x = De(n.cp1x, t.left, t.right), n.cp1y = De(n.cp1y, t.top, t.bottom)), a && (n.cp2x = De(n.cp2x, t.left, t.right), n.cp2y = De(n.cp2y, t.top, t.bottom)));\n}\nfunction Lr(i, t, e, s, n) {\n    let o, r, a, l;\n    if (t.spanGaps && (i = i.filter((c)=>!c.skip)), t.cubicInterpolationMode === \"monotone\") Ar(i, n);\n    else {\n        let c = s ? i[i.length - 1] : i[0];\n        for(o = 0, r = i.length; o < r; ++o)a = i[o], l = Cr(c, a, i[Math.min(o + 1, r - (s ? 0 : 1)) % r], t.tension), a.cp1x = l.previous.x, a.cp1y = l.previous.y, a.cp2x = l.next.x, a.cp2y = l.next.y, c = a;\n    }\n    t.capBezierPoints && Tr(i, e);\n}\nfunction An() {\n    return  false && 0;\n}\nfunction Wi(i) {\n    let t = i.parentNode;\n    return t && t.toString() === \"[object ShadowRoot]\" && (t = t.host), t;\n}\nfunction He(i, t, e) {\n    let s;\n    return typeof i == \"string\" ? (s = parseInt(i, 10), i.indexOf(\"%\") !== -1 && (s = s / 100 * t.parentNode[e])) : s = i, s;\n}\nconst Ke = (i)=>window.getComputedStyle(i, null);\nfunction Rr(i, t) {\n    return Ke(i).getPropertyValue(t);\n}\nconst Er = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nfunction Ot(i, t, e) {\n    const s = {};\n    e = e ? \"-\" + e : \"\";\n    for(let n = 0; n < 4; n++){\n        const o = Er[n];\n        s[o] = parseFloat(i[t + \"-\" + o + e]) || 0;\n    }\n    return s.width = s.left + s.right, s.height = s.top + s.bottom, s;\n}\nconst Fr = (i, t, e)=>(i > 0 || t > 0) && (!e || !e.shadowRoot);\nfunction Ir(i, t) {\n    const e = i.touches, s = e && e.length ? e[0] : i, { offsetX: n, offsetY: o } = s;\n    let r = !1, a, l;\n    if (Fr(n, o, i.target)) a = n, l = o;\n    else {\n        const c = t.getBoundingClientRect();\n        a = s.clientX - c.left, l = s.clientY - c.top, r = !0;\n    }\n    return {\n        x: a,\n        y: l,\n        box: r\n    };\n}\nfunction Pt(i, t) {\n    if (\"native\" in i) return i;\n    const { canvas: e, currentDevicePixelRatio: s } = t, n = Ke(e), o = n.boxSizing === \"border-box\", r = Ot(n, \"padding\"), a = Ot(n, \"border\", \"width\"), { x: l, y: c, box: h } = Ir(i, e), d = r.left + (h && a.left), u = r.top + (h && a.top);\n    let { width: f, height: g } = t;\n    return o && (f -= r.width + a.width, g -= r.height + a.height), {\n        x: Math.round((l - d) / f * e.width / s),\n        y: Math.round((c - u) / g * e.height / s)\n    };\n}\nfunction zr(i, t, e) {\n    let s, n;\n    if (t === void 0 || e === void 0) {\n        const o = Wi(i);\n        if (!o) t = i.clientWidth, e = i.clientHeight;\n        else {\n            const r = o.getBoundingClientRect(), a = Ke(o), l = Ot(a, \"border\", \"width\"), c = Ot(a, \"padding\");\n            t = r.width - c.width - l.width, e = r.height - c.height - l.height, s = He(a.maxWidth, o, \"clientWidth\"), n = He(a.maxHeight, o, \"clientHeight\");\n        }\n    }\n    return {\n        width: t,\n        height: e,\n        maxWidth: s || Ve,\n        maxHeight: n || Ve\n    };\n}\nconst ai = (i)=>Math.round(i * 10) / 10;\nfunction Br(i, t, e, s) {\n    const n = Ke(i), o = Ot(n, \"margin\"), r = He(n.maxWidth, i, \"clientWidth\") || Ve, a = He(n.maxHeight, i, \"clientHeight\") || Ve, l = zr(i, t, e);\n    let { width: c, height: h } = l;\n    if (n.boxSizing === \"content-box\") {\n        const d = Ot(n, \"border\", \"width\"), u = Ot(n, \"padding\");\n        c -= u.width + d.width, h -= u.height + d.height;\n    }\n    return c = Math.max(0, c - o.width), h = Math.max(0, s ? Math.floor(c / s) : h - o.height), c = ai(Math.min(c, r, l.maxWidth)), h = ai(Math.min(h, a, l.maxHeight)), c && !h && (h = ai(c / 2)), {\n        width: c,\n        height: h\n    };\n}\nfunction ls(i, t, e) {\n    const s = t || 1, n = Math.floor(i.height * s), o = Math.floor(i.width * s);\n    i.height = n / s, i.width = o / s;\n    const r = i.canvas;\n    return r.style && (e || !r.style.height && !r.style.width) && (r.style.height = `${i.height}px`, r.style.width = `${i.width}px`), i.currentDevicePixelRatio !== s || r.height !== n || r.width !== o ? (i.currentDevicePixelRatio = s, r.height = n, r.width = o, i.ctx.setTransform(s, 0, 0, s, 0, 0), !0) : !1;\n}\nconst Vr = function() {\n    let i = !1;\n    try {\n        const t = {\n            get passive () {\n                return i = !0, !1;\n            }\n        };\n        window.addEventListener(\"test\", null, t), window.removeEventListener(\"test\", null, t);\n    } catch  {}\n    return i;\n}();\nfunction cs(i, t) {\n    const e = Rr(i, t), s = e && e.match(/^(\\d+)(\\.\\d+)?px$/);\n    return s ? +s[1] : void 0;\n}\nfunction Ct(i, t, e, s) {\n    return {\n        x: i.x + e * (t.x - i.x),\n        y: i.y + e * (t.y - i.y)\n    };\n}\nfunction Wr(i, t, e, s) {\n    return {\n        x: i.x + e * (t.x - i.x),\n        y: s === \"middle\" ? e < 0.5 ? i.y : t.y : s === \"after\" ? e < 1 ? i.y : t.y : e > 0 ? t.y : i.y\n    };\n}\nfunction Nr(i, t, e, s) {\n    const n = {\n        x: i.cp2x,\n        y: i.cp2y\n    }, o = {\n        x: t.cp1x,\n        y: t.cp1y\n    }, r = Ct(i, n, e), a = Ct(n, o, e), l = Ct(o, t, e), c = Ct(r, a, e), h = Ct(a, l, e);\n    return Ct(c, h, e);\n}\nconst hs = /* @__PURE__ */ new Map();\nfunction Hr(i, t) {\n    t = t || {};\n    const e = i + JSON.stringify(t);\n    let s = hs.get(e);\n    return s || (s = new Intl.NumberFormat(i, t), hs.set(e, s)), s;\n}\nfunction de(i, t, e) {\n    return Hr(t, e).format(i);\n}\nconst jr = function(i, t) {\n    return {\n        x (e) {\n            return i + i + t - e;\n        },\n        setWidth (e) {\n            t = e;\n        },\n        textAlign (e) {\n            return e === \"center\" ? e : e === \"right\" ? \"left\" : \"right\";\n        },\n        xPlus (e, s) {\n            return e - s;\n        },\n        leftForLtr (e, s) {\n            return e - s;\n        }\n    };\n}, $r = function() {\n    return {\n        x (i) {\n            return i;\n        },\n        setWidth (i) {},\n        textAlign (i) {\n            return i;\n        },\n        xPlus (i, t) {\n            return i + t;\n        },\n        leftForLtr (i, t) {\n            return i;\n        }\n    };\n};\nfunction zt(i, t, e) {\n    return i ? jr(t, e) : $r();\n}\nfunction Tn(i, t) {\n    let e, s;\n    (t === \"ltr\" || t === \"rtl\") && (e = i.canvas.style, s = [\n        e.getPropertyValue(\"direction\"),\n        e.getPropertyPriority(\"direction\")\n    ], e.setProperty(\"direction\", t, \"important\"), i.prevTextDirection = s);\n}\nfunction Ln(i, t) {\n    t !== void 0 && (delete i.prevTextDirection, i.canvas.style.setProperty(\"direction\", t[0], t[1]));\n}\nfunction Rn(i) {\n    return i === \"angle\" ? {\n        between: oe,\n        compare: Ao,\n        normalize: Z\n    } : {\n        between: ut,\n        compare: (t, e)=>t - e,\n        normalize: (t)=>t\n    };\n}\nfunction ds({ start: i, end: t, count: e, loop: s, style: n }) {\n    return {\n        start: i % e,\n        end: t % e,\n        loop: s && (t - i + 1) % e === 0,\n        style: n\n    };\n}\nfunction Yr(i, t, e) {\n    const { property: s, start: n, end: o } = e, { between: r, normalize: a } = Rn(s), l = t.length;\n    let { start: c, end: h, loop: d } = i, u, f;\n    if (d) {\n        for(c += l, h += l, u = 0, f = l; u < f && r(a(t[c % l][s]), n, o); ++u)c--, h--;\n        c %= l, h %= l;\n    }\n    return h < c && (h += l), {\n        start: c,\n        end: h,\n        loop: d,\n        style: i.style\n    };\n}\nfunction En(i, t, e) {\n    if (!e) return [\n        i\n    ];\n    const { property: s, start: n, end: o } = e, r = t.length, { compare: a, between: l, normalize: c } = Rn(s), { start: h, end: d, loop: u, style: f } = Yr(i, t, e), g = [];\n    let p = !1, m = null, b, x, v;\n    const y = ()=>l(n, v, b) && a(n, v) !== 0, _ = ()=>a(o, b) === 0 || l(o, v, b), M = ()=>p || y(), k = ()=>!p || _();\n    for(let S = h, w = h; S <= d; ++S)x = t[S % r], !x.skip && (b = c(x[s]), b !== v && (p = l(b, n, o), m === null && M() && (m = a(b, n) === 0 ? S : w), m !== null && k() && (g.push(ds({\n        start: m,\n        end: S,\n        loop: u,\n        count: r,\n        style: f\n    })), m = null), w = S, v = b));\n    return m !== null && g.push(ds({\n        start: m,\n        end: d,\n        loop: u,\n        count: r,\n        style: f\n    })), g;\n}\nfunction Fn(i, t) {\n    const e = [], s = i.segments;\n    for(let n = 0; n < s.length; n++){\n        const o = En(s[n], i.points, t);\n        o.length && e.push(...o);\n    }\n    return e;\n}\nfunction Xr(i, t, e, s) {\n    let n = 0, o = t - 1;\n    if (e && !s) for(; n < t && !i[n].skip;)n++;\n    for(; n < t && i[n].skip;)n++;\n    for(n %= t, e && (o += n); o > n && i[o % t].skip;)o--;\n    return o %= t, {\n        start: n,\n        end: o\n    };\n}\nfunction Ur(i, t, e, s) {\n    const n = i.length, o = [];\n    let r = t, a = i[t], l;\n    for(l = t + 1; l <= e; ++l){\n        const c = i[l % n];\n        c.skip || c.stop ? a.skip || (s = !1, o.push({\n            start: t % n,\n            end: (l - 1) % n,\n            loop: s\n        }), t = r = c.stop ? l : null) : (r = l, a.skip && (t = l)), a = c;\n    }\n    return r !== null && o.push({\n        start: t % n,\n        end: r % n,\n        loop: s\n    }), o;\n}\nfunction Kr(i, t) {\n    const e = i.points, s = i.options.spanGaps, n = e.length;\n    if (!n) return [];\n    const o = !!i._loop, { start: r, end: a } = Xr(e, n, o, s);\n    if (s === !0) return us(i, [\n        {\n            start: r,\n            end: a,\n            loop: o\n        }\n    ], e, t);\n    const l = a < r ? a + n : a, c = !!i._fullLoop && r === 0 && a === n - 1;\n    return us(i, Ur(e, r, l, c), e, t);\n}\nfunction us(i, t, e, s) {\n    return !s || !s.setContext || !e ? t : qr(i, t, e, s);\n}\nfunction qr(i, t, e, s) {\n    const n = i._chart.getContext(), o = fs(i.options), { _datasetIndex: r, options: { spanGaps: a } } = i, l = e.length, c = [];\n    let h = o, d = t[0].start, u = d;\n    function f(g, p, m, b) {\n        const x = a ? -1 : 1;\n        if (g !== p) {\n            for(g += l; e[g % l].skip;)g -= x;\n            for(; e[p % l].skip;)p += x;\n            g % l !== p % l && (c.push({\n                start: g % l,\n                end: p % l,\n                loop: m,\n                style: b\n            }), h = b, d = p % l);\n        }\n    }\n    for (const g of t){\n        d = a ? d : g.start;\n        let p = e[d % l], m;\n        for(u = d + 1; u <= g.end; u++){\n            const b = e[u % l];\n            m = fs(s.setContext(vt(n, {\n                type: \"segment\",\n                p0: p,\n                p1: b,\n                p0DataIndex: (u - 1) % l,\n                p1DataIndex: u % l,\n                datasetIndex: r\n            }))), Gr(m, h) && f(d, u - 1, g.loop, h), p = b, h = m;\n        }\n        d < u - 1 && f(d, u - 1, g.loop, h);\n    }\n    return c;\n}\nfunction fs(i) {\n    return {\n        backgroundColor: i.backgroundColor,\n        borderCapStyle: i.borderCapStyle,\n        borderDash: i.borderDash,\n        borderDashOffset: i.borderDashOffset,\n        borderJoinStyle: i.borderJoinStyle,\n        borderWidth: i.borderWidth,\n        borderColor: i.borderColor\n    };\n}\nfunction Gr(i, t) {\n    return t && JSON.stringify(i) !== JSON.stringify(t);\n}\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */ class Zr {\n    constructor(){\n        this._request = null, this._charts = /* @__PURE__ */ new Map(), this._running = !1, this._lastDate = void 0;\n    }\n    _notify(t, e, s, n) {\n        const o = e.listeners[n], r = e.duration;\n        o.forEach((a)=>a({\n                chart: t,\n                initial: e.initial,\n                numSteps: r,\n                currentStep: Math.min(s - e.start, r)\n            }));\n    }\n    _refresh() {\n        this._request || (this._running = !0, this._request = fn.call(window, ()=>{\n            this._update(), this._request = null, this._running && this._refresh();\n        }));\n    }\n    _update(t = Date.now()) {\n        let e = 0;\n        this._charts.forEach((s, n)=>{\n            if (!s.running || !s.items.length) return;\n            const o = s.items;\n            let r = o.length - 1, a = !1, l;\n            for(; r >= 0; --r)l = o[r], l._active ? (l._total > s.duration && (s.duration = l._total), l.tick(t), a = !0) : (o[r] = o[o.length - 1], o.pop());\n            a && (n.draw(), this._notify(n, s, t, \"progress\")), o.length || (s.running = !1, this._notify(n, s, t, \"complete\"), s.initial = !1), e += o.length;\n        }), this._lastDate = t, e === 0 && (this._running = !1);\n    }\n    _getAnims(t) {\n        const e = this._charts;\n        let s = e.get(t);\n        return s || (s = {\n            running: !1,\n            initial: !0,\n            items: [],\n            listeners: {\n                complete: [],\n                progress: []\n            }\n        }, e.set(t, s)), s;\n    }\n    listen(t, e, s) {\n        this._getAnims(t).listeners[e].push(s);\n    }\n    add(t, e) {\n        !e || !e.length || this._getAnims(t).items.push(...e);\n    }\n    has(t) {\n        return this._getAnims(t).items.length > 0;\n    }\n    start(t) {\n        const e = this._charts.get(t);\n        e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce((s, n)=>Math.max(s, n._duration), 0), this._refresh());\n    }\n    running(t) {\n        if (!this._running) return !1;\n        const e = this._charts.get(t);\n        return !(!e || !e.running || !e.items.length);\n    }\n    stop(t) {\n        const e = this._charts.get(t);\n        if (!e || !e.items.length) return;\n        const s = e.items;\n        let n = s.length - 1;\n        for(; n >= 0; --n)s[n].cancel();\n        e.items = [], this._notify(t, e, Date.now(), \"complete\");\n    }\n    remove(t) {\n        return this._charts.delete(t);\n    }\n}\nvar at = new Zr();\nconst gs = \"transparent\", Jr = {\n    boolean (i, t, e) {\n        return e > 0.5 ? t : i;\n    },\n    color (i, t, e) {\n        const s = ns(i || gs), n = s.valid && ns(t || gs);\n        return n && n.valid ? n.mix(s, e).hexString() : t;\n    },\n    number (i, t, e) {\n        return i + (t - i) * e;\n    }\n};\nclass In {\n    constructor(t, e, s, n){\n        const o = e[s];\n        n = Zt([\n            t.to,\n            n,\n            o,\n            t.from\n        ]);\n        const r = Zt([\n            t.from,\n            o,\n            n\n        ]);\n        this._active = !0, this._fn = t.fn || Jr[t.type || typeof r], this._easing = ee[t.easing] || ee.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = s, this._from = r, this._to = n, this._promises = void 0;\n    }\n    active() {\n        return this._active;\n    }\n    update(t, e, s) {\n        if (this._active) {\n            this._notify(!1);\n            const n = this._target[this._prop], o = s - this._start, r = this._duration - o;\n            this._start = s, this._duration = Math.floor(Math.max(r, t.duration)), this._total += o, this._loop = !!t.loop, this._to = Zt([\n                t.to,\n                e,\n                n,\n                t.from\n            ]), this._from = Zt([\n                t.from,\n                n,\n                e\n            ]);\n        }\n    }\n    cancel() {\n        this._active && (this.tick(Date.now()), this._active = !1, this._notify(!1));\n    }\n    tick(t) {\n        const e = t - this._start, s = this._duration, n = this._prop, o = this._from, r = this._loop, a = this._to;\n        let l;\n        if (this._active = o !== a && (r || e < s), !this._active) {\n            this._target[n] = a, this._notify(!0);\n            return;\n        }\n        if (e < 0) {\n            this._target[n] = o;\n            return;\n        }\n        l = e / s % 2, l = r && l > 1 ? 2 - l : l, l = this._easing(Math.min(1, Math.max(0, l))), this._target[n] = this._fn(o, a, l);\n    }\n    wait() {\n        const t = this._promises || (this._promises = []);\n        return new Promise((e, s)=>{\n            t.push({\n                res: e,\n                rej: s\n            });\n        });\n    }\n    _notify(t) {\n        const e = t ? \"res\" : \"rej\", s = this._promises || [];\n        for(let n = 0; n < s.length; n++)s[n][e]();\n    }\n}\nconst Qr = [\n    \"x\",\n    \"y\",\n    \"borderWidth\",\n    \"radius\",\n    \"tension\"\n], ta = [\n    \"color\",\n    \"borderColor\",\n    \"backgroundColor\"\n];\nO.set(\"animation\", {\n    delay: void 0,\n    duration: 1e3,\n    easing: \"easeOutQuart\",\n    fn: void 0,\n    from: void 0,\n    loop: void 0,\n    to: void 0,\n    type: void 0\n});\nconst ea = Object.keys(O.animation);\nO.describe(\"animation\", {\n    _fallback: !1,\n    _indexable: !1,\n    _scriptable: (i)=>i !== \"onProgress\" && i !== \"onComplete\" && i !== \"fn\"\n});\nO.set(\"animations\", {\n    colors: {\n        type: \"color\",\n        properties: ta\n    },\n    numbers: {\n        type: \"number\",\n        properties: Qr\n    }\n});\nO.describe(\"animations\", {\n    _fallback: \"animation\"\n});\nO.set(\"transitions\", {\n    active: {\n        animation: {\n            duration: 400\n        }\n    },\n    resize: {\n        animation: {\n            duration: 0\n        }\n    },\n    show: {\n        animations: {\n            colors: {\n                from: \"transparent\"\n            },\n            visible: {\n                type: \"boolean\",\n                duration: 0\n            }\n        }\n    },\n    hide: {\n        animations: {\n            colors: {\n                to: \"transparent\"\n            },\n            visible: {\n                type: \"boolean\",\n                easing: \"linear\",\n                fn: (i)=>i | 0\n            }\n        }\n    }\n});\nclass Ni {\n    constructor(t, e){\n        this._chart = t, this._properties = /* @__PURE__ */ new Map(), this.configure(e);\n    }\n    configure(t) {\n        if (!D(t)) return;\n        const e = this._properties;\n        Object.getOwnPropertyNames(t).forEach((s)=>{\n            const n = t[s];\n            if (!D(n)) return;\n            const o = {};\n            for (const r of ea)o[r] = n[r];\n            (z(n.properties) && n.properties || [\n                s\n            ]).forEach((r)=>{\n                (r === s || !e.has(r)) && e.set(r, o);\n            });\n        });\n    }\n    _animateOptions(t, e) {\n        const s = e.options, n = sa(t, s);\n        if (!n) return [];\n        const o = this._createAnimations(n, s);\n        return s.$shared && ia(t.options.$animations, s).then(()=>{\n            t.options = s;\n        }, ()=>{}), o;\n    }\n    _createAnimations(t, e) {\n        const s = this._properties, n = [], o = t.$animations || (t.$animations = {}), r = Object.keys(e), a = Date.now();\n        let l;\n        for(l = r.length - 1; l >= 0; --l){\n            const c = r[l];\n            if (c.charAt(0) === \"$\") continue;\n            if (c === \"options\") {\n                n.push(...this._animateOptions(t, e));\n                continue;\n            }\n            const h = e[c];\n            let d = o[c];\n            const u = s.get(c);\n            if (d) if (u && d.active()) {\n                d.update(u, h, a);\n                continue;\n            } else d.cancel();\n            if (!u || !u.duration) {\n                t[c] = h;\n                continue;\n            }\n            o[c] = d = new In(u, t, c, h), n.push(d);\n        }\n        return n;\n    }\n    update(t, e) {\n        if (this._properties.size === 0) {\n            Object.assign(t, e);\n            return;\n        }\n        const s = this._createAnimations(t, e);\n        if (s.length) return at.add(this._chart, s), !0;\n    }\n}\nfunction ia(i, t) {\n    const e = [], s = Object.keys(t);\n    for(let n = 0; n < s.length; n++){\n        const o = i[s[n]];\n        o && o.active() && e.push(o.wait());\n    }\n    return Promise.all(e);\n}\nfunction sa(i, t) {\n    if (!t) return;\n    let e = i.options;\n    if (!e) {\n        i.options = t;\n        return;\n    }\n    return e.$shared && (i.options = e = Object.assign({}, e, {\n        $shared: !1,\n        $animations: {}\n    })), e;\n}\nfunction ps(i, t) {\n    const e = i && i.options || {}, s = e.reverse, n = e.min === void 0 ? t : 0, o = e.max === void 0 ? t : 0;\n    return {\n        start: s ? o : n,\n        end: s ? n : o\n    };\n}\nfunction na(i, t, e) {\n    if (e === !1) return !1;\n    const s = ps(i, e), n = ps(t, e);\n    return {\n        top: n.end,\n        right: s.end,\n        bottom: n.start,\n        left: s.start\n    };\n}\nfunction oa(i) {\n    let t, e, s, n;\n    return D(i) ? (t = i.top, e = i.right, s = i.bottom, n = i.left) : t = e = s = n = i, {\n        top: t,\n        right: e,\n        bottom: s,\n        left: n,\n        disabled: i === !1\n    };\n}\nfunction zn(i, t) {\n    const e = [], s = i._getSortedDatasetMetas(t);\n    let n, o;\n    for(n = 0, o = s.length; n < o; ++n)e.push(s[n].index);\n    return e;\n}\nfunction ms(i, t, e, s = {}) {\n    const n = i.keys, o = s.mode === \"single\";\n    let r, a, l, c;\n    if (t !== null) {\n        for(r = 0, a = n.length; r < a; ++r){\n            if (l = +n[r], l === e) {\n                if (s.all) continue;\n                break;\n            }\n            c = i.values[l], N(c) && (o || t === 0 || lt(t) === lt(c)) && (t += c);\n        }\n        return t;\n    }\n}\nfunction ra(i) {\n    const t = Object.keys(i), e = new Array(t.length);\n    let s, n, o;\n    for(s = 0, n = t.length; s < n; ++s)o = t[s], e[s] = {\n        x: o,\n        y: i[o]\n    };\n    return e;\n}\nfunction bs(i, t) {\n    const e = i && i.options.stacked;\n    return e || e === void 0 && t.stack !== void 0;\n}\nfunction aa(i, t, e) {\n    return `${i.id}.${t.id}.${e.stack || e.type}`;\n}\nfunction la(i) {\n    const { min: t, max: e, minDefined: s, maxDefined: n } = i.getUserBounds();\n    return {\n        min: s ? t : Number.NEGATIVE_INFINITY,\n        max: n ? e : Number.POSITIVE_INFINITY\n    };\n}\nfunction ca(i, t, e) {\n    const s = i[t] || (i[t] = {});\n    return s[e] || (s[e] = {});\n}\nfunction xs(i, t, e, s) {\n    for (const n of t.getMatchingVisibleMetas(s).reverse()){\n        const o = i[n.index];\n        if (e && o > 0 || !e && o < 0) return n.index;\n    }\n    return null;\n}\nfunction _s(i, t) {\n    const { chart: e, _cachedMeta: s } = i, n = e._stacks || (e._stacks = {}), { iScale: o, vScale: r, index: a } = s, l = o.axis, c = r.axis, h = aa(o, r, s), d = t.length;\n    let u;\n    for(let f = 0; f < d; ++f){\n        const g = t[f], { [l]: p, [c]: m } = g, b = g._stacks || (g._stacks = {});\n        u = b[c] = ca(n, h, p), u[a] = m, u._top = xs(u, r, !0, s.type), u._bottom = xs(u, r, !1, s.type);\n    }\n}\nfunction li(i, t) {\n    const e = i.scales;\n    return Object.keys(e).filter((s)=>e[s].axis === t).shift();\n}\nfunction ha(i, t) {\n    return vt(i, {\n        active: !1,\n        dataset: void 0,\n        datasetIndex: t,\n        index: t,\n        mode: \"default\",\n        type: \"dataset\"\n    });\n}\nfunction da(i, t, e) {\n    return vt(i, {\n        active: !1,\n        dataIndex: t,\n        parsed: void 0,\n        raw: void 0,\n        element: e,\n        index: t,\n        mode: \"default\",\n        type: \"data\"\n    });\n}\nfunction Yt(i, t) {\n    const e = i.controller.index, s = i.vScale && i.vScale.axis;\n    if (s) {\n        t = t || i._parsed;\n        for (const n of t){\n            const o = n._stacks;\n            if (!o || o[s] === void 0 || o[s][e] === void 0) return;\n            delete o[s][e];\n        }\n    }\n}\nconst ci = (i)=>i === \"reset\" || i === \"none\", ys = (i, t)=>t ? i : Object.assign({}, i), ua = (i, t, e)=>i && !t.hidden && t._stacked && {\n        keys: zn(e, !0),\n        values: null\n    };\nclass it {\n    constructor(t, e){\n        this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.supportsDecimation = !1, this.$context = void 0, this._syncList = [], this.initialize();\n    }\n    initialize() {\n        const t = this._cachedMeta;\n        this.configure(), this.linkScales(), t._stacked = bs(t.vScale, t), this.addElements();\n    }\n    updateIndex(t) {\n        this.index !== t && Yt(this._cachedMeta), this.index = t;\n    }\n    linkScales() {\n        const t = this.chart, e = this._cachedMeta, s = this.getDataset(), n = (d, u, f, g)=>d === \"x\" ? u : d === \"r\" ? g : f, o = e.xAxisID = C(s.xAxisID, li(t, \"x\")), r = e.yAxisID = C(s.yAxisID, li(t, \"y\")), a = e.rAxisID = C(s.rAxisID, li(t, \"r\")), l = e.indexAxis, c = e.iAxisID = n(l, o, r, a), h = e.vAxisID = n(l, r, o, a);\n        e.xScale = this.getScaleForId(o), e.yScale = this.getScaleForId(r), e.rScale = this.getScaleForId(a), e.iScale = this.getScaleForId(c), e.vScale = this.getScaleForId(h);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n    getScaleForId(t) {\n        return this.chart.scales[t];\n    }\n    _getOtherScale(t) {\n        const e = this._cachedMeta;\n        return t === e.iScale ? e.vScale : e.iScale;\n    }\n    reset() {\n        this._update(\"reset\");\n    }\n    _destroy() {\n        const t = this._cachedMeta;\n        this._data && Zi(this._data, this), t._stacked && Yt(t);\n    }\n    _dataCheck() {\n        const t = this.getDataset(), e = t.data || (t.data = []), s = this._data;\n        if (D(e)) this._data = ra(e);\n        else if (s !== e) {\n            if (s) {\n                Zi(s, this);\n                const n = this._cachedMeta;\n                Yt(n), n._parsed = [];\n            }\n            e && Object.isExtensible(e) && Eo(e, this), this._syncList = [], this._data = e;\n        }\n    }\n    addElements() {\n        const t = this._cachedMeta;\n        this._dataCheck(), this.datasetElementType && (t.dataset = new this.datasetElementType());\n    }\n    buildOrUpdateElements(t) {\n        const e = this._cachedMeta, s = this.getDataset();\n        let n = !1;\n        this._dataCheck();\n        const o = e._stacked;\n        e._stacked = bs(e.vScale, e), e.stack !== s.stack && (n = !0, Yt(e), e.stack = s.stack), this._resyncElements(t), (n || o !== e._stacked) && _s(this, e._parsed);\n    }\n    configure() {\n        const t = this.chart.config, e = t.datasetScopeKeys(this._type), s = t.getOptionScopes(this.getDataset(), e, !0);\n        this.options = t.createResolver(s, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};\n    }\n    parse(t, e) {\n        const { _cachedMeta: s, _data: n } = this, { iScale: o, _stacked: r } = s, a = o.axis;\n        let l = t === 0 && e === n.length ? !0 : s._sorted, c = t > 0 && s._parsed[t - 1], h, d, u;\n        if (this._parsing === !1) s._parsed = n, s._sorted = !0, u = n;\n        else {\n            z(n[t]) ? u = this.parseArrayData(s, n, t, e) : D(n[t]) ? u = this.parseObjectData(s, n, t, e) : u = this.parsePrimitiveData(s, n, t, e);\n            const f = ()=>d[a] === null || c && d[a] < c[a];\n            for(h = 0; h < e; ++h)s._parsed[h + t] = d = u[h], l && (f() && (l = !1), c = d);\n            s._sorted = l;\n        }\n        r && _s(this, u);\n    }\n    parsePrimitiveData(t, e, s, n) {\n        const { iScale: o, vScale: r } = t, a = o.axis, l = r.axis, c = o.getLabels(), h = o === r, d = new Array(n);\n        let u, f, g;\n        for(u = 0, f = n; u < f; ++u)g = u + s, d[u] = {\n            [a]: h || o.parse(c[g], g),\n            [l]: r.parse(e[g], g)\n        };\n        return d;\n    }\n    parseArrayData(t, e, s, n) {\n        const { xScale: o, yScale: r } = t, a = new Array(n);\n        let l, c, h, d;\n        for(l = 0, c = n; l < c; ++l)h = l + s, d = e[h], a[l] = {\n            x: o.parse(d[0], h),\n            y: r.parse(d[1], h)\n        };\n        return a;\n    }\n    parseObjectData(t, e, s, n) {\n        const { xScale: o, yScale: r } = t, { xAxisKey: a = \"x\", yAxisKey: l = \"y\" } = this._parsing, c = new Array(n);\n        let h, d, u, f;\n        for(h = 0, d = n; h < d; ++h)u = h + s, f = e[u], c[h] = {\n            x: o.parse(_t(f, a), u),\n            y: r.parse(_t(f, l), u)\n        };\n        return c;\n    }\n    getParsed(t) {\n        return this._cachedMeta._parsed[t];\n    }\n    getDataElement(t) {\n        return this._cachedMeta.data[t];\n    }\n    applyStack(t, e, s) {\n        const n = this.chart, o = this._cachedMeta, r = e[t.axis], a = {\n            keys: zn(n, !0),\n            values: e._stacks[t.axis]\n        };\n        return ms(a, r, o.index, {\n            mode: s\n        });\n    }\n    updateRangeFromParsed(t, e, s, n) {\n        const o = s[e.axis];\n        let r = o === null ? NaN : o;\n        const a = n && s._stacks[e.axis];\n        n && a && (n.values = a, r = ms(n, o, this._cachedMeta.index)), t.min = Math.min(t.min, r), t.max = Math.max(t.max, r);\n    }\n    getMinMax(t, e) {\n        const s = this._cachedMeta, n = s._parsed, o = s._sorted && t === s.iScale, r = n.length, a = this._getOtherScale(t), l = ua(e, s, this.chart), c = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        }, { min: h, max: d } = la(a);\n        let u, f;\n        function g() {\n            f = n[u];\n            const p = f[a.axis];\n            return !N(f[t.axis]) || h > p || d < p;\n        }\n        for(u = 0; u < r && !(!g() && (this.updateRangeFromParsed(c, t, f, l), o)); ++u);\n        if (o) {\n            for(u = r - 1; u >= 0; --u)if (!g()) {\n                this.updateRangeFromParsed(c, t, f, l);\n                break;\n            }\n        }\n        return c;\n    }\n    getAllParsedValues(t) {\n        const e = this._cachedMeta._parsed, s = [];\n        let n, o, r;\n        for(n = 0, o = e.length; n < o; ++n)r = e[n][t.axis], N(r) && s.push(r);\n        return s;\n    }\n    getMaxOverflow() {\n        return !1;\n    }\n    getLabelAndValue(t) {\n        const e = this._cachedMeta, s = e.iScale, n = e.vScale, o = this.getParsed(t);\n        return {\n            label: s ? \"\" + s.getLabelForValue(o[s.axis]) : \"\",\n            value: n ? \"\" + n.getLabelForValue(o[n.axis]) : \"\"\n        };\n    }\n    _update(t) {\n        const e = this._cachedMeta;\n        this.update(t || \"default\"), e._clip = oa(C(this.options.clip, na(e.xScale, e.yScale, this.getMaxOverflow())));\n    }\n    update(t) {}\n    draw() {\n        const t = this._ctx, e = this.chart, s = this._cachedMeta, n = s.data || [], o = e.chartArea, r = [], a = this._drawStart || 0, l = this._drawCount || n.length - a, c = this.options.drawActiveElementsOnTop;\n        let h;\n        for(s.dataset && s.dataset.draw(t, o, a, l), h = a; h < a + l; ++h){\n            const d = n[h];\n            d.hidden || (d.active && c ? r.push(d) : d.draw(t, o));\n        }\n        for(h = 0; h < r.length; ++h)r[h].draw(t, o);\n    }\n    getStyle(t, e) {\n        const s = e ? \"active\" : \"default\";\n        return t === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(s) : this.resolveDataElementOptions(t || 0, s);\n    }\n    getContext(t, e, s) {\n        const n = this.getDataset();\n        let o;\n        if (t >= 0 && t < this._cachedMeta.data.length) {\n            const r = this._cachedMeta.data[t];\n            o = r.$context || (r.$context = da(this.getContext(), t, r)), o.parsed = this.getParsed(t), o.raw = n.data[t], o.index = o.dataIndex = t;\n        } else o = this.$context || (this.$context = ha(this.chart.getContext(), this.index)), o.dataset = n, o.index = o.datasetIndex = this.index;\n        return o.active = !!e, o.mode = s, o;\n    }\n    resolveDatasetElementOptions(t) {\n        return this._resolveElementOptions(this.datasetElementType.id, t);\n    }\n    resolveDataElementOptions(t, e) {\n        return this._resolveElementOptions(this.dataElementType.id, e, t);\n    }\n    _resolveElementOptions(t, e = \"default\", s) {\n        const n = e === \"active\", o = this._cachedDataOpts, r = t + \"-\" + e, a = o[r], l = this.enableOptionSharing && et(s);\n        if (a) return ys(a, l);\n        const c = this.chart.config, h = c.datasetElementScopeKeys(this._type, t), d = n ? [\n            `${t}Hover`,\n            \"hover\",\n            t,\n            \"\"\n        ] : [\n            t,\n            \"\"\n        ], u = c.getOptionScopes(this.getDataset(), h), f = Object.keys(O.elements[t]), g = ()=>this.getContext(s, n), p = c.resolveNamedOptions(u, f, g, d);\n        return p.$shared && (p.$shared = l, o[r] = Object.freeze(ys(p, l))), p;\n    }\n    _resolveAnimations(t, e, s) {\n        const n = this.chart, o = this._cachedDataOpts, r = `animation-${e}`, a = o[r];\n        if (a) return a;\n        let l;\n        if (n.options.animation !== !1) {\n            const h = this.chart.config, d = h.datasetAnimationScopeKeys(this._type, e), u = h.getOptionScopes(this.getDataset(), d);\n            l = h.createResolver(u, this.getContext(t, s, e));\n        }\n        const c = new Ni(n, l && l.animations);\n        return l && l._cacheable && (o[r] = Object.freeze(c)), c;\n    }\n    getSharedOptions(t) {\n        if (t.$shared) return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));\n    }\n    includeOptions(t, e) {\n        return !e || ci(t) || this.chart._animationsDisabled;\n    }\n    _getSharedOptions(t, e) {\n        const s = this.resolveDataElementOptions(t, e), n = this._sharedOptions, o = this.getSharedOptions(s), r = this.includeOptions(e, o) || o !== n;\n        return this.updateSharedOptions(o, e, s), {\n            sharedOptions: o,\n            includeOptions: r\n        };\n    }\n    updateElement(t, e, s, n) {\n        ci(n) ? Object.assign(t, s) : this._resolveAnimations(e, n).update(t, s);\n    }\n    updateSharedOptions(t, e, s) {\n        t && !ci(e) && this._resolveAnimations(void 0, e).update(t, s);\n    }\n    _setStyle(t, e, s, n) {\n        t.active = n;\n        const o = this.getStyle(e, n);\n        this._resolveAnimations(e, s, n).update(t, {\n            options: !n && this.getSharedOptions(o) || o\n        });\n    }\n    removeHoverStyle(t, e, s) {\n        this._setStyle(t, s, \"active\", !1);\n    }\n    setHoverStyle(t, e, s) {\n        this._setStyle(t, s, \"active\", !0);\n    }\n    _removeDatasetHoverStyle() {\n        const t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !1);\n    }\n    _setDatasetHoverStyle() {\n        const t = this._cachedMeta.dataset;\n        t && this._setStyle(t, void 0, \"active\", !0);\n    }\n    _resyncElements(t) {\n        const e = this._data, s = this._cachedMeta.data;\n        for (const [a, l, c] of this._syncList)this[a](l, c);\n        this._syncList = [];\n        const n = s.length, o = e.length, r = Math.min(o, n);\n        r && this.parse(0, r), o > n ? this._insertElements(n, o - n, t) : o < n && this._removeElements(o, n - o);\n    }\n    _insertElements(t, e, s = !0) {\n        const n = this._cachedMeta, o = n.data, r = t + e;\n        let a;\n        const l = (c)=>{\n            for(c.length += e, a = c.length - 1; a >= r; a--)c[a] = c[a - e];\n        };\n        for(l(o), a = t; a < r; ++a)o[a] = new this.dataElementType();\n        this._parsing && l(n._parsed), this.parse(t, e), s && this.updateElements(o, t, e, \"reset\");\n    }\n    updateElements(t, e, s, n) {}\n    _removeElements(t, e) {\n        const s = this._cachedMeta;\n        if (this._parsing) {\n            const n = s._parsed.splice(t, e);\n            s._stacked && Yt(s, n);\n        }\n        s.data.splice(t, e);\n    }\n    _sync(t) {\n        if (this._parsing) this._syncList.push(t);\n        else {\n            const [e, s, n] = t;\n            this[e](s, n);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...t\n        ]);\n    }\n    _onDataPush() {\n        const t = arguments.length;\n        this._sync([\n            \"_insertElements\",\n            this.getDataset().data.length - t,\n            t\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            \"_removeElements\",\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            \"_removeElements\",\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(t, e) {\n        e && this._sync([\n            \"_removeElements\",\n            t,\n            e\n        ]);\n        const s = arguments.length - 2;\n        s && this._sync([\n            \"_insertElements\",\n            t,\n            s\n        ]);\n    }\n    _onDataUnshift() {\n        this._sync([\n            \"_insertElements\",\n            0,\n            arguments.length\n        ]);\n    }\n}\nit.defaults = {};\nit.prototype.datasetElementType = null;\nit.prototype.dataElementType = null;\nfunction fa(i, t) {\n    if (!i._cache.$bar) {\n        const e = i.getMatchingVisibleMetas(t);\n        let s = [];\n        for(let n = 0, o = e.length; n < o; n++)s = s.concat(e[n].controller.getAllParsedValues(i));\n        i._cache.$bar = un(s.sort((n, o)=>n - o));\n    }\n    return i._cache.$bar;\n}\nfunction ga(i) {\n    const t = i.iScale, e = fa(t, i.type);\n    let s = t._length, n, o, r, a;\n    const l = ()=>{\n        r === 32767 || r === -32768 || (et(a) && (s = Math.min(s, Math.abs(r - a) || s)), a = r);\n    };\n    for(n = 0, o = e.length; n < o; ++n)r = t.getPixelForValue(e[n]), l();\n    for(a = void 0, n = 0, o = t.ticks.length; n < o; ++n)r = t.getPixelForTick(n), l();\n    return s;\n}\nfunction pa(i, t, e, s) {\n    const n = e.barThickness;\n    let o, r;\n    return T(n) ? (o = t.min * e.categoryPercentage, r = e.barPercentage) : (o = n * s, r = 1), {\n        chunk: o / s,\n        ratio: r,\n        start: t.pixels[i] - o / 2\n    };\n}\nfunction ma(i, t, e, s) {\n    const n = t.pixels, o = n[i];\n    let r = i > 0 ? n[i - 1] : null, a = i < n.length - 1 ? n[i + 1] : null;\n    const l = e.categoryPercentage;\n    r === null && (r = o - (a === null ? t.end - t.start : a - o)), a === null && (a = o + o - r);\n    const c = o - (o - Math.min(r, a)) / 2 * l;\n    return {\n        chunk: Math.abs(a - r) / 2 * l / s,\n        ratio: e.barPercentage,\n        start: c\n    };\n}\nfunction ba(i, t, e, s) {\n    const n = e.parse(i[0], s), o = e.parse(i[1], s), r = Math.min(n, o), a = Math.max(n, o);\n    let l = r, c = a;\n    Math.abs(r) > Math.abs(a) && (l = a, c = r), t[e.axis] = c, t._custom = {\n        barStart: l,\n        barEnd: c,\n        start: n,\n        end: o,\n        min: r,\n        max: a\n    };\n}\nfunction Bn(i, t, e, s) {\n    return z(i) ? ba(i, t, e, s) : t[e.axis] = e.parse(i, s), t;\n}\nfunction vs(i, t, e, s) {\n    const n = i.iScale, o = i.vScale, r = n.getLabels(), a = n === o, l = [];\n    let c, h, d, u;\n    for(c = e, h = e + s; c < h; ++c)u = t[c], d = {}, d[n.axis] = a || n.parse(r[c], c), l.push(Bn(u, d, o, c));\n    return l;\n}\nfunction hi(i) {\n    return i && i.barStart !== void 0 && i.barEnd !== void 0;\n}\nfunction xa(i, t, e) {\n    return i !== 0 ? lt(i) : (t.isHorizontal() ? 1 : -1) * (t.min >= e ? 1 : -1);\n}\nfunction _a(i) {\n    let t, e, s, n, o;\n    return i.horizontal ? (t = i.base > i.x, e = \"left\", s = \"right\") : (t = i.base < i.y, e = \"bottom\", s = \"top\"), t ? (n = \"end\", o = \"start\") : (n = \"start\", o = \"end\"), {\n        start: e,\n        end: s,\n        reverse: t,\n        top: n,\n        bottom: o\n    };\n}\nfunction ya(i, t, e, s) {\n    let n = t.borderSkipped;\n    const o = {};\n    if (!n) {\n        i.borderSkipped = o;\n        return;\n    }\n    if (n === !0) {\n        i.borderSkipped = {\n            top: !0,\n            right: !0,\n            bottom: !0,\n            left: !0\n        };\n        return;\n    }\n    const { start: r, end: a, reverse: l, top: c, bottom: h } = _a(i);\n    n === \"middle\" && e && (i.enableBorderRadius = !0, (e._top || 0) === s ? n = c : (e._bottom || 0) === s ? n = h : (o[Ms(h, r, a, l)] = !0, n = c)), o[Ms(n, r, a, l)] = !0, i.borderSkipped = o;\n}\nfunction Ms(i, t, e, s) {\n    return s ? (i = va(i, t, e), i = ks(i, e, t)) : i = ks(i, t, e), i;\n}\nfunction va(i, t, e) {\n    return i === t ? e : i === e ? t : i;\n}\nfunction ks(i, t, e) {\n    return i === \"start\" ? t : i === \"end\" ? e : i;\n}\nfunction Ma(i, { inflateAmount: t }, e) {\n    i.inflateAmount = t === \"auto\" ? e === 1 ? 0.33 : 0 : t;\n}\nclass ue extends it {\n    parsePrimitiveData(t, e, s, n) {\n        return vs(t, e, s, n);\n    }\n    parseArrayData(t, e, s, n) {\n        return vs(t, e, s, n);\n    }\n    parseObjectData(t, e, s, n) {\n        const { iScale: o, vScale: r } = t, { xAxisKey: a = \"x\", yAxisKey: l = \"y\" } = this._parsing, c = o.axis === \"x\" ? a : l, h = r.axis === \"x\" ? a : l, d = [];\n        let u, f, g, p;\n        for(u = s, f = s + n; u < f; ++u)p = e[u], g = {}, g[o.axis] = o.parse(_t(p, c), u), d.push(Bn(_t(p, h), g, r, u));\n        return d;\n    }\n    updateRangeFromParsed(t, e, s, n) {\n        super.updateRangeFromParsed(t, e, s, n);\n        const o = s._custom;\n        o && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, o.min), t.max = Math.max(t.max, o.max));\n    }\n    getMaxOverflow() {\n        return 0;\n    }\n    getLabelAndValue(t) {\n        const e = this._cachedMeta, { iScale: s, vScale: n } = e, o = this.getParsed(t), r = o._custom, a = hi(r) ? \"[\" + r.start + \", \" + r.end + \"]\" : \"\" + n.getLabelForValue(o[n.axis]);\n        return {\n            label: \"\" + s.getLabelForValue(o[s.axis]),\n            value: a\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = !0, super.initialize();\n        const t = this._cachedMeta;\n        t.stack = this.getDataset().stack;\n    }\n    update(t) {\n        const e = this._cachedMeta;\n        this.updateElements(e.data, 0, e.data.length, t);\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", { index: r, _cachedMeta: { vScale: a } } = this, l = a.getBasePixel(), c = a.isHorizontal(), h = this._getRuler(), { sharedOptions: d, includeOptions: u } = this._getSharedOptions(e, n);\n        for(let f = e; f < e + s; f++){\n            const g = this.getParsed(f), p = o || T(g[a.axis]) ? {\n                base: l,\n                head: l\n            } : this._calculateBarValuePixels(f), m = this._calculateBarIndexPixels(f, h), b = (g._stacks || {})[a.axis], x = {\n                horizontal: c,\n                base: p.base,\n                enableBorderRadius: !b || hi(g._custom) || r === b._top || r === b._bottom,\n                x: c ? p.head : m.center,\n                y: c ? m.center : p.head,\n                height: c ? m.size : Math.abs(p.size),\n                width: c ? Math.abs(p.size) : m.size\n            };\n            u && (x.options = d || this.resolveDataElementOptions(f, t[f].active ? \"active\" : n));\n            const v = x.options || t[f].options;\n            ya(x, v, b, r), Ma(x, v, h.ratio), this.updateElement(t[f], f, x, n);\n        }\n    }\n    _getStacks(t, e) {\n        const { iScale: s } = this._cachedMeta, n = s.getMatchingVisibleMetas(this._type).filter((l)=>l.controller.options.grouped), o = s.options.stacked, r = [], a = (l)=>{\n            const c = l.controller.getParsed(e), h = c && c[l.vScale.axis];\n            if (T(h) || isNaN(h)) return !0;\n        };\n        for (const l of n)if (!(e !== void 0 && a(l)) && ((o === !1 || r.indexOf(l.stack) === -1 || o === void 0 && l.stack === void 0) && r.push(l.stack), l.index === t)) break;\n        return r.length || r.push(void 0), r;\n    }\n    _getStackCount(t) {\n        return this._getStacks(void 0, t).length;\n    }\n    _getStackIndex(t, e, s) {\n        const n = this._getStacks(t, s), o = e !== void 0 ? n.indexOf(e) : -1;\n        return o === -1 ? n.length - 1 : o;\n    }\n    _getRuler() {\n        const t = this.options, e = this._cachedMeta, s = e.iScale, n = [];\n        let o, r;\n        for(o = 0, r = e.data.length; o < r; ++o)n.push(s.getPixelForValue(this.getParsed(o)[s.axis], o));\n        const a = t.barThickness;\n        return {\n            min: a || ga(e),\n            pixels: n,\n            start: s._startPixel,\n            end: s._endPixel,\n            stackCount: this._getStackCount(),\n            scale: s,\n            grouped: t.grouped,\n            ratio: a ? 1 : t.categoryPercentage * t.barPercentage\n        };\n    }\n    _calculateBarValuePixels(t) {\n        const { _cachedMeta: { vScale: e, _stacked: s }, options: { base: n, minBarLength: o } } = this, r = n || 0, a = this.getParsed(t), l = a._custom, c = hi(l);\n        let h = a[e.axis], d = 0, u = s ? this.applyStack(e, a, s) : h, f, g;\n        u !== h && (d = u - h, u = h), c && (h = l.barStart, u = l.barEnd - l.barStart, h !== 0 && lt(h) !== lt(l.barEnd) && (d = 0), d += h);\n        const p = !T(n) && !c ? n : d;\n        let m = e.getPixelForValue(p);\n        if (this.chart.getDataVisibility(t) ? f = e.getPixelForValue(d + u) : f = m, g = f - m, Math.abs(g) < o) {\n            g = xa(g, e, r) * o, h === r && (m -= g / 2);\n            const b = e.getPixelForDecimal(0), x = e.getPixelForDecimal(1), v = Math.min(b, x), y = Math.max(b, x);\n            m = Math.max(Math.min(m, y), v), f = m + g;\n        }\n        if (m === e.getPixelForValue(r)) {\n            const b = lt(g) * e.getLineWidthForValue(r) / 2;\n            m += b, g -= b;\n        }\n        return {\n            size: g,\n            base: m,\n            head: f,\n            center: f + g / 2\n        };\n    }\n    _calculateBarIndexPixels(t, e) {\n        const s = e.scale, n = this.options, o = n.skipNull, r = C(n.maxBarThickness, 1 / 0);\n        let a, l;\n        if (e.grouped) {\n            const c = o ? this._getStackCount(t) : e.stackCount, h = n.barThickness === \"flex\" ? ma(t, e, n, c) : pa(t, e, n, c), d = this._getStackIndex(this.index, this._cachedMeta.stack, o ? t : void 0);\n            a = h.start + h.chunk * d + h.chunk / 2, l = Math.min(r, h.chunk * h.ratio);\n        } else a = s.getPixelForValue(this.getParsed(t)[s.axis], t), l = Math.min(r, e.min * e.ratio);\n        return {\n            base: a - l / 2,\n            head: a + l / 2,\n            center: a,\n            size: l\n        };\n    }\n    draw() {\n        const t = this._cachedMeta, e = t.vScale, s = t.data, n = s.length;\n        let o = 0;\n        for(; o < n; ++o)this.getParsed(o)[e.axis] !== null && s[o].draw(this._ctx);\n    }\n}\nue.id = \"bar\";\nue.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"bar\",\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: !0,\n    animations: {\n        numbers: {\n            type: \"number\",\n            properties: [\n                \"x\",\n                \"y\",\n                \"base\",\n                \"width\",\n                \"height\"\n            ]\n        }\n    }\n};\nue.overrides = {\n    scales: {\n        _index_: {\n            type: \"category\",\n            offset: !0,\n            grid: {\n                offset: !0\n            }\n        },\n        _value_: {\n            type: \"linear\",\n            beginAtZero: !0\n        }\n    }\n};\nclass fe extends it {\n    initialize() {\n        this.enableOptionSharing = !0, super.initialize();\n    }\n    parsePrimitiveData(t, e, s, n) {\n        const o = super.parsePrimitiveData(t, e, s, n);\n        for(let r = 0; r < o.length; r++)o[r]._custom = this.resolveDataElementOptions(r + s).radius;\n        return o;\n    }\n    parseArrayData(t, e, s, n) {\n        const o = super.parseArrayData(t, e, s, n);\n        for(let r = 0; r < o.length; r++){\n            const a = e[s + r];\n            o[r]._custom = C(a[2], this.resolveDataElementOptions(r + s).radius);\n        }\n        return o;\n    }\n    parseObjectData(t, e, s, n) {\n        const o = super.parseObjectData(t, e, s, n);\n        for(let r = 0; r < o.length; r++){\n            const a = e[s + r];\n            o[r]._custom = C(a && a.r && +a.r, this.resolveDataElementOptions(r + s).radius);\n        }\n        return o;\n    }\n    getMaxOverflow() {\n        const t = this._cachedMeta.data;\n        let e = 0;\n        for(let s = t.length - 1; s >= 0; --s)e = Math.max(e, t[s].size(this.resolveDataElementOptions(s)) / 2);\n        return e > 0 && e;\n    }\n    getLabelAndValue(t) {\n        const e = this._cachedMeta, { xScale: s, yScale: n } = e, o = this.getParsed(t), r = s.getLabelForValue(o.x), a = n.getLabelForValue(o.y), l = o._custom;\n        return {\n            label: e.label,\n            value: \"(\" + r + \", \" + a + (l ? \", \" + l : \"\") + \")\"\n        };\n    }\n    update(t) {\n        const e = this._cachedMeta.data;\n        this.updateElements(e, 0, e.length, t);\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", { iScale: r, vScale: a } = this._cachedMeta, { sharedOptions: l, includeOptions: c } = this._getSharedOptions(e, n), h = r.axis, d = a.axis;\n        for(let u = e; u < e + s; u++){\n            const f = t[u], g = !o && this.getParsed(u), p = {}, m = p[h] = o ? r.getPixelForDecimal(0.5) : r.getPixelForValue(g[h]), b = p[d] = o ? a.getBasePixel() : a.getPixelForValue(g[d]);\n            p.skip = isNaN(m) || isNaN(b), c && (p.options = l || this.resolveDataElementOptions(u, f.active ? \"active\" : n), o && (p.options.radius = 0)), this.updateElement(f, u, p, n);\n        }\n    }\n    resolveDataElementOptions(t, e) {\n        const s = this.getParsed(t);\n        let n = super.resolveDataElementOptions(t, e);\n        n.$shared && (n = Object.assign({}, n, {\n            $shared: !1\n        }));\n        const o = n.radius;\n        return e !== \"active\" && (n.radius = 0), n.radius += C(s && s._custom, o), n;\n    }\n}\nfe.id = \"bubble\";\nfe.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"point\",\n    animations: {\n        numbers: {\n            type: \"number\",\n            properties: [\n                \"x\",\n                \"y\",\n                \"borderWidth\",\n                \"radius\"\n            ]\n        }\n    }\n};\nfe.overrides = {\n    scales: {\n        x: {\n            type: \"linear\"\n        },\n        y: {\n            type: \"linear\"\n        }\n    },\n    plugins: {\n        tooltip: {\n            callbacks: {\n                title () {\n                    return \"\";\n                }\n            }\n        }\n    }\n};\nfunction ka(i, t, e) {\n    let s = 1, n = 1, o = 0, r = 0;\n    if (t < F) {\n        const a = i, l = a + t, c = Math.cos(a), h = Math.sin(a), d = Math.cos(l), u = Math.sin(l), f = (v, y, _)=>oe(v, a, l, !0) ? 1 : Math.max(y, y * e, _, _ * e), g = (v, y, _)=>oe(v, a, l, !0) ? -1 : Math.min(y, y * e, _, _ * e), p = f(0, c, d), m = f(V, h, u), b = g(B, c, d), x = g(B + V, h, u);\n        s = (p - b) / 2, n = (m - x) / 2, o = -(p + b) / 2, r = -(m + x) / 2;\n    }\n    return {\n        ratioX: s,\n        ratioY: n,\n        offsetX: o,\n        offsetY: r\n    };\n}\nclass Lt extends it {\n    constructor(t, e){\n        super(t, e), this.enableOptionSharing = !0, this.innerRadius = void 0, this.outerRadius = void 0, this.offsetX = void 0, this.offsetY = void 0;\n    }\n    linkScales() {}\n    parse(t, e) {\n        const s = this.getDataset().data, n = this._cachedMeta;\n        if (this._parsing === !1) n._parsed = s;\n        else {\n            let o = (l)=>+s[l];\n            if (D(s[t])) {\n                const { key: l = \"value\" } = this._parsing;\n                o = (c)=>+_t(s[c], l);\n            }\n            let r, a;\n            for(r = t, a = t + e; r < a; ++r)n._parsed[r] = o(r);\n        }\n    }\n    _getRotation() {\n        return nt(this.options.rotation - 90);\n    }\n    _getCircumference() {\n        return nt(this.options.circumference);\n    }\n    _getRotationExtents() {\n        let t = F, e = -F;\n        for(let s = 0; s < this.chart.data.datasets.length; ++s)if (this.chart.isDatasetVisible(s)) {\n            const n = this.chart.getDatasetMeta(s).controller, o = n._getRotation(), r = n._getCircumference();\n            t = Math.min(t, o), e = Math.max(e, o + r);\n        }\n        return {\n            rotation: t,\n            circumference: e - t\n        };\n    }\n    update(t) {\n        const e = this.chart, { chartArea: s } = e, n = this._cachedMeta, o = n.data, r = this.getMaxBorderWidth() + this.getMaxOffset(o) + this.options.spacing, a = Math.max((Math.min(s.width, s.height) - r) / 2, 0), l = Math.min(yo(this.options.cutout, a), 1), c = this._getRingWeight(this.index), { circumference: h, rotation: d } = this._getRotationExtents(), { ratioX: u, ratioY: f, offsetX: g, offsetY: p } = ka(d, h, l), m = (s.width - r) / u, b = (s.height - r) / f, x = Math.max(Math.min(m, b) / 2, 0), v = an(this.options.radius, x), y = Math.max(v * l, 0), _ = (v - y) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = g * v, this.offsetY = p * v, n.total = this.calculateTotal(), this.outerRadius = v - _ * this._getRingWeightOffset(this.index), this.innerRadius = Math.max(this.outerRadius - _ * c, 0), this.updateElements(o, 0, o.length, t);\n    }\n    _circumference(t, e) {\n        const s = this.options, n = this._cachedMeta, o = this._getCircumference();\n        return e && s.animation.animateRotate || !this.chart.getDataVisibility(t) || n._parsed[t] === null || n.data[t].hidden ? 0 : this.calculateCircumference(n._parsed[t] * o / F);\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", r = this.chart, a = r.chartArea, c = r.options.animation, h = (a.left + a.right) / 2, d = (a.top + a.bottom) / 2, u = o && c.animateScale, f = u ? 0 : this.innerRadius, g = u ? 0 : this.outerRadius, { sharedOptions: p, includeOptions: m } = this._getSharedOptions(e, n);\n        let b = this._getRotation(), x;\n        for(x = 0; x < e; ++x)b += this._circumference(x, o);\n        for(x = e; x < e + s; ++x){\n            const v = this._circumference(x, o), y = t[x], _ = {\n                x: h + this.offsetX,\n                y: d + this.offsetY,\n                startAngle: b,\n                endAngle: b + v,\n                circumference: v,\n                outerRadius: g,\n                innerRadius: f\n            };\n            m && (_.options = p || this.resolveDataElementOptions(x, y.active ? \"active\" : n)), b += v, this.updateElement(y, x, _, n);\n        }\n    }\n    calculateTotal() {\n        const t = this._cachedMeta, e = t.data;\n        let s = 0, n;\n        for(n = 0; n < e.length; n++){\n            const o = t._parsed[n];\n            o !== null && !isNaN(o) && this.chart.getDataVisibility(n) && !e[n].hidden && (s += Math.abs(o));\n        }\n        return s;\n    }\n    calculateCircumference(t) {\n        const e = this._cachedMeta.total;\n        return e > 0 && !isNaN(t) ? F * (Math.abs(t) / e) : 0;\n    }\n    getLabelAndValue(t) {\n        const e = this._cachedMeta, s = this.chart, n = s.data.labels || [], o = de(e._parsed[t], s.options.locale);\n        return {\n            label: n[t] || \"\",\n            value: o\n        };\n    }\n    getMaxBorderWidth(t) {\n        let e = 0;\n        const s = this.chart;\n        let n, o, r, a, l;\n        if (!t) {\n            for(n = 0, o = s.data.datasets.length; n < o; ++n)if (s.isDatasetVisible(n)) {\n                r = s.getDatasetMeta(n), t = r.data, a = r.controller;\n                break;\n            }\n        }\n        if (!t) return 0;\n        for(n = 0, o = t.length; n < o; ++n)l = a.resolveDataElementOptions(n), l.borderAlign !== \"inner\" && (e = Math.max(e, l.borderWidth || 0, l.hoverBorderWidth || 0));\n        return e;\n    }\n    getMaxOffset(t) {\n        let e = 0;\n        for(let s = 0, n = t.length; s < n; ++s){\n            const o = this.resolveDataElementOptions(s);\n            e = Math.max(e, o.offset || 0, o.hoverOffset || 0);\n        }\n        return e;\n    }\n    _getRingWeightOffset(t) {\n        let e = 0;\n        for(let s = 0; s < t; ++s)this.chart.isDatasetVisible(s) && (e += this._getRingWeight(s));\n        return e;\n    }\n    _getRingWeight(t) {\n        return Math.max(C(this.chart.data.datasets[t].weight, 1), 0);\n    }\n    _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\nLt.id = \"doughnut\";\nLt.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"arc\",\n    animation: {\n        animateRotate: !0,\n        animateScale: !1\n    },\n    animations: {\n        numbers: {\n            type: \"number\",\n            properties: [\n                \"circumference\",\n                \"endAngle\",\n                \"innerRadius\",\n                \"outerRadius\",\n                \"startAngle\",\n                \"x\",\n                \"y\",\n                \"offset\",\n                \"borderWidth\",\n                \"spacing\"\n            ]\n        }\n    },\n    cutout: \"50%\",\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\",\n    spacing: 0,\n    indexAxis: \"r\"\n};\nLt.descriptors = {\n    _scriptable: (i)=>i !== \"spacing\",\n    _indexable: (i)=>i !== \"spacing\"\n};\nLt.overrides = {\n    aspectRatio: 1,\n    plugins: {\n        legend: {\n            labels: {\n                generateLabels (i) {\n                    const t = i.data;\n                    if (t.labels.length && t.datasets.length) {\n                        const { labels: { pointStyle: e } } = i.legend.options;\n                        return t.labels.map((s, n)=>{\n                            const r = i.getDatasetMeta(0).controller.getStyle(n);\n                            return {\n                                text: s,\n                                fillStyle: r.backgroundColor,\n                                strokeStyle: r.borderColor,\n                                lineWidth: r.borderWidth,\n                                pointStyle: e,\n                                hidden: !i.getDataVisibility(n),\n                                index: n\n                            };\n                        });\n                    }\n                    return [];\n                }\n            },\n            onClick (i, t, e) {\n                e.chart.toggleDataVisibility(t.index), e.chart.update();\n            }\n        },\n        tooltip: {\n            callbacks: {\n                title () {\n                    return \"\";\n                },\n                label (i) {\n                    let t = i.label;\n                    const e = \": \" + i.formattedValue;\n                    return z(t) ? (t = t.slice(), t[0] += e) : t += e, t;\n                }\n            }\n        }\n    }\n};\nclass ge extends it {\n    initialize() {\n        this.enableOptionSharing = !0, this.supportsDecimation = !0, super.initialize();\n    }\n    update(t) {\n        const e = this._cachedMeta, { dataset: s, data: n = [], _dataset: o } = e, r = this.chart._animationsDisabled;\n        let { start: a, count: l } = pn(e, n, r);\n        this._drawStart = a, this._drawCount = l, mn(e) && (a = 0, l = n.length), s._chart = this.chart, s._datasetIndex = this.index, s._decimated = !!o._decimated, s.points = n;\n        const c = this.resolveDatasetElementOptions(t);\n        this.options.showLine || (c.borderWidth = 0), c.segment = this.options.segment, this.updateElement(s, void 0, {\n            animated: !r,\n            options: c\n        }, t), this.updateElements(n, a, l, t);\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", { iScale: r, vScale: a, _stacked: l, _dataset: c } = this._cachedMeta, { sharedOptions: h, includeOptions: d } = this._getSharedOptions(e, n), u = r.axis, f = a.axis, { spanGaps: g, segment: p } = this.options, m = Bt(g) ? g : Number.POSITIVE_INFINITY, b = this.chart._animationsDisabled || o || n === \"none\";\n        let x = e > 0 && this.getParsed(e - 1);\n        for(let v = e; v < e + s; ++v){\n            const y = t[v], _ = this.getParsed(v), M = b ? y : {}, k = T(_[f]), S = M[u] = r.getPixelForValue(_[u], v), w = M[f] = o || k ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, _, l) : _[f], v);\n            M.skip = isNaN(S) || isNaN(w) || k, M.stop = v > 0 && Math.abs(_[u] - x[u]) > m, p && (M.parsed = _, M.raw = c.data[v]), d && (M.options = h || this.resolveDataElementOptions(v, y.active ? \"active\" : n)), b || this.updateElement(y, v, M, n), x = _;\n        }\n    }\n    getMaxOverflow() {\n        const t = this._cachedMeta, e = t.dataset, s = e.options && e.options.borderWidth || 0, n = t.data || [];\n        if (!n.length) return s;\n        const o = n[0].size(this.resolveDataElementOptions(0)), r = n[n.length - 1].size(this.resolveDataElementOptions(n.length - 1));\n        return Math.max(s, o, r) / 2;\n    }\n    draw() {\n        const t = this._cachedMeta;\n        t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), super.draw();\n    }\n}\nge.id = \"line\";\nge.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    showLine: !0,\n    spanGaps: !1\n};\nge.overrides = {\n    scales: {\n        _index_: {\n            type: \"category\"\n        },\n        _value_: {\n            type: \"linear\"\n        }\n    }\n};\nclass pe extends it {\n    constructor(t, e){\n        super(t, e), this.innerRadius = void 0, this.outerRadius = void 0;\n    }\n    getLabelAndValue(t) {\n        const e = this._cachedMeta, s = this.chart, n = s.data.labels || [], o = de(e._parsed[t].r, s.options.locale);\n        return {\n            label: n[t] || \"\",\n            value: o\n        };\n    }\n    parseObjectData(t, e, s, n) {\n        return Dn.bind(this)(t, e, s, n);\n    }\n    update(t) {\n        const e = this._cachedMeta.data;\n        this._updateRadius(), this.updateElements(e, 0, e.length, t);\n    }\n    getMinMax() {\n        const t = this._cachedMeta, e = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        return t.data.forEach((s, n)=>{\n            const o = this.getParsed(n).r;\n            !isNaN(o) && this.chart.getDataVisibility(n) && (o < e.min && (e.min = o), o > e.max && (e.max = o));\n        }), e;\n    }\n    _updateRadius() {\n        const t = this.chart, e = t.chartArea, s = t.options, n = Math.min(e.right - e.left, e.bottom - e.top), o = Math.max(n / 2, 0), r = Math.max(s.cutoutPercentage ? o / 100 * s.cutoutPercentage : 1, 0), a = (o - r) / t.getVisibleDatasetCount();\n        this.outerRadius = o - a * this.index, this.innerRadius = this.outerRadius - a;\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", r = this.chart, l = r.options.animation, c = this._cachedMeta.rScale, h = c.xCenter, d = c.yCenter, u = c.getIndexAngle(0) - 0.5 * B;\n        let f = u, g;\n        const p = 360 / this.countVisibleElements();\n        for(g = 0; g < e; ++g)f += this._computeAngle(g, n, p);\n        for(g = e; g < e + s; g++){\n            const m = t[g];\n            let b = f, x = f + this._computeAngle(g, n, p), v = r.getDataVisibility(g) ? c.getDistanceFromCenterForValue(this.getParsed(g).r) : 0;\n            f = x, o && (l.animateScale && (v = 0), l.animateRotate && (b = x = u));\n            const y = {\n                x: h,\n                y: d,\n                innerRadius: 0,\n                outerRadius: v,\n                startAngle: b,\n                endAngle: x,\n                options: this.resolveDataElementOptions(g, m.active ? \"active\" : n)\n            };\n            this.updateElement(m, g, y, n);\n        }\n    }\n    countVisibleElements() {\n        const t = this._cachedMeta;\n        let e = 0;\n        return t.data.forEach((s, n)=>{\n            !isNaN(this.getParsed(n).r) && this.chart.getDataVisibility(n) && e++;\n        }), e;\n    }\n    _computeAngle(t, e, s) {\n        return this.chart.getDataVisibility(t) ? nt(this.resolveDataElementOptions(t, e).angle || s) : 0;\n    }\n}\npe.id = \"polarArea\";\npe.defaults = {\n    dataElementType: \"arc\",\n    animation: {\n        animateRotate: !0,\n        animateScale: !0\n    },\n    animations: {\n        numbers: {\n            type: \"number\",\n            properties: [\n                \"x\",\n                \"y\",\n                \"startAngle\",\n                \"endAngle\",\n                \"innerRadius\",\n                \"outerRadius\"\n            ]\n        }\n    },\n    indexAxis: \"r\",\n    startAngle: 0\n};\npe.overrides = {\n    aspectRatio: 1,\n    plugins: {\n        legend: {\n            labels: {\n                generateLabels (i) {\n                    const t = i.data;\n                    if (t.labels.length && t.datasets.length) {\n                        const { labels: { pointStyle: e } } = i.legend.options;\n                        return t.labels.map((s, n)=>{\n                            const r = i.getDatasetMeta(0).controller.getStyle(n);\n                            return {\n                                text: s,\n                                fillStyle: r.backgroundColor,\n                                strokeStyle: r.borderColor,\n                                lineWidth: r.borderWidth,\n                                pointStyle: e,\n                                hidden: !i.getDataVisibility(n),\n                                index: n\n                            };\n                        });\n                    }\n                    return [];\n                }\n            },\n            onClick (i, t, e) {\n                e.chart.toggleDataVisibility(t.index), e.chart.update();\n            }\n        },\n        tooltip: {\n            callbacks: {\n                title () {\n                    return \"\";\n                },\n                label (i) {\n                    return i.chart.data.labels[i.dataIndex] + \": \" + i.formattedValue;\n                }\n            }\n        }\n    },\n    scales: {\n        r: {\n            type: \"radialLinear\",\n            angleLines: {\n                display: !1\n            },\n            beginAtZero: !0,\n            grid: {\n                circular: !0\n            },\n            pointLabels: {\n                display: !1\n            },\n            startAngle: 0\n        }\n    }\n};\nclass qe extends Lt {\n}\nqe.id = \"pie\";\nqe.defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: \"100%\"\n};\nclass me extends it {\n    getLabelAndValue(t) {\n        const e = this._cachedMeta.vScale, s = this.getParsed(t);\n        return {\n            label: e.getLabels()[t],\n            value: \"\" + e.getLabelForValue(s[e.axis])\n        };\n    }\n    parseObjectData(t, e, s, n) {\n        return Dn.bind(this)(t, e, s, n);\n    }\n    update(t) {\n        const e = this._cachedMeta, s = e.dataset, n = e.data || [], o = e.iScale.getLabels();\n        if (s.points = n, t !== \"resize\") {\n            const r = this.resolveDatasetElementOptions(t);\n            this.options.showLine || (r.borderWidth = 0);\n            const a = {\n                _loop: !0,\n                _fullLoop: o.length === n.length,\n                options: r\n            };\n            this.updateElement(s, void 0, a, t);\n        }\n        this.updateElements(n, 0, n.length, t);\n    }\n    updateElements(t, e, s, n) {\n        const o = this._cachedMeta.rScale, r = n === \"reset\";\n        for(let a = e; a < e + s; a++){\n            const l = t[a], c = this.resolveDataElementOptions(a, l.active ? \"active\" : n), h = o.getPointPositionForValue(a, this.getParsed(a).r), d = r ? o.xCenter : h.x, u = r ? o.yCenter : h.y, f = {\n                x: d,\n                y: u,\n                angle: h.angle,\n                skip: isNaN(d) || isNaN(u),\n                options: c\n            };\n            this.updateElement(l, a, f, n);\n        }\n    }\n}\nme.id = \"radar\";\nme.defaults = {\n    datasetElementType: \"line\",\n    dataElementType: \"point\",\n    indexAxis: \"r\",\n    showLine: !0,\n    elements: {\n        line: {\n            fill: \"start\"\n        }\n    }\n};\nme.overrides = {\n    aspectRatio: 1,\n    scales: {\n        r: {\n            type: \"radialLinear\"\n        }\n    }\n};\nclass st {\n    constructor(){\n        this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0;\n    }\n    tooltipPosition(t) {\n        const { x: e, y: s } = this.getProps([\n            \"x\",\n            \"y\"\n        ], t);\n        return {\n            x: e,\n            y: s\n        };\n    }\n    hasValue() {\n        return Bt(this.x) && Bt(this.y);\n    }\n    getProps(t, e) {\n        const s = this.$animations;\n        if (!e || !s) return this;\n        const n = {};\n        return t.forEach((o)=>{\n            n[o] = s[o] && s[o].active() ? s[o]._to : this[o];\n        }), n;\n    }\n}\nst.defaults = {};\nst.defaultRoutes = void 0;\nconst Vn = {\n    values (i) {\n        return z(i) ? i : \"\" + i;\n    },\n    numeric (i, t, e) {\n        if (i === 0) return \"0\";\n        const s = this.chart.options.locale;\n        let n, o = i;\n        if (e.length > 1) {\n            const c = Math.max(Math.abs(e[0].value), Math.abs(e[e.length - 1].value));\n            (c < 1e-4 || c > 1e15) && (n = \"scientific\"), o = wa(i, e);\n        }\n        const r = tt(Math.abs(o)), a = Math.max(Math.min(-1 * Math.floor(r), 20), 0), l = {\n            notation: n,\n            minimumFractionDigits: a,\n            maximumFractionDigits: a\n        };\n        return Object.assign(l, this.options.ticks.format), de(i, s, l);\n    },\n    logarithmic (i, t, e) {\n        if (i === 0) return \"0\";\n        const s = i / Math.pow(10, Math.floor(tt(i)));\n        return s === 1 || s === 2 || s === 5 ? Vn.numeric.call(this, i, t, e) : \"\";\n    }\n};\nfunction wa(i, t) {\n    let e = t.length > 3 ? t[2].value - t[1].value : t[1].value - t[0].value;\n    return Math.abs(e) >= 1 && i !== Math.floor(i) && (e = i - Math.floor(i)), e;\n}\nvar be = {\n    formatters: Vn\n};\nO.set(\"scale\", {\n    display: !0,\n    offset: !1,\n    reverse: !1,\n    beginAtZero: !1,\n    bounds: \"ticks\",\n    grace: 0,\n    grid: {\n        display: !0,\n        lineWidth: 1,\n        drawBorder: !0,\n        drawOnChartArea: !0,\n        drawTicks: !0,\n        tickLength: 8,\n        tickWidth: (i, t)=>t.lineWidth,\n        tickColor: (i, t)=>t.color,\n        offset: !1,\n        borderDash: [],\n        borderDashOffset: 0,\n        borderWidth: 1\n    },\n    title: {\n        display: !1,\n        text: \"\",\n        padding: {\n            top: 4,\n            bottom: 4\n        }\n    },\n    ticks: {\n        minRotation: 0,\n        maxRotation: 50,\n        mirror: !1,\n        textStrokeWidth: 0,\n        textStrokeColor: \"\",\n        padding: 3,\n        display: !0,\n        autoSkip: !0,\n        autoSkipPadding: 3,\n        labelOffset: 0,\n        callback: be.formatters.values,\n        minor: {},\n        major: {},\n        align: \"center\",\n        crossAlign: \"near\",\n        showLabelBackdrop: !1,\n        backdropColor: \"rgba(255, 255, 255, 0.75)\",\n        backdropPadding: 2\n    }\n});\nO.route(\"scale.ticks\", \"color\", \"\", \"color\");\nO.route(\"scale.grid\", \"color\", \"\", \"borderColor\");\nO.route(\"scale.grid\", \"borderColor\", \"\", \"borderColor\");\nO.route(\"scale.title\", \"color\", \"\", \"color\");\nO.describe(\"scale\", {\n    _fallback: !1,\n    _scriptable: (i)=>!i.startsWith(\"before\") && !i.startsWith(\"after\") && i !== \"callback\" && i !== \"parser\",\n    _indexable: (i)=>i !== \"borderDash\" && i !== \"tickBorderDash\"\n});\nO.describe(\"scales\", {\n    _fallback: \"scale\"\n});\nO.describe(\"scale.ticks\", {\n    _scriptable: (i)=>i !== \"backdropPadding\" && i !== \"callback\",\n    _indexable: (i)=>i !== \"backdropPadding\"\n});\nfunction Sa(i, t) {\n    const e = i.options.ticks, s = e.maxTicksLimit || Pa(i), n = e.major.enabled ? Da(t) : [], o = n.length, r = n[0], a = n[o - 1], l = [];\n    if (o > s) return Oa(t, l, n, o / s), l;\n    const c = Ca(n, t, s);\n    if (o > 0) {\n        let h, d;\n        const u = o > 1 ? Math.round((a - r) / (o - 1)) : null;\n        for(Oe(t, l, c, T(u) ? 0 : r - u, r), h = 0, d = o - 1; h < d; h++)Oe(t, l, c, n[h], n[h + 1]);\n        return Oe(t, l, c, a, T(u) ? t.length : a + u), l;\n    }\n    return Oe(t, l, c), l;\n}\nfunction Pa(i) {\n    const t = i.options.offset, e = i._tickSize(), s = i._length / e + (t ? 0 : 1), n = i._maxLength / e;\n    return Math.floor(Math.min(s, n));\n}\nfunction Ca(i, t, e) {\n    const s = Aa(i), n = t.length / e;\n    if (!s) return Math.max(n, 1);\n    const o = Do(s);\n    for(let r = 0, a = o.length - 1; r < a; r++){\n        const l = o[r];\n        if (l > n) return l;\n    }\n    return Math.max(n, 1);\n}\nfunction Da(i) {\n    const t = [];\n    let e, s;\n    for(e = 0, s = i.length; e < s; e++)i[e].major && t.push(e);\n    return t;\n}\nfunction Oa(i, t, e, s) {\n    let n = 0, o = e[0], r;\n    for(s = Math.ceil(s), r = 0; r < i.length; r++)r === o && (t.push(i[r]), n++, o = e[n * s]);\n}\nfunction Oe(i, t, e, s, n) {\n    const o = C(s, 0), r = Math.min(C(n, i.length), i.length);\n    let a = 0, l, c, h;\n    for(e = Math.ceil(e), n && (l = n - s, e = l / Math.floor(l / e)), h = o; h < 0;)a++, h = Math.round(o + a * e);\n    for(c = Math.max(o, 0); c < r; c++)c === h && (t.push(i[c]), a++, h = Math.round(o + a * e));\n}\nfunction Aa(i) {\n    const t = i.length;\n    let e, s;\n    if (t < 2) return !1;\n    for(s = i[0], e = 1; e < t; ++e)if (i[e] - i[e - 1] !== s) return !1;\n    return s;\n}\nconst Ta = (i)=>i === \"left\" ? \"right\" : i === \"right\" ? \"left\" : i, ws = (i, t, e)=>t === \"top\" || t === \"left\" ? i[t] + e : i[t] - e;\nfunction Ss(i, t) {\n    const e = [], s = i.length / t, n = i.length;\n    let o = 0;\n    for(; o < n; o += s)e.push(i[Math.floor(o)]);\n    return e;\n}\nfunction La(i, t, e) {\n    const s = i.ticks.length, n = Math.min(t, s - 1), o = i._startPixel, r = i._endPixel, a = 1e-6;\n    let l = i.getPixelForTick(n), c;\n    if (!(e && (s === 1 ? c = Math.max(l - o, r - l) : t === 0 ? c = (i.getPixelForTick(1) - l) / 2 : c = (l - i.getPixelForTick(n - 1)) / 2, l += n < t ? c : -c, l < o - a || l > r + a))) return l;\n}\nfunction Ra(i, t) {\n    E(i, (e)=>{\n        const s = e.gc, n = s.length / 2;\n        let o;\n        if (n > t) {\n            for(o = 0; o < n; ++o)delete e.data[s[o]];\n            s.splice(0, n);\n        }\n    });\n}\nfunction Xt(i) {\n    return i.drawTicks ? i.tickLength : 0;\n}\nfunction Ps(i, t) {\n    if (!i.display) return 0;\n    const e = $(i.font, t), s = K(i.padding);\n    return (z(i.text) ? i.text.length : 1) * e.lineHeight + s.height;\n}\nfunction Ea(i, t) {\n    return vt(i, {\n        scale: t,\n        type: \"scale\"\n    });\n}\nfunction Fa(i, t, e) {\n    return vt(i, {\n        tick: e,\n        index: t,\n        type: \"tick\"\n    });\n}\nfunction Ia(i, t, e) {\n    let s = Li(i);\n    return (e && t !== \"right\" || !e && t === \"right\") && (s = Ta(s)), s;\n}\nfunction za(i, t, e, s) {\n    const { top: n, left: o, bottom: r, right: a, chart: l } = i, { chartArea: c, scales: h } = l;\n    let d = 0, u, f, g;\n    const p = r - n, m = a - o;\n    if (i.isHorizontal()) {\n        if (f = U(s, o, a), D(e)) {\n            const b = Object.keys(e)[0], x = e[b];\n            g = h[b].getPixelForValue(x) + p - t;\n        } else e === \"center\" ? g = (c.bottom + c.top) / 2 + p - t : g = ws(i, e, t);\n        u = a - o;\n    } else {\n        if (D(e)) {\n            const b = Object.keys(e)[0], x = e[b];\n            f = h[b].getPixelForValue(x) - m + t;\n        } else e === \"center\" ? f = (c.left + c.right) / 2 - m + t : f = ws(i, e, t);\n        g = U(s, r, n), d = e === \"left\" ? -V : V;\n    }\n    return {\n        titleX: f,\n        titleY: g,\n        maxWidth: u,\n        rotation: d\n    };\n}\nclass Mt extends st {\n    constructor(t){\n        super(), this.id = t.id, this.type = t.type, this.options = void 0, this.ctx = t.ctx, this.chart = t.chart, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, this.maxWidth = void 0, this.maxHeight = void 0, this.paddingTop = void 0, this.paddingBottom = void 0, this.paddingLeft = void 0, this.paddingRight = void 0, this.axis = void 0, this.labelRotation = void 0, this.min = void 0, this.max = void 0, this._range = void 0, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = void 0, this._endPixel = void 0, this._reversePixels = !1, this._userMax = void 0, this._userMin = void 0, this._suggestedMax = void 0, this._suggestedMin = void 0, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = !1, this.$context = void 0;\n    }\n    init(t) {\n        this.options = t.setContext(this.getContext()), this.axis = t.axis, this._userMin = this.parse(t.min), this._userMax = this.parse(t.max), this._suggestedMin = this.parse(t.suggestedMin), this._suggestedMax = this.parse(t.suggestedMax);\n    }\n    parse(t, e) {\n        return t;\n    }\n    getUserBounds() {\n        let { _userMin: t, _userMax: e, _suggestedMin: s, _suggestedMax: n } = this;\n        return t = Q(t, Number.POSITIVE_INFINITY), e = Q(e, Number.NEGATIVE_INFINITY), s = Q(s, Number.POSITIVE_INFINITY), n = Q(n, Number.NEGATIVE_INFINITY), {\n            min: Q(t, s),\n            max: Q(e, n),\n            minDefined: N(t),\n            maxDefined: N(e)\n        };\n    }\n    getMinMax(t) {\n        let { min: e, max: s, minDefined: n, maxDefined: o } = this.getUserBounds(), r;\n        if (n && o) return {\n            min: e,\n            max: s\n        };\n        const a = this.getMatchingVisibleMetas();\n        for(let l = 0, c = a.length; l < c; ++l)r = a[l].controller.getMinMax(this, t), n || (e = Math.min(e, r.min)), o || (s = Math.max(s, r.max));\n        return e = o && e > s ? s : e, s = n && e > s ? e : s, {\n            min: Q(e, Q(s, e)),\n            max: Q(s, Q(e, s))\n        };\n    }\n    getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n    getTicks() {\n        return this.ticks;\n    }\n    getLabels() {\n        const t = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];\n    }\n    beforeLayout() {\n        this._cache = {}, this._dataLimitsCached = !1;\n    }\n    beforeUpdate() {\n        I(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n    update(t, e, s) {\n        const { beginAtZero: n, grace: o, ticks: r } = this.options, a = r.sampleSize;\n        this.beforeUpdate(), this.maxWidth = t, this.maxHeight = e, this._margins = s = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, s), this.ticks = null, this._labelSizes = null, this._gridLineItems = null, this._labelItems = null, this.beforeSetDimensions(), this.setDimensions(), this.afterSetDimensions(), this._maxLength = this.isHorizontal() ? this.width + s.left + s.right : this.height + s.top + s.bottom, this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), this._range = mr(this, o, n), this._dataLimitsCached = !0), this.beforeBuildTicks(), this.ticks = this.buildTicks() || [], this.afterBuildTicks();\n        const l = a < this.ticks.length;\n        this._convertTicksToLabels(l ? Ss(this.ticks, a) : this.ticks), this.configure(), this.beforeCalculateLabelRotation(), this.calculateLabelRotation(), this.afterCalculateLabelRotation(), r.display && (r.autoSkip || r.source === \"auto\") && (this.ticks = Sa(this, this.ticks), this._labelSizes = null, this.afterAutoSkip()), l && this._convertTicksToLabels(this.ticks), this.beforeFit(), this.fit(), this.afterFit(), this.afterUpdate();\n    }\n    configure() {\n        let t = this.options.reverse, e, s;\n        this.isHorizontal() ? (e = this.left, s = this.right) : (e = this.top, s = this.bottom, t = !t), this._startPixel = e, this._endPixel = s, this._reversePixels = t, this._length = s - e, this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        I(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        I(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        I(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(t) {\n        this.chart.notifyPlugins(t, this.getContext()), I(this.options[t], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks(\"beforeDataLimits\");\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks(\"afterDataLimits\");\n    }\n    beforeBuildTicks() {\n        this._callHooks(\"beforeBuildTicks\");\n    }\n    buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks(\"afterBuildTicks\");\n    }\n    beforeTickToLabelConversion() {\n        I(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n    generateTickLabels(t) {\n        const e = this.options.ticks;\n        let s, n, o;\n        for(s = 0, n = t.length; s < n; s++)o = t[s], o.label = I(e.callback, [\n            o.value,\n            s,\n            t\n        ], this);\n    }\n    afterTickToLabelConversion() {\n        I(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        I(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const t = this.options, e = t.ticks, s = this.ticks.length, n = e.minRotation || 0, o = e.maxRotation;\n        let r = n, a, l, c;\n        if (!this._isVisible() || !e.display || n >= o || s <= 1 || !this.isHorizontal()) {\n            this.labelRotation = n;\n            return;\n        }\n        const h = this._getLabelSizes(), d = h.widest.width, u = h.highest.height, f = Y(this.chart.width - d, 0, this.maxWidth);\n        a = t.offset ? this.maxWidth / s : f / (s - 1), d + 6 > a && (a = f / (s - (t.offset ? 0.5 : 1)), l = this.maxHeight - Xt(t.grid) - e.padding - Ps(t.title, this.chart.options.font), c = Math.sqrt(d * d + u * u), r = Ai(Math.min(Math.asin(Y((h.highest.height + 6) / a, -1, 1)), Math.asin(Y(l / c, -1, 1)) - Math.asin(Y(u / c, -1, 1)))), r = Math.max(n, Math.min(o, r))), this.labelRotation = r;\n    }\n    afterCalculateLabelRotation() {\n        I(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        I(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const t = {\n            width: 0,\n            height: 0\n        }, { chart: e, options: { ticks: s, title: n, grid: o } } = this, r = this._isVisible(), a = this.isHorizontal();\n        if (r) {\n            const l = Ps(n, e.options.font);\n            if (a ? (t.width = this.maxWidth, t.height = Xt(o) + l) : (t.height = this.maxHeight, t.width = Xt(o) + l), s.display && this.ticks.length) {\n                const { first: c, last: h, widest: d, highest: u } = this._getLabelSizes(), f = s.padding * 2, g = nt(this.labelRotation), p = Math.cos(g), m = Math.sin(g);\n                if (a) {\n                    const b = s.mirror ? 0 : m * d.width + p * u.height;\n                    t.height = Math.min(this.maxHeight, t.height + b + f);\n                } else {\n                    const b = s.mirror ? 0 : p * d.width + m * u.height;\n                    t.width = Math.min(this.maxWidth, t.width + b + f);\n                }\n                this._calculatePadding(c, h, m, p);\n            }\n        }\n        this._handleMargins(), a ? (this.width = this._length = e.width - this._margins.left - this._margins.right, this.height = t.height) : (this.width = t.width, this.height = this._length = e.height - this._margins.top - this._margins.bottom);\n    }\n    _calculatePadding(t, e, s, n) {\n        const { ticks: { align: o, padding: r }, position: a } = this.options, l = this.labelRotation !== 0, c = a !== \"top\" && this.axis === \"x\";\n        if (this.isHorizontal()) {\n            const h = this.getPixelForTick(0) - this.left, d = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let u = 0, f = 0;\n            l ? c ? (u = n * t.width, f = s * e.height) : (u = s * t.height, f = n * e.width) : o === \"start\" ? f = e.width : o === \"end\" ? u = t.width : o !== \"inner\" && (u = t.width / 2, f = e.width / 2), this.paddingLeft = Math.max((u - h + r) * this.width / (this.width - h), 0), this.paddingRight = Math.max((f - d + r) * this.width / (this.width - d), 0);\n        } else {\n            let h = e.height / 2, d = t.height / 2;\n            o === \"start\" ? (h = 0, d = t.height) : o === \"end\" && (h = e.height, d = 0), this.paddingTop = h + r, this.paddingBottom = d + r;\n        }\n    }\n    _handleMargins() {\n        this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));\n    }\n    afterFit() {\n        I(this.options.afterFit, [\n            this\n        ]);\n    }\n    isHorizontal() {\n        const { axis: t, position: e } = this.options;\n        return e === \"top\" || e === \"bottom\" || t === \"x\";\n    }\n    isFullSize() {\n        return this.options.fullSize;\n    }\n    _convertTicksToLabels(t) {\n        this.beforeTickToLabelConversion(), this.generateTickLabels(t);\n        let e, s;\n        for(e = 0, s = t.length; e < s; e++)T(t[e].label) && (t.splice(e, 1), s--, e--);\n        this.afterTickToLabelConversion();\n    }\n    _getLabelSizes() {\n        let t = this._labelSizes;\n        if (!t) {\n            const e = this.options.ticks.sampleSize;\n            let s = this.ticks;\n            e < s.length && (s = Ss(s, e)), this._labelSizes = t = this._computeLabelSizes(s, s.length);\n        }\n        return t;\n    }\n    _computeLabelSizes(t, e) {\n        const { ctx: s, _longestTextCache: n } = this, o = [], r = [];\n        let a = 0, l = 0, c, h, d, u, f, g, p, m, b, x, v;\n        for(c = 0; c < e; ++c){\n            if (u = t[c].label, f = this._resolveTickFontOptions(c), s.font = g = f.string, p = n[g] = n[g] || {\n                data: {},\n                gc: []\n            }, m = f.lineHeight, b = x = 0, !T(u) && !z(u)) b = Ne(s, p.data, p.gc, b, u), x = m;\n            else if (z(u)) for(h = 0, d = u.length; h < d; ++h)v = u[h], !T(v) && !z(v) && (b = Ne(s, p.data, p.gc, b, v), x += m);\n            o.push(b), r.push(x), a = Math.max(b, a), l = Math.max(x, l);\n        }\n        Ra(n, e);\n        const y = o.indexOf(a), _ = r.indexOf(l), M = (k)=>({\n                width: o[k] || 0,\n                height: r[k] || 0\n            });\n        return {\n            first: M(0),\n            last: M(e - 1),\n            widest: M(y),\n            highest: M(_),\n            widths: o,\n            heights: r\n        };\n    }\n    getLabelForValue(t) {\n        return t;\n    }\n    getPixelForValue(t, e) {\n        return NaN;\n    }\n    getValueForPixel(t) {}\n    getPixelForTick(t) {\n        const e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n    }\n    getPixelForDecimal(t) {\n        this._reversePixels && (t = 1 - t);\n        const e = this._startPixel + t * this._length;\n        return To(this._alignToPixels ? wt(this.chart, e, 0) : e);\n    }\n    getDecimalForPixel(t) {\n        const e = (t - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - e : e;\n    }\n    getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n    getBaseValue() {\n        const { min: t, max: e } = this;\n        return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;\n    }\n    getContext(t) {\n        const e = this.ticks || [];\n        if (t >= 0 && t < e.length) {\n            const s = e[t];\n            return s.$context || (s.$context = Fa(this.getContext(), t, s));\n        }\n        return this.$context || (this.$context = Ea(this.chart.getContext(), this));\n    }\n    _tickSize() {\n        const t = this.options.ticks, e = nt(this.labelRotation), s = Math.abs(Math.cos(e)), n = Math.abs(Math.sin(e)), o = this._getLabelSizes(), r = t.autoSkipPadding || 0, a = o ? o.widest.width + r : 0, l = o ? o.highest.height + r : 0;\n        return this.isHorizontal() ? l * s > a * n ? a / s : l / n : l * n < a * s ? l / s : a / n;\n    }\n    _isVisible() {\n        const t = this.options.display;\n        return t !== \"auto\" ? !!t : this.getMatchingVisibleMetas().length > 0;\n    }\n    _computeGridLineItems(t) {\n        const e = this.axis, s = this.chart, n = this.options, { grid: o, position: r } = n, a = o.offset, l = this.isHorizontal(), h = this.ticks.length + (a ? 1 : 0), d = Xt(o), u = [], f = o.setContext(this.getContext()), g = f.drawBorder ? f.borderWidth : 0, p = g / 2, m = function(P) {\n            return wt(s, P, g);\n        };\n        let b, x, v, y, _, M, k, S, w, L, R, A;\n        if (r === \"top\") b = m(this.bottom), M = this.bottom - d, S = b - p, L = m(t.top) + p, A = t.bottom;\n        else if (r === \"bottom\") b = m(this.top), L = t.top, A = m(t.bottom) - p, M = b + p, S = this.top + d;\n        else if (r === \"left\") b = m(this.right), _ = this.right - d, k = b - p, w = m(t.left) + p, R = t.right;\n        else if (r === \"right\") b = m(this.left), w = t.left, R = m(t.right) - p, _ = b + p, k = this.left + d;\n        else if (e === \"x\") {\n            if (r === \"center\") b = m((t.top + t.bottom) / 2 + 0.5);\n            else if (D(r)) {\n                const P = Object.keys(r)[0], j = r[P];\n                b = m(this.chart.scales[P].getPixelForValue(j));\n            }\n            L = t.top, A = t.bottom, M = b + p, S = M + d;\n        } else if (e === \"y\") {\n            if (r === \"center\") b = m((t.left + t.right) / 2);\n            else if (D(r)) {\n                const P = Object.keys(r)[0], j = r[P];\n                b = m(this.chart.scales[P].getPixelForValue(j));\n            }\n            _ = b - p, k = _ - d, w = t.left, R = t.right;\n        }\n        const H = C(n.ticks.maxTicksLimit, h), q = Math.max(1, Math.ceil(h / H));\n        for(x = 0; x < h; x += q){\n            const P = o.setContext(this.getContext(x)), j = P.lineWidth, W = P.color, kt = P.borderDash || [], ti = P.borderDashOffset, Rt = P.tickWidth, ke = P.tickColor, Et = P.tickBorderDash || [], jt = P.tickBorderDashOffset;\n            v = La(this, x, a), v !== void 0 && (y = wt(s, v, j), l ? _ = k = w = R = y : M = S = L = A = y, u.push({\n                tx1: _,\n                ty1: M,\n                tx2: k,\n                ty2: S,\n                x1: w,\n                y1: L,\n                x2: R,\n                y2: A,\n                width: j,\n                color: W,\n                borderDash: kt,\n                borderDashOffset: ti,\n                tickWidth: Rt,\n                tickColor: ke,\n                tickBorderDash: Et,\n                tickBorderDashOffset: jt\n            }));\n        }\n        return this._ticksLength = h, this._borderValue = b, u;\n    }\n    _computeLabelItems(t) {\n        const e = this.axis, s = this.options, { position: n, ticks: o } = s, r = this.isHorizontal(), a = this.ticks, { align: l, crossAlign: c, padding: h, mirror: d } = o, u = Xt(s.grid), f = u + h, g = d ? -h : f, p = -nt(this.labelRotation), m = [];\n        let b, x, v, y, _, M, k, S, w, L, R, A, H = \"middle\";\n        if (n === \"top\") M = this.bottom - g, k = this._getXAxisLabelAlignment();\n        else if (n === \"bottom\") M = this.top + g, k = this._getXAxisLabelAlignment();\n        else if (n === \"left\") {\n            const P = this._getYAxisLabelAlignment(u);\n            k = P.textAlign, _ = P.x;\n        } else if (n === \"right\") {\n            const P = this._getYAxisLabelAlignment(u);\n            k = P.textAlign, _ = P.x;\n        } else if (e === \"x\") {\n            if (n === \"center\") M = (t.top + t.bottom) / 2 + f;\n            else if (D(n)) {\n                const P = Object.keys(n)[0], j = n[P];\n                M = this.chart.scales[P].getPixelForValue(j) + f;\n            }\n            k = this._getXAxisLabelAlignment();\n        } else if (e === \"y\") {\n            if (n === \"center\") _ = (t.left + t.right) / 2 - f;\n            else if (D(n)) {\n                const P = Object.keys(n)[0], j = n[P];\n                _ = this.chart.scales[P].getPixelForValue(j);\n            }\n            k = this._getYAxisLabelAlignment(u).textAlign;\n        }\n        e === \"y\" && (l === \"start\" ? H = \"top\" : l === \"end\" && (H = \"bottom\"));\n        const q = this._getLabelSizes();\n        for(b = 0, x = a.length; b < x; ++b){\n            v = a[b], y = v.label;\n            const P = o.setContext(this.getContext(b));\n            S = this.getPixelForTick(b) + o.labelOffset, w = this._resolveTickFontOptions(b), L = w.lineHeight, R = z(y) ? y.length : 1;\n            const j = R / 2, W = P.color, kt = P.textStrokeColor, ti = P.textStrokeWidth;\n            let Rt = k;\n            r ? (_ = S, k === \"inner\" && (b === x - 1 ? Rt = this.options.reverse ? \"left\" : \"right\" : b === 0 ? Rt = this.options.reverse ? \"right\" : \"left\" : Rt = \"center\"), n === \"top\" ? c === \"near\" || p !== 0 ? A = -R * L + L / 2 : c === \"center\" ? A = -q.highest.height / 2 - j * L + L : A = -q.highest.height + L / 2 : c === \"near\" || p !== 0 ? A = L / 2 : c === \"center\" ? A = q.highest.height / 2 - j * L : A = q.highest.height - R * L, d && (A *= -1)) : (M = S, A = (1 - R) * L / 2);\n            let ke;\n            if (P.showLabelBackdrop) {\n                const Et = K(P.backdropPadding), jt = q.heights[b], ei = q.widths[b];\n                let ii = M + A - Et.top, si = _ - Et.left;\n                switch(H){\n                    case \"middle\":\n                        ii -= jt / 2;\n                        break;\n                    case \"bottom\":\n                        ii -= jt;\n                        break;\n                }\n                switch(k){\n                    case \"center\":\n                        si -= ei / 2;\n                        break;\n                    case \"right\":\n                        si -= ei;\n                        break;\n                }\n                ke = {\n                    left: si,\n                    top: ii,\n                    width: ei + Et.width,\n                    height: jt + Et.height,\n                    color: P.backdropColor\n                };\n            }\n            m.push({\n                rotation: p,\n                label: y,\n                font: w,\n                color: W,\n                strokeColor: kt,\n                strokeWidth: ti,\n                textOffset: A,\n                textAlign: Rt,\n                textBaseline: H,\n                translation: [\n                    _,\n                    M\n                ],\n                backdrop: ke\n            });\n        }\n        return m;\n    }\n    _getXAxisLabelAlignment() {\n        const { position: t, ticks: e } = this.options;\n        if (-nt(this.labelRotation)) return t === \"top\" ? \"left\" : \"right\";\n        let n = \"center\";\n        return e.align === \"start\" ? n = \"left\" : e.align === \"end\" ? n = \"right\" : e.align === \"inner\" && (n = \"inner\"), n;\n    }\n    _getYAxisLabelAlignment(t) {\n        const { position: e, ticks: { crossAlign: s, mirror: n, padding: o } } = this.options, r = this._getLabelSizes(), a = t + o, l = r.widest.width;\n        let c, h;\n        return e === \"left\" ? n ? (h = this.right + o, s === \"near\" ? c = \"left\" : s === \"center\" ? (c = \"center\", h += l / 2) : (c = \"right\", h += l)) : (h = this.right - a, s === \"near\" ? c = \"right\" : s === \"center\" ? (c = \"center\", h -= l / 2) : (c = \"left\", h = this.left)) : e === \"right\" ? n ? (h = this.left + o, s === \"near\" ? c = \"right\" : s === \"center\" ? (c = \"center\", h -= l / 2) : (c = \"left\", h -= l)) : (h = this.left + a, s === \"near\" ? c = \"left\" : s === \"center\" ? (c = \"center\", h += l / 2) : (c = \"right\", h = this.right)) : c = \"right\", {\n            textAlign: c,\n            x: h\n        };\n    }\n    _computeLabelArea() {\n        if (this.options.ticks.mirror) return;\n        const t = this.chart, e = this.options.position;\n        if (e === \"left\" || e === \"right\") return {\n            top: 0,\n            left: this.left,\n            bottom: t.height,\n            right: this.right\n        };\n        if (e === \"top\" || e === \"bottom\") return {\n            top: this.top,\n            left: 0,\n            bottom: this.bottom,\n            right: t.width\n        };\n    }\n    drawBackground() {\n        const { ctx: t, options: { backgroundColor: e }, left: s, top: n, width: o, height: r } = this;\n        e && (t.save(), t.fillStyle = e, t.fillRect(s, n, o, r), t.restore());\n    }\n    getLineWidthForValue(t) {\n        const e = this.options.grid;\n        if (!this._isVisible() || !e.display) return 0;\n        const n = this.ticks.findIndex((o)=>o.value === t);\n        return n >= 0 ? e.setContext(this.getContext(n)).lineWidth : 0;\n    }\n    drawGrid(t) {\n        const e = this.options.grid, s = this.ctx, n = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(t));\n        let o, r;\n        const a = (l, c, h)=>{\n            !h.width || !h.color || (s.save(), s.lineWidth = h.width, s.strokeStyle = h.color, s.setLineDash(h.borderDash || []), s.lineDashOffset = h.borderDashOffset, s.beginPath(), s.moveTo(l.x, l.y), s.lineTo(c.x, c.y), s.stroke(), s.restore());\n        };\n        if (e.display) for(o = 0, r = n.length; o < r; ++o){\n            const l = n[o];\n            e.drawOnChartArea && a({\n                x: l.x1,\n                y: l.y1\n            }, {\n                x: l.x2,\n                y: l.y2\n            }, l), e.drawTicks && a({\n                x: l.tx1,\n                y: l.ty1\n            }, {\n                x: l.tx2,\n                y: l.ty2\n            }, {\n                color: l.tickColor,\n                width: l.tickWidth,\n                borderDash: l.tickBorderDash,\n                borderDashOffset: l.tickBorderDashOffset\n            });\n        }\n    }\n    drawBorder() {\n        const { chart: t, ctx: e, options: { grid: s } } = this, n = s.setContext(this.getContext()), o = s.drawBorder ? n.borderWidth : 0;\n        if (!o) return;\n        const r = s.setContext(this.getContext(0)).lineWidth, a = this._borderValue;\n        let l, c, h, d;\n        this.isHorizontal() ? (l = wt(t, this.left, o) - o / 2, c = wt(t, this.right, r) + r / 2, h = d = a) : (h = wt(t, this.top, o) - o / 2, d = wt(t, this.bottom, r) + r / 2, l = c = a), e.save(), e.lineWidth = n.borderWidth, e.strokeStyle = n.borderColor, e.beginPath(), e.moveTo(l, h), e.lineTo(c, d), e.stroke(), e.restore();\n    }\n    drawLabels(t) {\n        if (!this.options.ticks.display) return;\n        const s = this.ctx, n = this._computeLabelArea();\n        n && Xe(s, n);\n        const o = this._labelItems || (this._labelItems = this._computeLabelItems(t));\n        let r, a;\n        for(r = 0, a = o.length; r < a; ++r){\n            const l = o[r], c = l.font, h = l.label;\n            l.backdrop && (s.fillStyle = l.backdrop.color, s.fillRect(l.backdrop.left, l.backdrop.top, l.backdrop.width, l.backdrop.height));\n            let d = l.textOffset;\n            Tt(s, h, 0, d, c, l);\n        }\n        n && Ue(s);\n    }\n    drawTitle() {\n        const { ctx: t, options: { position: e, title: s, reverse: n } } = this;\n        if (!s.display) return;\n        const o = $(s.font), r = K(s.padding), a = s.align;\n        let l = o.lineHeight / 2;\n        e === \"bottom\" || e === \"center\" || D(e) ? (l += r.bottom, z(s.text) && (l += o.lineHeight * (s.text.length - 1))) : l += r.top;\n        const { titleX: c, titleY: h, maxWidth: d, rotation: u } = za(this, l, e, a);\n        Tt(t, s.text, 0, 0, o, {\n            color: s.color,\n            maxWidth: d,\n            rotation: u,\n            textAlign: Ia(a, e, n),\n            textBaseline: \"middle\",\n            translation: [\n                c,\n                h\n            ]\n        });\n    }\n    draw(t) {\n        this._isVisible() && (this.drawBackground(), this.drawGrid(t), this.drawBorder(), this.drawTitle(), this.drawLabels(t));\n    }\n    _layers() {\n        const t = this.options, e = t.ticks && t.ticks.z || 0, s = C(t.grid && t.grid.z, -1);\n        return !this._isVisible() || this.draw !== Mt.prototype.draw ? [\n            {\n                z: e,\n                draw: (n)=>{\n                    this.draw(n);\n                }\n            }\n        ] : [\n            {\n                z: s,\n                draw: (n)=>{\n                    this.drawBackground(), this.drawGrid(n), this.drawTitle();\n                }\n            },\n            {\n                z: s + 1,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: e,\n                draw: (n)=>{\n                    this.drawLabels(n);\n                }\n            }\n        ];\n    }\n    getMatchingVisibleMetas(t) {\n        const e = this.chart.getSortedVisibleDatasetMetas(), s = this.axis + \"AxisID\", n = [];\n        let o, r;\n        for(o = 0, r = e.length; o < r; ++o){\n            const a = e[o];\n            a[s] === this.id && (!t || a.type === t) && n.push(a);\n        }\n        return n;\n    }\n    _resolveTickFontOptions(t) {\n        const e = this.options.ticks.setContext(this.getContext(t));\n        return $(e.font);\n    }\n    _maxDigits() {\n        const t = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / t;\n    }\n}\nclass Ae {\n    constructor(t, e, s){\n        this.type = t, this.scope = e, this.override = s, this.items = /* @__PURE__ */ Object.create(null);\n    }\n    isForType(t) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);\n    }\n    register(t) {\n        const e = Object.getPrototypeOf(t);\n        let s;\n        Wa(e) && (s = this.register(e));\n        const n = this.items, o = t.id, r = this.scope + \".\" + o;\n        if (!o) throw new Error(\"class does not have id: \" + t);\n        return o in n || (n[o] = t, Ba(t, r, s), this.override && O.override(t.id, t.overrides)), r;\n    }\n    get(t) {\n        return this.items[t];\n    }\n    unregister(t) {\n        const e = this.items, s = t.id, n = this.scope;\n        s in e && delete e[s], n && s in O[n] && (delete O[n][s], this.override && delete At[s]);\n    }\n}\nfunction Ba(i, t, e) {\n    const s = ne(/* @__PURE__ */ Object.create(null), [\n        e ? O.get(e) : {},\n        O.get(t),\n        i.defaults\n    ]);\n    O.set(t, s), i.defaultRoutes && Va(t, i.defaultRoutes), i.descriptors && O.describe(t, i.descriptors);\n}\nfunction Va(i, t) {\n    Object.keys(t).forEach((e)=>{\n        const s = e.split(\".\"), n = s.pop(), o = [\n            i\n        ].concat(s).join(\".\"), r = t[e].split(\".\"), a = r.pop(), l = r.join(\".\");\n        O.route(o, n, l, a);\n    });\n}\nfunction Wa(i) {\n    return \"id\" in i && \"defaults\" in i;\n}\nclass Na {\n    constructor(){\n        this.controllers = new Ae(it, \"datasets\", !0), this.elements = new Ae(st, \"elements\"), this.plugins = new Ae(Object, \"plugins\"), this.scales = new Ae(Mt, \"scales\"), this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n    add(...t) {\n        this._each(\"register\", t);\n    }\n    remove(...t) {\n        this._each(\"unregister\", t);\n    }\n    addControllers(...t) {\n        this._each(\"register\", t, this.controllers);\n    }\n    addElements(...t) {\n        this._each(\"register\", t, this.elements);\n    }\n    addPlugins(...t) {\n        this._each(\"register\", t, this.plugins);\n    }\n    addScales(...t) {\n        this._each(\"register\", t, this.scales);\n    }\n    getController(t) {\n        return this._get(t, this.controllers, \"controller\");\n    }\n    getElement(t) {\n        return this._get(t, this.elements, \"element\");\n    }\n    getPlugin(t) {\n        return this._get(t, this.plugins, \"plugin\");\n    }\n    getScale(t) {\n        return this._get(t, this.scales, \"scale\");\n    }\n    removeControllers(...t) {\n        this._each(\"unregister\", t, this.controllers);\n    }\n    removeElements(...t) {\n        this._each(\"unregister\", t, this.elements);\n    }\n    removePlugins(...t) {\n        this._each(\"unregister\", t, this.plugins);\n    }\n    removeScales(...t) {\n        this._each(\"unregister\", t, this.scales);\n    }\n    _each(t, e, s) {\n        [\n            ...e\n        ].forEach((n)=>{\n            const o = s || this._getRegistryForType(n);\n            s || o.isForType(n) || o === this.plugins && n.id ? this._exec(t, o, n) : E(n, (r)=>{\n                const a = s || this._getRegistryForType(r);\n                this._exec(t, a, r);\n            });\n        });\n    }\n    _exec(t, e, s) {\n        const n = Oi(t);\n        I(s[\"before\" + n], [], s), e[t](s), I(s[\"after\" + n], [], s);\n    }\n    _getRegistryForType(t) {\n        for(let e = 0; e < this._typedRegistries.length; e++){\n            const s = this._typedRegistries[e];\n            if (s.isForType(t)) return s;\n        }\n        return this.plugins;\n    }\n    _get(t, e, s) {\n        const n = e.get(t);\n        if (n === void 0) throw new Error('\"' + t + '\" is not a registered ' + s + \".\");\n        return n;\n    }\n}\nvar ot = new Na();\nclass xe extends it {\n    update(t) {\n        const e = this._cachedMeta, { data: s = [] } = e, n = this.chart._animationsDisabled;\n        let { start: o, count: r } = pn(e, s, n);\n        if (this._drawStart = o, this._drawCount = r, mn(e) && (o = 0, r = s.length), this.options.showLine) {\n            const { dataset: a, _dataset: l } = e;\n            a._chart = this.chart, a._datasetIndex = this.index, a._decimated = !!l._decimated, a.points = s;\n            const c = this.resolveDatasetElementOptions(t);\n            c.segment = this.options.segment, this.updateElement(a, void 0, {\n                animated: !n,\n                options: c\n            }, t);\n        }\n        this.updateElements(s, o, r, t);\n    }\n    addElements() {\n        const { showLine: t } = this.options;\n        !this.datasetElementType && t && (this.datasetElementType = ot.getElement(\"line\")), super.addElements();\n    }\n    updateElements(t, e, s, n) {\n        const o = n === \"reset\", { iScale: r, vScale: a, _stacked: l, _dataset: c } = this._cachedMeta, h = this.resolveDataElementOptions(e, n), d = this.getSharedOptions(h), u = this.includeOptions(n, d), f = r.axis, g = a.axis, { spanGaps: p, segment: m } = this.options, b = Bt(p) ? p : Number.POSITIVE_INFINITY, x = this.chart._animationsDisabled || o || n === \"none\";\n        let v = e > 0 && this.getParsed(e - 1);\n        for(let y = e; y < e + s; ++y){\n            const _ = t[y], M = this.getParsed(y), k = x ? _ : {}, S = T(M[g]), w = k[f] = r.getPixelForValue(M[f], y), L = k[g] = o || S ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, M, l) : M[g], y);\n            k.skip = isNaN(w) || isNaN(L) || S, k.stop = y > 0 && Math.abs(M[f] - v[f]) > b, m && (k.parsed = M, k.raw = c.data[y]), u && (k.options = d || this.resolveDataElementOptions(y, _.active ? \"active\" : n)), x || this.updateElement(_, y, k, n), v = M;\n        }\n        this.updateSharedOptions(d, n, h);\n    }\n    getMaxOverflow() {\n        const t = this._cachedMeta, e = t.data || [];\n        if (!this.options.showLine) {\n            let a = 0;\n            for(let l = e.length - 1; l >= 0; --l)a = Math.max(a, e[l].size(this.resolveDataElementOptions(l)) / 2);\n            return a > 0 && a;\n        }\n        const s = t.dataset, n = s.options && s.options.borderWidth || 0;\n        if (!e.length) return n;\n        const o = e[0].size(this.resolveDataElementOptions(0)), r = e[e.length - 1].size(this.resolveDataElementOptions(e.length - 1));\n        return Math.max(n, o, r) / 2;\n    }\n}\nxe.id = \"scatter\";\nxe.defaults = {\n    datasetElementType: !1,\n    dataElementType: \"point\",\n    showLine: !1,\n    fill: !1\n};\nxe.overrides = {\n    interaction: {\n        mode: \"point\"\n    },\n    plugins: {\n        tooltip: {\n            callbacks: {\n                title () {\n                    return \"\";\n                },\n                label (i) {\n                    return \"(\" + i.label + \", \" + i.formattedValue + \")\";\n                }\n            }\n        }\n    },\n    scales: {\n        x: {\n            type: \"linear\"\n        },\n        y: {\n            type: \"linear\"\n        }\n    }\n};\nvar Wn = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    BarController: ue,\n    BubbleController: fe,\n    DoughnutController: Lt,\n    LineController: ge,\n    PolarAreaController: pe,\n    PieController: qe,\n    RadarController: me,\n    ScatterController: xe\n});\nfunction St() {\n    throw new Error(\"This method is not implemented: Check that a complete date adapter is provided.\");\n}\nclass vi {\n    constructor(t){\n        this.options = t || {};\n    }\n    init(t) {}\n    formats() {\n        return St();\n    }\n    parse(t, e) {\n        return St();\n    }\n    format(t, e) {\n        return St();\n    }\n    add(t, e, s) {\n        return St();\n    }\n    diff(t, e, s) {\n        return St();\n    }\n    startOf(t, e, s) {\n        return St();\n    }\n    endOf(t, e) {\n        return St();\n    }\n}\nvi.override = function(i) {\n    Object.assign(vi.prototype, i);\n};\nvar Nn = {\n    _date: vi\n};\nfunction Ha(i, t, e, s) {\n    const { controller: n, data: o, _sorted: r } = i, a = n._cachedMeta.iScale;\n    if (a && t === a.axis && t !== \"r\" && r && o.length) {\n        const l = a._reversePixels ? Lo : ft;\n        if (s) {\n            if (n._sharedOptions) {\n                const c = o[0], h = typeof c.getRange == \"function\" && c.getRange(t);\n                if (h) {\n                    const d = l(o, t, e - h), u = l(o, t, e + h);\n                    return {\n                        lo: d.lo,\n                        hi: u.hi\n                    };\n                }\n            }\n        } else return l(o, t, e);\n    }\n    return {\n        lo: 0,\n        hi: o.length - 1\n    };\n}\nfunction _e(i, t, e, s, n) {\n    const o = i.getSortedVisibleDatasetMetas(), r = e[t];\n    for(let a = 0, l = o.length; a < l; ++a){\n        const { index: c, data: h } = o[a], { lo: d, hi: u } = Ha(o[a], t, r, n);\n        for(let f = d; f <= u; ++f){\n            const g = h[f];\n            g.skip || s(g, c, f);\n        }\n    }\n}\nfunction ja(i) {\n    const t = i.indexOf(\"x\") !== -1, e = i.indexOf(\"y\") !== -1;\n    return function(s, n) {\n        const o = t ? Math.abs(s.x - n.x) : 0, r = e ? Math.abs(s.y - n.y) : 0;\n        return Math.sqrt(Math.pow(o, 2) + Math.pow(r, 2));\n    };\n}\nfunction di(i, t, e, s, n) {\n    const o = [];\n    return !n && !i.isPointInArea(t) || _e(i, e, t, function(a, l, c) {\n        !n && !re(a, i.chartArea, 0) || a.inRange(t.x, t.y, s) && o.push({\n            element: a,\n            datasetIndex: l,\n            index: c\n        });\n    }, !0), o;\n}\nfunction $a(i, t, e, s) {\n    let n = [];\n    function o(r, a, l) {\n        const { startAngle: c, endAngle: h } = r.getProps([\n            \"startAngle\",\n            \"endAngle\"\n        ], s), { angle: d } = hn(r, {\n            x: t.x,\n            y: t.y\n        });\n        oe(d, c, h) && n.push({\n            element: r,\n            datasetIndex: a,\n            index: l\n        });\n    }\n    return _e(i, e, t, o), n;\n}\nfunction Ya(i, t, e, s, n, o) {\n    let r = [];\n    const a = ja(e);\n    let l = Number.POSITIVE_INFINITY;\n    function c(h, d, u) {\n        const f = h.inRange(t.x, t.y, n);\n        if (s && !f) return;\n        const g = h.getCenterPoint(n);\n        if (!(!!o || i.isPointInArea(g)) && !f) return;\n        const m = a(t, g);\n        m < l ? (r = [\n            {\n                element: h,\n                datasetIndex: d,\n                index: u\n            }\n        ], l = m) : m === l && r.push({\n            element: h,\n            datasetIndex: d,\n            index: u\n        });\n    }\n    return _e(i, e, t, c), r;\n}\nfunction ui(i, t, e, s, n, o) {\n    return !o && !i.isPointInArea(t) ? [] : e === \"r\" && !s ? $a(i, t, e, n) : Ya(i, t, e, s, n, o);\n}\nfunction Cs(i, t, e, s, n) {\n    const o = [], r = e === \"x\" ? \"inXRange\" : \"inYRange\";\n    let a = !1;\n    return _e(i, e, t, (l, c, h)=>{\n        l[r](t[e], n) && (o.push({\n            element: l,\n            datasetIndex: c,\n            index: h\n        }), a = a || l.inRange(t.x, t.y, n));\n    }), s && !a ? [] : o;\n}\nvar Hn = {\n    evaluateInteractionItems: _e,\n    modes: {\n        index (i, t, e, s) {\n            const n = Pt(t, i), o = e.axis || \"x\", r = e.includeInvisible || !1, a = e.intersect ? di(i, n, o, s, r) : ui(i, n, o, !1, s, r), l = [];\n            return a.length ? (i.getSortedVisibleDatasetMetas().forEach((c)=>{\n                const h = a[0].index, d = c.data[h];\n                d && !d.skip && l.push({\n                    element: d,\n                    datasetIndex: c.index,\n                    index: h\n                });\n            }), l) : [];\n        },\n        dataset (i, t, e, s) {\n            const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n            let a = e.intersect ? di(i, n, o, s, r) : ui(i, n, o, !1, s, r);\n            if (a.length > 0) {\n                const l = a[0].datasetIndex, c = i.getDatasetMeta(l).data;\n                a = [];\n                for(let h = 0; h < c.length; ++h)a.push({\n                    element: c[h],\n                    datasetIndex: l,\n                    index: h\n                });\n            }\n            return a;\n        },\n        point (i, t, e, s) {\n            const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n            return di(i, n, o, s, r);\n        },\n        nearest (i, t, e, s) {\n            const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n            return ui(i, n, o, e.intersect, s, r);\n        },\n        x (i, t, e, s) {\n            const n = Pt(t, i);\n            return Cs(i, n, \"x\", e.intersect, s);\n        },\n        y (i, t, e, s) {\n            const n = Pt(t, i);\n            return Cs(i, n, \"y\", e.intersect, s);\n        }\n    }\n};\nconst jn = [\n    \"left\",\n    \"top\",\n    \"right\",\n    \"bottom\"\n];\nfunction Ut(i, t) {\n    return i.filter((e)=>e.pos === t);\n}\nfunction Ds(i, t) {\n    return i.filter((e)=>jn.indexOf(e.pos) === -1 && e.box.axis === t);\n}\nfunction Kt(i, t) {\n    return i.sort((e, s)=>{\n        const n = t ? s : e, o = t ? e : s;\n        return n.weight === o.weight ? n.index - o.index : n.weight - o.weight;\n    });\n}\nfunction Xa(i) {\n    const t = [];\n    let e, s, n, o, r, a;\n    for(e = 0, s = (i || []).length; e < s; ++e)n = i[e], ({ position: o, options: { stack: r, stackWeight: a = 1 } } = n), t.push({\n        index: e,\n        box: n,\n        pos: o,\n        horizontal: n.isHorizontal(),\n        weight: n.weight,\n        stack: r && o + r,\n        stackWeight: a\n    });\n    return t;\n}\nfunction Ua(i) {\n    const t = {};\n    for (const e of i){\n        const { stack: s, pos: n, stackWeight: o } = e;\n        if (!s || !jn.includes(n)) continue;\n        const r = t[s] || (t[s] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        r.count++, r.weight += o;\n    }\n    return t;\n}\nfunction Ka(i, t) {\n    const e = Ua(i), { vBoxMaxWidth: s, hBoxMaxHeight: n } = t;\n    let o, r, a;\n    for(o = 0, r = i.length; o < r; ++o){\n        a = i[o];\n        const { fullSize: l } = a.box, c = e[a.stack], h = c && a.stackWeight / c.weight;\n        a.horizontal ? (a.width = h ? h * s : l && t.availableWidth, a.height = n) : (a.width = s, a.height = h ? h * n : l && t.availableHeight);\n    }\n    return e;\n}\nfunction qa(i) {\n    const t = Xa(i), e = Kt(t.filter((c)=>c.box.fullSize), !0), s = Kt(Ut(t, \"left\"), !0), n = Kt(Ut(t, \"right\")), o = Kt(Ut(t, \"top\"), !0), r = Kt(Ut(t, \"bottom\")), a = Ds(t, \"x\"), l = Ds(t, \"y\");\n    return {\n        fullSize: e,\n        leftAndTop: s.concat(o),\n        rightAndBottom: n.concat(l).concat(r).concat(a),\n        chartArea: Ut(t, \"chartArea\"),\n        vertical: s.concat(n).concat(l),\n        horizontal: o.concat(r).concat(a)\n    };\n}\nfunction Os(i, t, e, s) {\n    return Math.max(i[e], t[e]) + Math.max(i[s], t[s]);\n}\nfunction $n(i, t) {\n    i.top = Math.max(i.top, t.top), i.left = Math.max(i.left, t.left), i.bottom = Math.max(i.bottom, t.bottom), i.right = Math.max(i.right, t.right);\n}\nfunction Ga(i, t, e, s) {\n    const { pos: n, box: o } = e, r = i.maxPadding;\n    if (!D(n)) {\n        e.size && (i[n] -= e.size);\n        const d = s[e.stack] || {\n            size: 0,\n            count: 1\n        };\n        d.size = Math.max(d.size, e.horizontal ? o.height : o.width), e.size = d.size / d.count, i[n] += e.size;\n    }\n    o.getPadding && $n(r, o.getPadding());\n    const a = Math.max(0, t.outerWidth - Os(r, i, \"left\", \"right\")), l = Math.max(0, t.outerHeight - Os(r, i, \"top\", \"bottom\")), c = a !== i.w, h = l !== i.h;\n    return i.w = a, i.h = l, e.horizontal ? {\n        same: c,\n        other: h\n    } : {\n        same: h,\n        other: c\n    };\n}\nfunction Za(i) {\n    const t = i.maxPadding;\n    function e(s) {\n        const n = Math.max(t[s] - i[s], 0);\n        return i[s] += n, n;\n    }\n    i.y += e(\"top\"), i.x += e(\"left\"), e(\"right\"), e(\"bottom\");\n}\nfunction Ja(i, t) {\n    const e = t.maxPadding;\n    function s(n) {\n        const o = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        return n.forEach((r)=>{\n            o[r] = Math.max(t[r], e[r]);\n        }), o;\n    }\n    return s(i ? [\n        \"left\",\n        \"right\"\n    ] : [\n        \"top\",\n        \"bottom\"\n    ]);\n}\nfunction Jt(i, t, e, s) {\n    const n = [];\n    let o, r, a, l, c, h;\n    for(o = 0, r = i.length, c = 0; o < r; ++o){\n        a = i[o], l = a.box, l.update(a.width || t.w, a.height || t.h, Ja(a.horizontal, t));\n        const { same: d, other: u } = Ga(t, e, a, s);\n        c |= d && n.length, h = h || u, l.fullSize || n.push(a);\n    }\n    return c && Jt(n, t, e, s) || h;\n}\nfunction Te(i, t, e, s, n) {\n    i.top = e, i.left = t, i.right = t + s, i.bottom = e + n, i.width = s, i.height = n;\n}\nfunction As(i, t, e, s) {\n    const n = e.padding;\n    let { x: o, y: r } = t;\n    for (const a of i){\n        const l = a.box, c = s[a.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        }, h = a.stackWeight / c.weight || 1;\n        if (a.horizontal) {\n            const d = t.w * h, u = c.size || l.height;\n            et(c.start) && (r = c.start), l.fullSize ? Te(l, n.left, r, e.outerWidth - n.right - n.left, u) : Te(l, t.left + c.placed, r, d, u), c.start = r, c.placed += d, r = l.bottom;\n        } else {\n            const d = t.h * h, u = c.size || l.width;\n            et(c.start) && (o = c.start), l.fullSize ? Te(l, o, n.top, u, e.outerHeight - n.bottom - n.top) : Te(l, o, t.top + c.placed, u, d), c.start = o, c.placed += d, o = l.right;\n        }\n    }\n    t.x = o, t.y = r;\n}\nO.set(\"layout\", {\n    autoPadding: !0,\n    padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    }\n});\nvar X = {\n    addBox (i, t) {\n        i.boxes || (i.boxes = []), t.fullSize = t.fullSize || !1, t.position = t.position || \"top\", t.weight = t.weight || 0, t._layers = t._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (e) {\n                        t.draw(e);\n                    }\n                }\n            ];\n        }, i.boxes.push(t);\n    },\n    removeBox (i, t) {\n        const e = i.boxes ? i.boxes.indexOf(t) : -1;\n        e !== -1 && i.boxes.splice(e, 1);\n    },\n    configure (i, t, e) {\n        t.fullSize = e.fullSize, t.position = e.position, t.weight = e.weight;\n    },\n    update (i, t, e, s) {\n        if (!i) return;\n        const n = K(i.options.layout.padding), o = Math.max(t - n.width, 0), r = Math.max(e - n.height, 0), a = qa(i.boxes), l = a.vertical, c = a.horizontal;\n        E(i.boxes, (p)=>{\n            typeof p.beforeLayout == \"function\" && p.beforeLayout();\n        });\n        const h = l.reduce((p, m)=>m.box.options && m.box.options.display === !1 ? p : p + 1, 0) || 1, d = Object.freeze({\n            outerWidth: t,\n            outerHeight: e,\n            padding: n,\n            availableWidth: o,\n            availableHeight: r,\n            vBoxMaxWidth: o / 2 / h,\n            hBoxMaxHeight: r / 2\n        }), u = Object.assign({}, n);\n        $n(u, K(s));\n        const f = Object.assign({\n            maxPadding: u,\n            w: o,\n            h: r,\n            x: n.left,\n            y: n.top\n        }, n), g = Ka(l.concat(c), d);\n        Jt(a.fullSize, f, d, g), Jt(l, f, d, g), Jt(c, f, d, g) && Jt(l, f, d, g), Za(f), As(a.leftAndTop, f, d, g), f.x += f.w, f.y += f.h, As(a.rightAndBottom, f, d, g), i.chartArea = {\n            left: f.left,\n            top: f.top,\n            right: f.left + f.w,\n            bottom: f.top + f.h,\n            height: f.h,\n            width: f.w\n        }, E(a.chartArea, (p)=>{\n            const m = p.box;\n            Object.assign(m, i.chartArea), m.update(f.w, f.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\nclass Hi {\n    acquireContext(t, e) {}\n    releaseContext(t) {\n        return !1;\n    }\n    addEventListener(t, e, s) {}\n    removeEventListener(t, e, s) {}\n    getDevicePixelRatio() {\n        return 1;\n    }\n    getMaximumSize(t, e, s, n) {\n        return e = Math.max(0, e || t.width), s = s || t.height, {\n            width: e,\n            height: Math.max(0, n ? Math.floor(e / n) : s)\n        };\n    }\n    isAttached(t) {\n        return !0;\n    }\n    updateConfig(t) {}\n}\nclass Yn extends Hi {\n    acquireContext(t) {\n        return t && t.getContext && t.getContext(\"2d\") || null;\n    }\n    updateConfig(t) {\n        t.options.animation = !1;\n    }\n}\nconst Ie = \"$chartjs\", Qa = {\n    touchstart: \"mousedown\",\n    touchmove: \"mousemove\",\n    touchend: \"mouseup\",\n    pointerenter: \"mouseenter\",\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointerleave: \"mouseout\",\n    pointerout: \"mouseout\"\n}, Ts = (i)=>i === null || i === \"\";\nfunction tl(i, t) {\n    const e = i.style, s = i.getAttribute(\"height\"), n = i.getAttribute(\"width\");\n    if (i[Ie] = {\n        initial: {\n            height: s,\n            width: n,\n            style: {\n                display: e.display,\n                height: e.height,\n                width: e.width\n            }\n        }\n    }, e.display = e.display || \"block\", e.boxSizing = e.boxSizing || \"border-box\", Ts(n)) {\n        const o = cs(i, \"width\");\n        o !== void 0 && (i.width = o);\n    }\n    if (Ts(s)) if (i.style.height === \"\") i.height = i.width / (t || 2);\n    else {\n        const o = cs(i, \"height\");\n        o !== void 0 && (i.height = o);\n    }\n    return i;\n}\nconst Xn = Vr ? {\n    passive: !0\n} : !1;\nfunction el(i, t, e) {\n    i.addEventListener(t, e, Xn);\n}\nfunction il(i, t, e) {\n    i.canvas.removeEventListener(t, e, Xn);\n}\nfunction sl(i, t) {\n    const e = Qa[i.type] || i.type, { x: s, y: n } = Pt(i, t);\n    return {\n        type: e,\n        chart: t,\n        native: i,\n        x: s !== void 0 ? s : null,\n        y: n !== void 0 ? n : null\n    };\n}\nfunction je(i, t) {\n    for (const e of i)if (e === t || e.contains(t)) return !0;\n}\nfunction nl(i, t, e) {\n    const s = i.canvas, n = new MutationObserver((o)=>{\n        let r = !1;\n        for (const a of o)r = r || je(a.addedNodes, s), r = r && !je(a.removedNodes, s);\n        r && e();\n    });\n    return n.observe(document, {\n        childList: !0,\n        subtree: !0\n    }), n;\n}\nfunction ol(i, t, e) {\n    const s = i.canvas, n = new MutationObserver((o)=>{\n        let r = !1;\n        for (const a of o)r = r || je(a.removedNodes, s), r = r && !je(a.addedNodes, s);\n        r && e();\n    });\n    return n.observe(document, {\n        childList: !0,\n        subtree: !0\n    }), n;\n}\nconst le = /* @__PURE__ */ new Map();\nlet Ls = 0;\nfunction Un() {\n    const i = window.devicePixelRatio;\n    i !== Ls && (Ls = i, le.forEach((t, e)=>{\n        e.currentDevicePixelRatio !== i && t();\n    }));\n}\nfunction rl(i, t) {\n    le.size || window.addEventListener(\"resize\", Un), le.set(i, t);\n}\nfunction al(i) {\n    le.delete(i), le.size || window.removeEventListener(\"resize\", Un);\n}\nfunction ll(i, t, e) {\n    const s = i.canvas, n = s && Wi(s);\n    if (!n) return;\n    const o = gn((a, l)=>{\n        const c = n.clientWidth;\n        e(a, l), c < n.clientWidth && e();\n    }, window), r = new ResizeObserver((a)=>{\n        const l = a[0], c = l.contentRect.width, h = l.contentRect.height;\n        c === 0 && h === 0 || o(c, h);\n    });\n    return r.observe(n), rl(i, o), r;\n}\nfunction fi(i, t, e) {\n    e && e.disconnect(), t === \"resize\" && al(i);\n}\nfunction cl(i, t, e) {\n    const s = i.canvas, n = gn((o)=>{\n        i.ctx !== null && e(sl(o, i));\n    }, i, (o)=>{\n        const r = o[0];\n        return [\n            r,\n            r.offsetX,\n            r.offsetY\n        ];\n    });\n    return el(s, t, n), n;\n}\nclass Kn extends Hi {\n    acquireContext(t, e) {\n        const s = t && t.getContext && t.getContext(\"2d\");\n        return s && s.canvas === t ? (tl(t, e), s) : null;\n    }\n    releaseContext(t) {\n        const e = t.canvas;\n        if (!e[Ie]) return !1;\n        const s = e[Ie].initial;\n        [\n            \"height\",\n            \"width\"\n        ].forEach((o)=>{\n            const r = s[o];\n            T(r) ? e.removeAttribute(o) : e.setAttribute(o, r);\n        });\n        const n = s.style || {};\n        return Object.keys(n).forEach((o)=>{\n            e.style[o] = n[o];\n        }), e.width = e.width, delete e[Ie], !0;\n    }\n    addEventListener(t, e, s) {\n        this.removeEventListener(t, e);\n        const n = t.$proxies || (t.$proxies = {}), r = {\n            attach: nl,\n            detach: ol,\n            resize: ll\n        }[e] || cl;\n        n[e] = r(t, e, s);\n    }\n    removeEventListener(t, e) {\n        const s = t.$proxies || (t.$proxies = {}), n = s[e];\n        if (!n) return;\n        (({\n            attach: fi,\n            detach: fi,\n            resize: fi\n        })[e] || il)(t, e, n), s[e] = void 0;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n    getMaximumSize(t, e, s, n) {\n        return Br(t, e, s, n);\n    }\n    isAttached(t) {\n        const e = Wi(t);\n        return !!(e && e.isConnected);\n    }\n}\nfunction qn(i) {\n    return !An() || typeof OffscreenCanvas < \"u\" && i instanceof OffscreenCanvas ? Yn : Kn;\n}\nclass hl {\n    constructor(){\n        this._init = [];\n    }\n    notify(t, e, s, n) {\n        e === \"beforeInit\" && (this._init = this._createDescriptors(t, !0), this._notify(this._init, t, \"install\"));\n        const o = n ? this._descriptors(t).filter(n) : this._descriptors(t), r = this._notify(o, t, e, s);\n        return e === \"afterDestroy\" && (this._notify(o, t, \"stop\"), this._notify(this._init, t, \"uninstall\")), r;\n    }\n    _notify(t, e, s, n) {\n        n = n || {};\n        for (const o of t){\n            const r = o.plugin, a = r[s], l = [\n                e,\n                n,\n                o.options\n            ];\n            if (I(a, l, r) === !1 && n.cancelable) return !1;\n        }\n        return !0;\n    }\n    invalidate() {\n        T(this._cache) || (this._oldCache = this._cache, this._cache = void 0);\n    }\n    _descriptors(t) {\n        if (this._cache) return this._cache;\n        const e = this._cache = this._createDescriptors(t);\n        return this._notifyStateChanges(t), e;\n    }\n    _createDescriptors(t, e) {\n        const s = t && t.config, n = C(s.options && s.options.plugins, {}), o = dl(s);\n        return n === !1 && !e ? [] : fl(t, o, n, e);\n    }\n    _notifyStateChanges(t) {\n        const e = this._oldCache || [], s = this._cache, n = (o, r)=>o.filter((a)=>!r.some((l)=>a.plugin.id === l.plugin.id));\n        this._notify(n(e, s), t, \"stop\"), this._notify(n(s, e), t, \"start\");\n    }\n}\nfunction dl(i) {\n    const t = {}, e = [], s = Object.keys(ot.plugins.items);\n    for(let o = 0; o < s.length; o++)e.push(ot.getPlugin(s[o]));\n    const n = i.plugins || [];\n    for(let o = 0; o < n.length; o++){\n        const r = n[o];\n        e.indexOf(r) === -1 && (e.push(r), t[r.id] = !0);\n    }\n    return {\n        plugins: e,\n        localIds: t\n    };\n}\nfunction ul(i, t) {\n    return !t && i === !1 ? null : i === !0 ? {} : i;\n}\nfunction fl(i, { plugins: t, localIds: e }, s, n) {\n    const o = [], r = i.getContext();\n    for (const a of t){\n        const l = a.id, c = ul(s[l], n);\n        c !== null && o.push({\n            plugin: a,\n            options: gl(i.config, {\n                plugin: a,\n                local: e[l]\n            }, c, r)\n        });\n    }\n    return o;\n}\nfunction gl(i, { plugin: t, local: e }, s, n) {\n    const o = i.pluginScopeKeys(t), r = i.getOptionScopes(s, o);\n    return e && t.defaults && r.push(t.defaults), i.createResolver(r, n, [\n        \"\"\n    ], {\n        scriptable: !1,\n        indexable: !1,\n        allKeys: !0\n    });\n}\nfunction Mi(i, t) {\n    const e = O.datasets[i] || {};\n    return ((t.datasets || {})[i] || {}).indexAxis || t.indexAxis || e.indexAxis || \"x\";\n}\nfunction pl(i, t) {\n    let e = i;\n    return i === \"_index_\" ? e = t : i === \"_value_\" && (e = t === \"x\" ? \"y\" : \"x\"), e;\n}\nfunction ml(i, t) {\n    return i === t ? \"_index_\" : \"_value_\";\n}\nfunction bl(i) {\n    if (i === \"top\" || i === \"bottom\") return \"x\";\n    if (i === \"left\" || i === \"right\") return \"y\";\n}\nfunction ki(i, t) {\n    return i === \"x\" || i === \"y\" ? i : t.axis || bl(t.position) || i.charAt(0).toLowerCase();\n}\nfunction xl(i, t) {\n    const e = At[i.type] || {\n        scales: {}\n    }, s = t.scales || {}, n = Mi(i.type, t), o = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);\n    return Object.keys(s).forEach((a)=>{\n        const l = s[a];\n        if (!D(l)) return console.error(`Invalid scale configuration for scale: ${a}`);\n        if (l._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${a}`);\n        const c = ki(a, l), h = ml(c, n), d = e.scales || {};\n        o[c] = o[c] || a, r[a] = Qt(/* @__PURE__ */ Object.create(null), [\n            {\n                axis: c\n            },\n            l,\n            d[c],\n            d[h]\n        ]);\n    }), i.data.datasets.forEach((a)=>{\n        const l = a.type || i.type, c = a.indexAxis || Mi(l, t), d = (At[l] || {}).scales || {};\n        Object.keys(d).forEach((u)=>{\n            const f = pl(u, c), g = a[f + \"AxisID\"] || o[f] || f;\n            r[g] = r[g] || /* @__PURE__ */ Object.create(null), Qt(r[g], [\n                {\n                    axis: f\n                },\n                s[g],\n                d[u]\n            ]);\n        });\n    }), Object.keys(r).forEach((a)=>{\n        const l = r[a];\n        Qt(l, [\n            O.scales[l.type],\n            O.scale\n        ]);\n    }), r;\n}\nfunction Gn(i) {\n    const t = i.options || (i.options = {});\n    t.plugins = C(t.plugins, {}), t.scales = xl(i, t);\n}\nfunction Zn(i) {\n    return i = i || {}, i.datasets = i.datasets || [], i.labels = i.labels || [], i;\n}\nfunction _l(i) {\n    return i = i || {}, i.data = Zn(i.data), Gn(i), i;\n}\nconst Rs = /* @__PURE__ */ new Map(), Jn = /* @__PURE__ */ new Set();\nfunction Le(i, t) {\n    let e = Rs.get(i);\n    return e || (e = t(), Rs.set(i, e), Jn.add(e)), e;\n}\nconst qt = (i, t, e)=>{\n    const s = _t(t, e);\n    s !== void 0 && i.add(s);\n};\nclass yl {\n    constructor(t){\n        this._config = _l(t), this._scopeCache = /* @__PURE__ */ new Map(), this._resolverCache = /* @__PURE__ */ new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(t) {\n        this._config.type = t;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(t) {\n        this._config.data = Zn(t);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(t) {\n        this._config.options = t;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const t = this._config;\n        this.clearCache(), Gn(t);\n    }\n    clearCache() {\n        this._scopeCache.clear(), this._resolverCache.clear();\n    }\n    datasetScopeKeys(t) {\n        return Le(t, ()=>[\n                [\n                    `datasets.${t}`,\n                    \"\"\n                ]\n            ]);\n    }\n    datasetAnimationScopeKeys(t, e) {\n        return Le(`${t}.transition.${e}`, ()=>[\n                [\n                    `datasets.${t}.transitions.${e}`,\n                    `transitions.${e}`\n                ],\n                [\n                    `datasets.${t}`,\n                    \"\"\n                ]\n            ]);\n    }\n    datasetElementScopeKeys(t, e) {\n        return Le(`${t}-${e}`, ()=>[\n                [\n                    `datasets.${t}.elements.${e}`,\n                    `datasets.${t}`,\n                    `elements.${e}`,\n                    \"\"\n                ]\n            ]);\n    }\n    pluginScopeKeys(t) {\n        const e = t.id, s = this.type;\n        return Le(`${s}-plugin-${e}`, ()=>[\n                [\n                    `plugins.${e}`,\n                    ...t.additionalOptionScopes || []\n                ]\n            ]);\n    }\n    _cachedScopes(t, e) {\n        const s = this._scopeCache;\n        let n = s.get(t);\n        return (!n || e) && (n = /* @__PURE__ */ new Map(), s.set(t, n)), n;\n    }\n    getOptionScopes(t, e, s) {\n        const { options: n, type: o } = this, r = this._cachedScopes(t, s), a = r.get(e);\n        if (a) return a;\n        const l = /* @__PURE__ */ new Set();\n        e.forEach((h)=>{\n            t && (l.add(t), h.forEach((d)=>qt(l, t, d))), h.forEach((d)=>qt(l, n, d)), h.forEach((d)=>qt(l, At[o] || {}, d)), h.forEach((d)=>qt(l, O, d)), h.forEach((d)=>qt(l, _i, d));\n        });\n        const c = Array.from(l);\n        return c.length === 0 && c.push(/* @__PURE__ */ Object.create(null)), Jn.has(e) && r.set(e, c), c;\n    }\n    chartOptionScopes() {\n        const { options: t, type: e } = this;\n        return [\n            t,\n            At[e] || {},\n            O.datasets[e] || {},\n            {\n                type: e\n            },\n            O,\n            _i\n        ];\n    }\n    resolveNamedOptions(t, e, s, n = [\n        \"\"\n    ]) {\n        const o = {\n            $shared: !0\n        }, { resolver: r, subPrefixes: a } = Es(this._resolverCache, t, n);\n        let l = r;\n        if (Ml(r, e)) {\n            o.$shared = !1, s = yt(s) ? s() : s;\n            const c = this.createResolver(t, s, a);\n            l = Vt(r, s, c);\n        }\n        for (const c of e)o[c] = l[c];\n        return o;\n    }\n    createResolver(t, e, s = [\n        \"\"\n    ], n) {\n        const { resolver: o } = Es(this._resolverCache, t, s);\n        return D(e) ? Vt(o, e, void 0, n) : o;\n    }\n}\nfunction Es(i, t, e) {\n    let s = i.get(t);\n    s || (s = /* @__PURE__ */ new Map(), i.set(t, s));\n    const n = e.join();\n    let o = s.get(n);\n    return o || (o = {\n        resolver: zi(t, e),\n        subPrefixes: e.filter((a)=>!a.toLowerCase().includes(\"hover\"))\n    }, s.set(n, o)), o;\n}\nconst vl = (i)=>D(i) && Object.getOwnPropertyNames(i).reduce((t, e)=>t || yt(i[e]), !1);\nfunction Ml(i, t) {\n    const { isScriptable: e, isIndexable: s } = wn(i);\n    for (const n of t){\n        const o = e(n), r = s(n), a = (r || o) && i[n];\n        if (o && (yt(a) || vl(a)) || r && z(a)) return !0;\n    }\n    return !1;\n}\nvar kl = \"3.9.1\";\nconst wl = [\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"chartArea\"\n];\nfunction Fs(i, t) {\n    return i === \"top\" || i === \"bottom\" || wl.indexOf(i) === -1 && t === \"x\";\n}\nfunction Is(i, t) {\n    return function(e, s) {\n        return e[i] === s[i] ? e[t] - s[t] : e[i] - s[i];\n    };\n}\nfunction zs(i) {\n    const t = i.chart, e = t.options.animation;\n    t.notifyPlugins(\"afterRender\"), I(e && e.onComplete, [\n        i\n    ], t);\n}\nfunction Sl(i) {\n    const t = i.chart, e = t.options.animation;\n    I(e && e.onProgress, [\n        i\n    ], t);\n}\nfunction Qn(i) {\n    return An() && typeof i == \"string\" ? i = document.getElementById(i) : i && i.length && (i = i[0]), i && i.canvas && (i = i.canvas), i;\n}\nconst $e = {}, to = (i)=>{\n    const t = Qn(i);\n    return Object.values($e).filter((e)=>e.canvas === t).pop();\n};\nfunction Pl(i, t, e) {\n    const s = Object.keys(i);\n    for (const n of s){\n        const o = +n;\n        if (o >= t) {\n            const r = i[n];\n            delete i[n], (e > 0 || o > t) && (i[o + e] = r);\n        }\n    }\n}\nfunction Cl(i, t, e, s) {\n    return !e || i.type === \"mouseout\" ? null : s ? t : i;\n}\nclass ji {\n    constructor(t, e){\n        const s = this.config = new yl(e), n = Qn(t), o = to(n);\n        if (o) throw new Error(\"Canvas is already in use. Chart with ID '\" + o.id + \"' must be destroyed before the canvas with ID '\" + o.canvas.id + \"' can be reused.\");\n        const r = s.createResolver(s.chartOptionScopes(), this.getContext());\n        this.platform = new (s.platform || qn(n))(), this.platform.updateConfig(s);\n        const a = this.platform.acquireContext(n, r.aspectRatio), l = a && a.canvas, c = l && l.height, h = l && l.width;\n        if (this.id = _o(), this.ctx = a, this.canvas = l, this.width = h, this.height = c, this._options = r, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this._plugins = new hl(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = Fo((d)=>this.update(d), r.resizeDelay || 0), this._dataChanges = [], $e[this.id] = this, !a || !l) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        at.listen(this, \"complete\", zs), at.listen(this, \"progress\", Sl), this._initialize(), this.attached && this.update();\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio: t, maintainAspectRatio: e }, width: s, height: n, _aspectRatio: o } = this;\n        return T(t) ? e && o ? o : n ? s / n : null : t;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(t) {\n        this.config.data = t;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(t) {\n        this.config.options = t;\n    }\n    _initialize() {\n        return this.notifyPlugins(\"beforeInit\"), this.options.responsive ? this.resize() : ls(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins(\"afterInit\"), this;\n    }\n    clear() {\n        return os(this.canvas, this.ctx), this;\n    }\n    stop() {\n        return at.stop(this), this;\n    }\n    resize(t, e) {\n        at.running(this) ? this._resizeBeforeDraw = {\n            width: t,\n            height: e\n        } : this._resize(t, e);\n    }\n    _resize(t, e) {\n        const s = this.options, n = this.canvas, o = s.maintainAspectRatio && this.aspectRatio, r = this.platform.getMaximumSize(n, t, e, o), a = s.devicePixelRatio || this.platform.getDevicePixelRatio(), l = this.width ? \"resize\" : \"attach\";\n        this.width = r.width, this.height = r.height, this._aspectRatio = this.aspectRatio, ls(this, a, !0) && (this.notifyPlugins(\"resize\", {\n            size: r\n        }), I(s.onResize, [\n            this,\n            r\n        ], this), this.attached && this._doResize(l) && this.render());\n    }\n    ensureScalesHaveIDs() {\n        const e = this.options.scales || {};\n        E(e, (s, n)=>{\n            s.id = n;\n        });\n    }\n    buildOrUpdateScales() {\n        const t = this.options, e = t.scales, s = this.scales, n = Object.keys(s).reduce((r, a)=>(r[a] = !1, r), {});\n        let o = [];\n        e && (o = o.concat(Object.keys(e).map((r)=>{\n            const a = e[r], l = ki(r, a), c = l === \"r\", h = l === \"x\";\n            return {\n                options: a,\n                dposition: c ? \"chartArea\" : h ? \"bottom\" : \"left\",\n                dtype: c ? \"radialLinear\" : h ? \"category\" : \"linear\"\n            };\n        }))), E(o, (r)=>{\n            const a = r.options, l = a.id, c = ki(l, a), h = C(a.type, r.dtype);\n            (a.position === void 0 || Fs(a.position, c) !== Fs(r.dposition)) && (a.position = r.dposition), n[l] = !0;\n            let d = null;\n            if (l in s && s[l].type === h) d = s[l];\n            else {\n                const u = ot.getScale(h);\n                d = new u({\n                    id: l,\n                    type: h,\n                    ctx: this.ctx,\n                    chart: this\n                }), s[d.id] = d;\n            }\n            d.init(a, t);\n        }), E(n, (r, a)=>{\n            r || delete s[a];\n        }), E(s, (r)=>{\n            X.configure(this, r, r.options), X.addBox(this, r);\n        });\n    }\n    _updateMetasets() {\n        const t = this._metasets, e = this.data.datasets.length, s = t.length;\n        if (t.sort((n, o)=>n.index - o.index), s > e) {\n            for(let n = e; n < s; ++n)this._destroyDatasetMeta(n);\n            t.splice(e, s - e);\n        }\n        this._sortedMetasets = t.slice(0).sort(Is(\"order\", \"index\"));\n    }\n    _removeUnreferencedMetasets() {\n        const { _metasets: t, data: { datasets: e } } = this;\n        t.length > e.length && delete this._stacks, t.forEach((s, n)=>{\n            e.filter((o)=>o === s._dataset).length === 0 && this._destroyDatasetMeta(n);\n        });\n    }\n    buildOrUpdateControllers() {\n        const t = [], e = this.data.datasets;\n        let s, n;\n        for(this._removeUnreferencedMetasets(), s = 0, n = e.length; s < n; s++){\n            const o = e[s];\n            let r = this.getDatasetMeta(s);\n            const a = o.type || this.config.type;\n            if (r.type && r.type !== a && (this._destroyDatasetMeta(s), r = this.getDatasetMeta(s)), r.type = a, r.indexAxis = o.indexAxis || Mi(a, this.options), r.order = o.order || 0, r.index = s, r.label = \"\" + o.label, r.visible = this.isDatasetVisible(s), r.controller) r.controller.updateIndex(s), r.controller.linkScales();\n            else {\n                const l = ot.getController(a), { datasetElementType: c, dataElementType: h } = O.datasets[a];\n                Object.assign(l.prototype, {\n                    dataElementType: ot.getElement(h),\n                    datasetElementType: c && ot.getElement(c)\n                }), r.controller = new l(this, s), t.push(r.controller);\n            }\n        }\n        return this._updateMetasets(), t;\n    }\n    _resetElements() {\n        E(this.data.datasets, (t, e)=>{\n            this.getDatasetMeta(e).controller.reset();\n        }, this);\n    }\n    reset() {\n        this._resetElements(), this.notifyPlugins(\"reset\");\n    }\n    update(t) {\n        const e = this.config;\n        e.update();\n        const s = this._options = e.createResolver(e.chartOptionScopes(), this.getContext()), n = this._animationsDisabled = !s.animation;\n        if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), this.notifyPlugins(\"beforeUpdate\", {\n            mode: t,\n            cancelable: !0\n        }) === !1) return;\n        const o = this.buildOrUpdateControllers();\n        this.notifyPlugins(\"beforeElementsUpdate\");\n        let r = 0;\n        for(let c = 0, h = this.data.datasets.length; c < h; c++){\n            const { controller: d } = this.getDatasetMeta(c), u = !n && o.indexOf(d) === -1;\n            d.buildOrUpdateElements(u), r = Math.max(+d.getMaxOverflow(), r);\n        }\n        r = this._minPadding = s.layout.autoPadding ? r : 0, this._updateLayout(r), n || E(o, (c)=>{\n            c.reset();\n        }), this._updateDatasets(t), this.notifyPlugins(\"afterUpdate\", {\n            mode: t\n        }), this._layers.sort(Is(\"z\", \"_idx\"));\n        const { _active: a, _lastEvent: l } = this;\n        l ? this._eventHandler(l, !0) : a.length && this._updateHoverStyles(a, a, !0), this.render();\n    }\n    _updateScales() {\n        E(this.scales, (t)=>{\n            X.removeBox(this, t);\n        }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();\n    }\n    _checkEventBindings() {\n        const t = this.options, e = new Set(Object.keys(this._listeners)), s = new Set(t.events);\n        (!Ui(e, s) || !!this._responsiveListeners !== t.responsive) && (this.unbindEvents(), this.bindEvents());\n    }\n    _updateHiddenIndices() {\n        const { _hiddenIndices: t } = this, e = this._getUniformDataChanges() || [];\n        for (const { method: s, start: n, count: o } of e){\n            const r = s === \"_removeElements\" ? -o : o;\n            Pl(t, n, r);\n        }\n    }\n    _getUniformDataChanges() {\n        const t = this._dataChanges;\n        if (!t || !t.length) return;\n        this._dataChanges = [];\n        const e = this.data.datasets.length, s = (o)=>new Set(t.filter((r)=>r[0] === o).map((r, a)=>a + \",\" + r.splice(1).join(\",\"))), n = s(0);\n        for(let o = 1; o < e; o++)if (!Ui(n, s(o))) return;\n        return Array.from(n).map((o)=>o.split(\",\")).map((o)=>({\n                method: o[1],\n                start: +o[2],\n                count: +o[3]\n            }));\n    }\n    _updateLayout(t) {\n        if (this.notifyPlugins(\"beforeLayout\", {\n            cancelable: !0\n        }) === !1) return;\n        X.update(this, this.width, this.height, t);\n        const e = this.chartArea, s = e.width <= 0 || e.height <= 0;\n        this._layers = [], E(this.boxes, (n)=>{\n            s && n.position === \"chartArea\" || (n.configure && n.configure(), this._layers.push(...n._layers()));\n        }, this), this._layers.forEach((n, o)=>{\n            n._idx = o;\n        }), this.notifyPlugins(\"afterLayout\");\n    }\n    _updateDatasets(t) {\n        if (this.notifyPlugins(\"beforeDatasetsUpdate\", {\n            mode: t,\n            cancelable: !0\n        }) !== !1) {\n            for(let e = 0, s = this.data.datasets.length; e < s; ++e)this.getDatasetMeta(e).controller.configure();\n            for(let e = 0, s = this.data.datasets.length; e < s; ++e)this._updateDataset(e, yt(t) ? t({\n                datasetIndex: e\n            }) : t);\n            this.notifyPlugins(\"afterDatasetsUpdate\", {\n                mode: t\n            });\n        }\n    }\n    _updateDataset(t, e) {\n        const s = this.getDatasetMeta(t), n = {\n            meta: s,\n            index: t,\n            mode: e,\n            cancelable: !0\n        };\n        this.notifyPlugins(\"beforeDatasetUpdate\", n) !== !1 && (s.controller._update(e), n.cancelable = !1, this.notifyPlugins(\"afterDatasetUpdate\", n));\n    }\n    render() {\n        this.notifyPlugins(\"beforeRender\", {\n            cancelable: !0\n        }) !== !1 && (at.has(this) ? this.attached && !at.running(this) && at.start(this) : (this.draw(), zs({\n            chart: this\n        })));\n    }\n    draw() {\n        let t;\n        if (this._resizeBeforeDraw) {\n            const { width: s, height: n } = this._resizeBeforeDraw;\n            this._resize(s, n), this._resizeBeforeDraw = null;\n        }\n        if (this.clear(), this.width <= 0 || this.height <= 0 || this.notifyPlugins(\"beforeDraw\", {\n            cancelable: !0\n        }) === !1) return;\n        const e = this._layers;\n        for(t = 0; t < e.length && e[t].z <= 0; ++t)e[t].draw(this.chartArea);\n        for(this._drawDatasets(); t < e.length; ++t)e[t].draw(this.chartArea);\n        this.notifyPlugins(\"afterDraw\");\n    }\n    _getSortedDatasetMetas(t) {\n        const e = this._sortedMetasets, s = [];\n        let n, o;\n        for(n = 0, o = e.length; n < o; ++n){\n            const r = e[n];\n            (!t || r.visible) && s.push(r);\n        }\n        return s;\n    }\n    getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(!0);\n    }\n    _drawDatasets() {\n        if (this.notifyPlugins(\"beforeDatasetsDraw\", {\n            cancelable: !0\n        }) === !1) return;\n        const t = this.getSortedVisibleDatasetMetas();\n        for(let e = t.length - 1; e >= 0; --e)this._drawDataset(t[e]);\n        this.notifyPlugins(\"afterDatasetsDraw\");\n    }\n    _drawDataset(t) {\n        const e = this.ctx, s = t._clip, n = !s.disabled, o = this.chartArea, r = {\n            meta: t,\n            index: t.index,\n            cancelable: !0\n        };\n        this.notifyPlugins(\"beforeDatasetDraw\", r) !== !1 && (n && Xe(e, {\n            left: s.left === !1 ? 0 : o.left - s.left,\n            right: s.right === !1 ? this.width : o.right + s.right,\n            top: s.top === !1 ? 0 : o.top - s.top,\n            bottom: s.bottom === !1 ? this.height : o.bottom + s.bottom\n        }), t.controller.draw(), n && Ue(e), r.cancelable = !1, this.notifyPlugins(\"afterDatasetDraw\", r));\n    }\n    isPointInArea(t) {\n        return re(t, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(t, e, s, n) {\n        const o = Hn.modes[e];\n        return typeof o == \"function\" ? o(this, t, s, n) : [];\n    }\n    getDatasetMeta(t) {\n        const e = this.data.datasets[t], s = this._metasets;\n        let n = s.filter((o)=>o && o._dataset === e).pop();\n        return n || (n = {\n            type: null,\n            data: [],\n            dataset: null,\n            controller: null,\n            hidden: null,\n            xAxisID: null,\n            yAxisID: null,\n            order: e && e.order || 0,\n            index: t,\n            _dataset: e,\n            _parsed: [],\n            _sorted: !1\n        }, s.push(n)), n;\n    }\n    getContext() {\n        return this.$context || (this.$context = vt(null, {\n            chart: this,\n            type: \"chart\"\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(t) {\n        const e = this.data.datasets[t];\n        if (!e) return !1;\n        const s = this.getDatasetMeta(t);\n        return typeof s.hidden == \"boolean\" ? !s.hidden : !e.hidden;\n    }\n    setDatasetVisibility(t, e) {\n        const s = this.getDatasetMeta(t);\n        s.hidden = !e;\n    }\n    toggleDataVisibility(t) {\n        this._hiddenIndices[t] = !this._hiddenIndices[t];\n    }\n    getDataVisibility(t) {\n        return !this._hiddenIndices[t];\n    }\n    _updateVisibility(t, e, s) {\n        const n = s ? \"show\" : \"hide\", o = this.getDatasetMeta(t), r = o.controller._resolveAnimations(void 0, n);\n        et(e) ? (o.data[e].hidden = !s, this.update()) : (this.setDatasetVisibility(t, s), r.update(o, {\n            visible: s\n        }), this.update((a)=>a.datasetIndex === t ? n : void 0));\n    }\n    hide(t, e) {\n        this._updateVisibility(t, e, !1);\n    }\n    show(t, e) {\n        this._updateVisibility(t, e, !0);\n    }\n    _destroyDatasetMeta(t) {\n        const e = this._metasets[t];\n        e && e.controller && e.controller._destroy(), delete this._metasets[t];\n    }\n    _stop() {\n        let t, e;\n        for(this.stop(), at.remove(this), t = 0, e = this.data.datasets.length; t < e; ++t)this._destroyDatasetMeta(t);\n    }\n    destroy() {\n        this.notifyPlugins(\"beforeDestroy\");\n        const { canvas: t, ctx: e } = this;\n        this._stop(), this.config.clearCache(), t && (this.unbindEvents(), os(t, e), this.platform.releaseContext(e), this.canvas = null, this.ctx = null), this.notifyPlugins(\"destroy\"), delete $e[this.id], this.notifyPlugins(\"afterDestroy\");\n    }\n    toBase64Image(...t) {\n        return this.canvas.toDataURL(...t);\n    }\n    bindEvents() {\n        this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;\n    }\n    bindUserEvents() {\n        const t = this._listeners, e = this.platform, s = (o, r)=>{\n            e.addEventListener(this, o, r), t[o] = r;\n        }, n = (o, r, a)=>{\n            o.offsetX = r, o.offsetY = a, this._eventHandler(o);\n        };\n        E(this.options.events, (o)=>s(o, n));\n    }\n    bindResponsiveEvents() {\n        this._responsiveListeners || (this._responsiveListeners = {});\n        const t = this._responsiveListeners, e = this.platform, s = (l, c)=>{\n            e.addEventListener(this, l, c), t[l] = c;\n        }, n = (l, c)=>{\n            t[l] && (e.removeEventListener(this, l, c), delete t[l]);\n        }, o = (l, c)=>{\n            this.canvas && this.resize(l, c);\n        };\n        let r;\n        const a = ()=>{\n            n(\"attach\", a), this.attached = !0, this.resize(), s(\"resize\", o), s(\"detach\", r);\n        };\n        r = ()=>{\n            this.attached = !1, n(\"resize\", o), this._stop(), this._resize(0, 0), s(\"attach\", a);\n        }, e.isAttached(this.canvas) ? a() : r();\n    }\n    unbindEvents() {\n        E(this._listeners, (t, e)=>{\n            this.platform.removeEventListener(this, e, t);\n        }), this._listeners = {}, E(this._responsiveListeners, (t, e)=>{\n            this.platform.removeEventListener(this, e, t);\n        }), this._responsiveListeners = void 0;\n    }\n    updateHoverStyle(t, e, s) {\n        const n = s ? \"set\" : \"remove\";\n        let o, r, a, l;\n        for(e === \"dataset\" && (o = this.getDatasetMeta(t[0].datasetIndex), o.controller[\"_\" + n + \"DatasetHoverStyle\"]()), a = 0, l = t.length; a < l; ++a){\n            r = t[a];\n            const c = r && this.getDatasetMeta(r.datasetIndex).controller;\n            c && c[n + \"HoverStyle\"](r.element, r.datasetIndex, r.index);\n        }\n    }\n    getActiveElements() {\n        return this._active || [];\n    }\n    setActiveElements(t) {\n        const e = this._active || [], s = t.map(({ datasetIndex: o, index: r })=>{\n            const a = this.getDatasetMeta(o);\n            if (!a) throw new Error(\"No dataset found at index \" + o);\n            return {\n                datasetIndex: o,\n                element: a.data[r],\n                index: r\n            };\n        });\n        !ze(s, e) && (this._active = s, this._lastEvent = null, this._updateHoverStyles(s, e));\n    }\n    notifyPlugins(t, e, s) {\n        return this._plugins.notify(this, t, e, s);\n    }\n    _updateHoverStyles(t, e, s) {\n        const n = this.options.hover, o = (l, c)=>l.filter((h)=>!c.some((d)=>h.datasetIndex === d.datasetIndex && h.index === d.index)), r = o(e, t), a = s ? t : o(t, e);\n        r.length && this.updateHoverStyle(r, n.mode, !1), a.length && n.mode && this.updateHoverStyle(a, n.mode, !0);\n    }\n    _eventHandler(t, e) {\n        const s = {\n            event: t,\n            replay: e,\n            cancelable: !0,\n            inChartArea: this.isPointInArea(t)\n        }, n = (r)=>(r.options.events || this.options.events).includes(t.native.type);\n        if (this.notifyPlugins(\"beforeEvent\", s, n) === !1) return;\n        const o = this._handleEvent(t, e, s.inChartArea);\n        return s.cancelable = !1, this.notifyPlugins(\"afterEvent\", s, n), (o || s.changed) && this.render(), this;\n    }\n    _handleEvent(t, e, s) {\n        const { _active: n = [], options: o } = this, r = e, a = this._getActiveElements(t, n, s, r), l = So(t), c = Cl(t, this._lastEvent, s, l);\n        s && (this._lastEvent = null, I(o.onHover, [\n            t,\n            a,\n            this\n        ], this), l && I(o.onClick, [\n            t,\n            a,\n            this\n        ], this));\n        const h = !ze(a, n);\n        return (h || e) && (this._active = a, this._updateHoverStyles(a, n, e)), this._lastEvent = c, h;\n    }\n    _getActiveElements(t, e, s, n) {\n        if (t.type === \"mouseout\") return [];\n        if (!s) return e;\n        const o = this.options.hover;\n        return this.getElementsAtEventForMode(t, o.mode, o, n);\n    }\n}\nconst Bs = ()=>E(ji.instances, (i)=>i._plugins.invalidate()), pt = !0;\nObject.defineProperties(ji, {\n    defaults: {\n        enumerable: pt,\n        value: O\n    },\n    instances: {\n        enumerable: pt,\n        value: $e\n    },\n    overrides: {\n        enumerable: pt,\n        value: At\n    },\n    registry: {\n        enumerable: pt,\n        value: ot\n    },\n    version: {\n        enumerable: pt,\n        value: kl\n    },\n    getChart: {\n        enumerable: pt,\n        value: to\n    },\n    register: {\n        enumerable: pt,\n        value: (...i)=>{\n            ot.add(...i), Bs();\n        }\n    },\n    unregister: {\n        enumerable: pt,\n        value: (...i)=>{\n            ot.remove(...i), Bs();\n        }\n    }\n});\nfunction eo(i, t, e) {\n    const { startAngle: s, pixelMargin: n, x: o, y: r, outerRadius: a, innerRadius: l } = t;\n    let c = n / a;\n    i.beginPath(), i.arc(o, r, a, s - c, e + c), l > n ? (c = n / l, i.arc(o, r, l, e + c, s - c, !0)) : i.arc(o, r, n, e + V, s - V), i.closePath(), i.clip();\n}\nfunction Dl(i) {\n    return Ii(i, [\n        \"outerStart\",\n        \"outerEnd\",\n        \"innerStart\",\n        \"innerEnd\"\n    ]);\n}\nfunction Ol(i, t, e, s) {\n    const n = Dl(i.options.borderRadius), o = (e - t) / 2, r = Math.min(o, s * t / 2), a = (l)=>{\n        const c = (e - Math.min(o, l)) * s / 2;\n        return Y(l, 0, Math.min(o, c));\n    };\n    return {\n        outerStart: a(n.outerStart),\n        outerEnd: a(n.outerEnd),\n        innerStart: Y(n.innerStart, 0, r),\n        innerEnd: Y(n.innerEnd, 0, r)\n    };\n}\nfunction It(i, t, e, s) {\n    return {\n        x: e + i * Math.cos(t),\n        y: s + i * Math.sin(t)\n    };\n}\nfunction wi(i, t, e, s, n, o) {\n    const { x: r, y: a, startAngle: l, pixelMargin: c, innerRadius: h } = t, d = Math.max(t.outerRadius + s + e - c, 0), u = h > 0 ? h + s + e + c : 0;\n    let f = 0;\n    const g = n - l;\n    if (s) {\n        const P = h > 0 ? h - s : 0, j = d > 0 ? d - s : 0, W = (P + j) / 2, kt = W !== 0 ? g * W / (W + s) : g;\n        f = (g - kt) / 2;\n    }\n    const p = Math.max(1e-3, g * d - e / B) / d, m = (g - p) / 2, b = l + m + f, x = n - m - f, { outerStart: v, outerEnd: y, innerStart: _, innerEnd: M } = Ol(t, u, d, x - b), k = d - v, S = d - y, w = b + v / k, L = x - y / S, R = u + _, A = u + M, H = b + _ / R, q = x - M / A;\n    if (i.beginPath(), o) {\n        if (i.arc(r, a, d, w, L), y > 0) {\n            const W = It(S, L, r, a);\n            i.arc(W.x, W.y, y, L, x + V);\n        }\n        const P = It(A, x, r, a);\n        if (i.lineTo(P.x, P.y), M > 0) {\n            const W = It(A, q, r, a);\n            i.arc(W.x, W.y, M, x + V, q + Math.PI);\n        }\n        if (i.arc(r, a, u, x - M / u, b + _ / u, !0), _ > 0) {\n            const W = It(R, H, r, a);\n            i.arc(W.x, W.y, _, H + Math.PI, b - V);\n        }\n        const j = It(k, b, r, a);\n        if (i.lineTo(j.x, j.y), v > 0) {\n            const W = It(k, w, r, a);\n            i.arc(W.x, W.y, v, b - V, w);\n        }\n    } else {\n        i.moveTo(r, a);\n        const P = Math.cos(w) * d + r, j = Math.sin(w) * d + a;\n        i.lineTo(P, j);\n        const W = Math.cos(L) * d + r, kt = Math.sin(L) * d + a;\n        i.lineTo(W, kt);\n    }\n    i.closePath();\n}\nfunction Al(i, t, e, s, n) {\n    const { fullCircles: o, startAngle: r, circumference: a } = t;\n    let l = t.endAngle;\n    if (o) {\n        wi(i, t, e, s, r + F, n);\n        for(let c = 0; c < o; ++c)i.fill();\n        isNaN(a) || (l = r + a % F, a % F === 0 && (l += F));\n    }\n    return wi(i, t, e, s, l, n), i.fill(), l;\n}\nfunction Tl(i, t, e) {\n    const { x: s, y: n, startAngle: o, pixelMargin: r, fullCircles: a } = t, l = Math.max(t.outerRadius - r, 0), c = t.innerRadius + r;\n    let h;\n    for(e && eo(i, t, o + F), i.beginPath(), i.arc(s, n, c, o + F, o, !0), h = 0; h < a; ++h)i.stroke();\n    for(i.beginPath(), i.arc(s, n, l, o, o + F), h = 0; h < a; ++h)i.stroke();\n}\nfunction Ll(i, t, e, s, n, o) {\n    const { options: r } = t, { borderWidth: a, borderJoinStyle: l } = r, c = r.borderAlign === \"inner\";\n    a && (c ? (i.lineWidth = a * 2, i.lineJoin = l || \"round\") : (i.lineWidth = a, i.lineJoin = l || \"bevel\"), t.fullCircles && Tl(i, t, c), c && eo(i, t, n), wi(i, t, e, s, n, o), i.stroke());\n}\nclass ye extends st {\n    constructor(t){\n        super(), this.options = void 0, this.circumference = void 0, this.startAngle = void 0, this.endAngle = void 0, this.innerRadius = void 0, this.outerRadius = void 0, this.pixelMargin = 0, this.fullCircles = 0, t && Object.assign(this, t);\n    }\n    inRange(t, e, s) {\n        const n = this.getProps([\n            \"x\",\n            \"y\"\n        ], s), { angle: o, distance: r } = hn(n, {\n            x: t,\n            y: e\n        }), { startAngle: a, endAngle: l, innerRadius: c, outerRadius: h, circumference: d } = this.getProps([\n            \"startAngle\",\n            \"endAngle\",\n            \"innerRadius\",\n            \"outerRadius\",\n            \"circumference\"\n        ], s), u = this.options.spacing / 2, g = C(d, l - a) >= F || oe(o, a, l), p = ut(r, c + u, h + u);\n        return g && p;\n    }\n    getCenterPoint(t) {\n        const { x: e, y: s, startAngle: n, endAngle: o, innerRadius: r, outerRadius: a } = this.getProps([\n            \"x\",\n            \"y\",\n            \"startAngle\",\n            \"endAngle\",\n            \"innerRadius\",\n            \"outerRadius\",\n            \"circumference\"\n        ], t), { offset: l, spacing: c } = this.options, h = (n + o) / 2, d = (r + a + c + l) / 2;\n        return {\n            x: e + Math.cos(h) * d,\n            y: s + Math.sin(h) * d\n        };\n    }\n    tooltipPosition(t) {\n        return this.getCenterPoint(t);\n    }\n    draw(t) {\n        const { options: e, circumference: s } = this, n = (e.offset || 0) / 2, o = (e.spacing || 0) / 2, r = e.circular;\n        if (this.pixelMargin = e.borderAlign === \"inner\" ? 0.33 : 0, this.fullCircles = s > F ? Math.floor(s / F) : 0, s === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;\n        t.save();\n        let a = 0;\n        if (n) {\n            a = n / 2;\n            const c = (this.startAngle + this.endAngle) / 2;\n            t.translate(Math.cos(c) * a, Math.sin(c) * a), this.circumference >= B && (a = n);\n        }\n        t.fillStyle = e.backgroundColor, t.strokeStyle = e.borderColor;\n        const l = Al(t, this, a, o, r);\n        Ll(t, this, a, o, l, r), t.restore();\n    }\n}\nye.id = \"arc\";\nye.defaults = {\n    borderAlign: \"center\",\n    borderColor: \"#fff\",\n    borderJoinStyle: void 0,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: void 0,\n    circular: !0\n};\nye.defaultRoutes = {\n    backgroundColor: \"backgroundColor\"\n};\nfunction io(i, t, e = t) {\n    i.lineCap = C(e.borderCapStyle, t.borderCapStyle), i.setLineDash(C(e.borderDash, t.borderDash)), i.lineDashOffset = C(e.borderDashOffset, t.borderDashOffset), i.lineJoin = C(e.borderJoinStyle, t.borderJoinStyle), i.lineWidth = C(e.borderWidth, t.borderWidth), i.strokeStyle = C(e.borderColor, t.borderColor);\n}\nfunction Rl(i, t, e) {\n    i.lineTo(e.x, e.y);\n}\nfunction El(i) {\n    return i.stepped ? lr : i.tension || i.cubicInterpolationMode === \"monotone\" ? cr : Rl;\n}\nfunction so(i, t, e = {}) {\n    const s = i.length, { start: n = 0, end: o = s - 1 } = e, { start: r, end: a } = t, l = Math.max(n, r), c = Math.min(o, a), h = n < r && o < r || n > a && o > a;\n    return {\n        count: s,\n        start: l,\n        loop: t.loop,\n        ilen: c < l && !h ? s + c - l : c - l\n    };\n}\nfunction Fl(i, t, e, s) {\n    const { points: n, options: o } = t, { count: r, start: a, loop: l, ilen: c } = so(n, e, s), h = El(o);\n    let { move: d = !0, reverse: u } = s || {}, f, g, p;\n    for(f = 0; f <= c; ++f)g = n[(a + (u ? c - f : f)) % r], !g.skip && (d ? (i.moveTo(g.x, g.y), d = !1) : h(i, p, g, u, o.stepped), p = g);\n    return l && (g = n[(a + (u ? c : 0)) % r], h(i, p, g, u, o.stepped)), !!l;\n}\nfunction Il(i, t, e, s) {\n    const n = t.points, { count: o, start: r, ilen: a } = so(n, e, s), { move: l = !0, reverse: c } = s || {};\n    let h = 0, d = 0, u, f, g, p, m, b;\n    const x = (y)=>(r + (c ? a - y : y)) % o, v = ()=>{\n        p !== m && (i.lineTo(h, m), i.lineTo(h, p), i.lineTo(h, b));\n    };\n    for(l && (f = n[x(0)], i.moveTo(f.x, f.y)), u = 0; u <= a; ++u){\n        if (f = n[x(u)], f.skip) continue;\n        const y = f.x, _ = f.y, M = y | 0;\n        M === g ? (_ < p ? p = _ : _ > m && (m = _), h = (d * h + y) / ++d) : (v(), i.lineTo(y, _), g = M, d = 0, p = m = _), b = _;\n    }\n    v();\n}\nfunction Si(i) {\n    const t = i.options, e = t.borderDash && t.borderDash.length;\n    return !i._decimated && !i._loop && !t.tension && t.cubicInterpolationMode !== \"monotone\" && !t.stepped && !e ? Il : Fl;\n}\nfunction zl(i) {\n    return i.stepped ? Wr : i.tension || i.cubicInterpolationMode === \"monotone\" ? Nr : Ct;\n}\nfunction Bl(i, t, e, s) {\n    let n = t._path;\n    n || (n = t._path = new Path2D(), t.path(n, e, s) && n.closePath()), io(i, t.options), i.stroke(n);\n}\nfunction Vl(i, t, e, s) {\n    const { segments: n, options: o } = t, r = Si(t);\n    for (const a of n)io(i, o, a.style), i.beginPath(), r(i, t, a, {\n        start: e,\n        end: e + s - 1\n    }) && i.closePath(), i.stroke();\n}\nconst Wl = typeof Path2D == \"function\";\nfunction Nl(i, t, e, s) {\n    Wl && !t.options.segment ? Bl(i, t, e, s) : Vl(i, t, e, s);\n}\nclass gt extends st {\n    constructor(t){\n        super(), this.animated = !0, this.options = void 0, this._chart = void 0, this._loop = void 0, this._fullLoop = void 0, this._path = void 0, this._points = void 0, this._segments = void 0, this._decimated = !1, this._pointsUpdated = !1, this._datasetIndex = void 0, t && Object.assign(this, t);\n    }\n    updateControlPoints(t, e) {\n        const s = this.options;\n        if ((s.tension || s.cubicInterpolationMode === \"monotone\") && !s.stepped && !this._pointsUpdated) {\n            const n = s.spanGaps ? this._loop : this._fullLoop;\n            Lr(this._points, s, t, n, e), this._pointsUpdated = !0;\n        }\n    }\n    set points(t) {\n        this._points = t, delete this._segments, delete this._path, this._pointsUpdated = !1;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = Kr(this, this.options.segment));\n    }\n    first() {\n        const t = this.segments, e = this.points;\n        return t.length && e[t[0].start];\n    }\n    last() {\n        const t = this.segments, e = this.points, s = t.length;\n        return s && e[t[s - 1].end];\n    }\n    interpolate(t, e) {\n        const s = this.options, n = t[e], o = this.points, r = Fn(this, {\n            property: e,\n            start: n,\n            end: n\n        });\n        if (!r.length) return;\n        const a = [], l = zl(s);\n        let c, h;\n        for(c = 0, h = r.length; c < h; ++c){\n            const { start: d, end: u } = r[c], f = o[d], g = o[u];\n            if (f === g) {\n                a.push(f);\n                continue;\n            }\n            const p = Math.abs((n - f[e]) / (g[e] - f[e])), m = l(f, g, p, s.stepped);\n            m[e] = t[e], a.push(m);\n        }\n        return a.length === 1 ? a[0] : a;\n    }\n    pathSegment(t, e, s) {\n        return Si(this)(t, this, e, s);\n    }\n    path(t, e, s) {\n        const n = this.segments, o = Si(this);\n        let r = this._loop;\n        e = e || 0, s = s || this.points.length - e;\n        for (const a of n)r &= o(t, this, a, {\n            start: e,\n            end: e + s - 1\n        });\n        return !!r;\n    }\n    draw(t, e, s, n) {\n        const o = this.options || {};\n        (this.points || []).length && o.borderWidth && (t.save(), Nl(t, this, s, n), t.restore()), this.animated && (this._pointsUpdated = !1, this._path = void 0);\n    }\n}\ngt.id = \"line\";\ngt.defaults = {\n    borderCapStyle: \"butt\",\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: \"miter\",\n    borderWidth: 3,\n    capBezierPoints: !0,\n    cubicInterpolationMode: \"default\",\n    fill: !1,\n    spanGaps: !1,\n    stepped: !1,\n    tension: 0\n};\ngt.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n};\ngt.descriptors = {\n    _scriptable: !0,\n    _indexable: (i)=>i !== \"borderDash\" && i !== \"fill\"\n};\nfunction Vs(i, t, e, s) {\n    const n = i.options, { [e]: o } = i.getProps([\n        e\n    ], s);\n    return Math.abs(t - o) < n.radius + n.hitRadius;\n}\nclass ve extends st {\n    constructor(t){\n        super(), this.options = void 0, this.parsed = void 0, this.skip = void 0, this.stop = void 0, t && Object.assign(this, t);\n    }\n    inRange(t, e, s) {\n        const n = this.options, { x: o, y: r } = this.getProps([\n            \"x\",\n            \"y\"\n        ], s);\n        return Math.pow(t - o, 2) + Math.pow(e - r, 2) < Math.pow(n.hitRadius + n.radius, 2);\n    }\n    inXRange(t, e) {\n        return Vs(this, t, \"x\", e);\n    }\n    inYRange(t, e) {\n        return Vs(this, t, \"y\", e);\n    }\n    getCenterPoint(t) {\n        const { x: e, y: s } = this.getProps([\n            \"x\",\n            \"y\"\n        ], t);\n        return {\n            x: e,\n            y: s\n        };\n    }\n    size(t) {\n        t = t || this.options || {};\n        let e = t.radius || 0;\n        e = Math.max(e, e && t.hoverRadius || 0);\n        const s = e && t.borderWidth || 0;\n        return (e + s) * 2;\n    }\n    draw(t, e) {\n        const s = this.options;\n        this.skip || s.radius < 0.1 || !re(this, e, this.size(s) / 2) || (t.strokeStyle = s.borderColor, t.lineWidth = s.borderWidth, t.fillStyle = s.backgroundColor, yi(t, s, this.x, this.y));\n    }\n    getRange() {\n        const t = this.options || {};\n        return t.radius + t.hitRadius;\n    }\n}\nve.id = \"point\";\nve.defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: \"circle\",\n    radius: 3,\n    rotation: 0\n};\nve.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n};\nfunction no(i, t) {\n    const { x: e, y: s, base: n, width: o, height: r } = i.getProps([\n        \"x\",\n        \"y\",\n        \"base\",\n        \"width\",\n        \"height\"\n    ], t);\n    let a, l, c, h, d;\n    return i.horizontal ? (d = r / 2, a = Math.min(e, n), l = Math.max(e, n), c = s - d, h = s + d) : (d = o / 2, a = e - d, l = e + d, c = Math.min(s, n), h = Math.max(s, n)), {\n        left: a,\n        top: c,\n        right: l,\n        bottom: h\n    };\n}\nfunction bt(i, t, e, s) {\n    return i ? 0 : Y(t, e, s);\n}\nfunction Hl(i, t, e) {\n    const s = i.options.borderWidth, n = i.borderSkipped, o = kn(s);\n    return {\n        t: bt(n.top, o.top, 0, e),\n        r: bt(n.right, o.right, 0, t),\n        b: bt(n.bottom, o.bottom, 0, e),\n        l: bt(n.left, o.left, 0, t)\n    };\n}\nfunction jl(i, t, e) {\n    const { enableBorderRadius: s } = i.getProps([\n        \"enableBorderRadius\"\n    ]), n = i.options.borderRadius, o = Dt(n), r = Math.min(t, e), a = i.borderSkipped, l = s || D(n);\n    return {\n        topLeft: bt(!l || a.top || a.left, o.topLeft, 0, r),\n        topRight: bt(!l || a.top || a.right, o.topRight, 0, r),\n        bottomLeft: bt(!l || a.bottom || a.left, o.bottomLeft, 0, r),\n        bottomRight: bt(!l || a.bottom || a.right, o.bottomRight, 0, r)\n    };\n}\nfunction $l(i) {\n    const t = no(i), e = t.right - t.left, s = t.bottom - t.top, n = Hl(i, e / 2, s / 2), o = jl(i, e / 2, s / 2);\n    return {\n        outer: {\n            x: t.left,\n            y: t.top,\n            w: e,\n            h: s,\n            radius: o\n        },\n        inner: {\n            x: t.left + n.l,\n            y: t.top + n.t,\n            w: e - n.l - n.r,\n            h: s - n.t - n.b,\n            radius: {\n                topLeft: Math.max(0, o.topLeft - Math.max(n.t, n.l)),\n                topRight: Math.max(0, o.topRight - Math.max(n.t, n.r)),\n                bottomLeft: Math.max(0, o.bottomLeft - Math.max(n.b, n.l)),\n                bottomRight: Math.max(0, o.bottomRight - Math.max(n.b, n.r))\n            }\n        }\n    };\n}\nfunction gi(i, t, e, s) {\n    const n = t === null, o = e === null, a = i && !(n && o) && no(i, s);\n    return a && (n || ut(t, a.left, a.right)) && (o || ut(e, a.top, a.bottom));\n}\nfunction Yl(i) {\n    return i.topLeft || i.topRight || i.bottomLeft || i.bottomRight;\n}\nfunction Xl(i, t) {\n    i.rect(t.x, t.y, t.w, t.h);\n}\nfunction pi(i, t, e = {}) {\n    const s = i.x !== e.x ? -t : 0, n = i.y !== e.y ? -t : 0, o = (i.x + i.w !== e.x + e.w ? t : 0) - s, r = (i.y + i.h !== e.y + e.h ? t : 0) - n;\n    return {\n        x: i.x + s,\n        y: i.y + n,\n        w: i.w + o,\n        h: i.h + r,\n        radius: i.radius\n    };\n}\nclass Me extends st {\n    constructor(t){\n        super(), this.options = void 0, this.horizontal = void 0, this.base = void 0, this.width = void 0, this.height = void 0, this.inflateAmount = void 0, t && Object.assign(this, t);\n    }\n    draw(t) {\n        const { inflateAmount: e, options: { borderColor: s, backgroundColor: n } } = this, { inner: o, outer: r } = $l(this), a = Yl(r.radius) ? ae : Xl;\n        t.save(), (r.w !== o.w || r.h !== o.h) && (t.beginPath(), a(t, pi(r, e, o)), t.clip(), a(t, pi(o, -e, r)), t.fillStyle = s, t.fill(\"evenodd\")), t.beginPath(), a(t, pi(o, e)), t.fillStyle = n, t.fill(), t.restore();\n    }\n    inRange(t, e, s) {\n        return gi(this, t, e, s);\n    }\n    inXRange(t, e) {\n        return gi(this, t, null, e);\n    }\n    inYRange(t, e) {\n        return gi(this, null, t, e);\n    }\n    getCenterPoint(t) {\n        const { x: e, y: s, base: n, horizontal: o } = this.getProps([\n            \"x\",\n            \"y\",\n            \"base\",\n            \"horizontal\"\n        ], t);\n        return {\n            x: o ? (e + n) / 2 : e,\n            y: o ? s : (s + n) / 2\n        };\n    }\n    getRange(t) {\n        return t === \"x\" ? this.width / 2 : this.height / 2;\n    }\n}\nMe.id = \"bar\";\nMe.defaults = {\n    borderSkipped: \"start\",\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: \"auto\",\n    pointStyle: void 0\n};\nMe.defaultRoutes = {\n    backgroundColor: \"backgroundColor\",\n    borderColor: \"borderColor\"\n};\nvar oo = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    ArcElement: ye,\n    LineElement: gt,\n    PointElement: ve,\n    BarElement: Me\n});\nfunction Ul(i, t, e, s, n) {\n    const o = n.samples || s;\n    if (o >= e) return i.slice(t, t + e);\n    const r = [], a = (e - 2) / (o - 2);\n    let l = 0;\n    const c = t + e - 1;\n    let h = t, d, u, f, g, p;\n    for(r[l++] = i[h], d = 0; d < o - 2; d++){\n        let m = 0, b = 0, x;\n        const v = Math.floor((d + 1) * a) + 1 + t, y = Math.min(Math.floor((d + 2) * a) + 1, e) + t, _ = y - v;\n        for(x = v; x < y; x++)m += i[x].x, b += i[x].y;\n        m /= _, b /= _;\n        const M = Math.floor(d * a) + 1 + t, k = Math.min(Math.floor((d + 1) * a) + 1, e) + t, { x: S, y: w } = i[h];\n        for(f = g = -1, x = M; x < k; x++)g = 0.5 * Math.abs((S - m) * (i[x].y - w) - (S - i[x].x) * (b - w)), g > f && (f = g, u = i[x], p = x);\n        r[l++] = u, h = p;\n    }\n    return r[l++] = i[c], r;\n}\nfunction Kl(i, t, e, s) {\n    let n = 0, o = 0, r, a, l, c, h, d, u, f, g, p;\n    const m = [], b = t + e - 1, x = i[t].x, y = i[b].x - x;\n    for(r = t; r < t + e; ++r){\n        a = i[r], l = (a.x - x) / y * s, c = a.y;\n        const _ = l | 0;\n        if (_ === h) c < g ? (g = c, d = r) : c > p && (p = c, u = r), n = (o * n + a.x) / ++o;\n        else {\n            const M = r - 1;\n            if (!T(d) && !T(u)) {\n                const k = Math.min(d, u), S = Math.max(d, u);\n                k !== f && k !== M && m.push({\n                    ...i[k],\n                    x: n\n                }), S !== f && S !== M && m.push({\n                    ...i[S],\n                    x: n\n                });\n            }\n            r > 0 && M !== f && m.push(i[M]), m.push(a), h = _, o = 0, g = p = c, d = u = f = r;\n        }\n    }\n    return m;\n}\nfunction ro(i) {\n    if (i._decimated) {\n        const t = i._data;\n        delete i._decimated, delete i._data, Object.defineProperty(i, \"data\", {\n            value: t\n        });\n    }\n}\nfunction Ws(i) {\n    i.data.datasets.forEach((t)=>{\n        ro(t);\n    });\n}\nfunction ql(i, t) {\n    const e = t.length;\n    let s = 0, n;\n    const { iScale: o } = i, { min: r, max: a, minDefined: l, maxDefined: c } = o.getUserBounds();\n    return l && (s = Y(ft(t, o.axis, r).lo, 0, e - 1)), c ? n = Y(ft(t, o.axis, a).hi + 1, s, e) - s : n = e - s, {\n        start: s,\n        count: n\n    };\n}\nvar ao = {\n    id: \"decimation\",\n    defaults: {\n        algorithm: \"min-max\",\n        enabled: !1\n    },\n    beforeElementsUpdate: (i, t, e)=>{\n        if (!e.enabled) {\n            Ws(i);\n            return;\n        }\n        const s = i.width;\n        i.data.datasets.forEach((n, o)=>{\n            const { _data: r, indexAxis: a } = n, l = i.getDatasetMeta(o), c = r || n.data;\n            if (Zt([\n                a,\n                i.options.indexAxis\n            ]) === \"y\" || !l.controller.supportsDecimation) return;\n            const h = i.scales[l.xAxisID];\n            if (h.type !== \"linear\" && h.type !== \"time\" || i.options.parsing) return;\n            let { start: d, count: u } = ql(l, c);\n            const f = e.threshold || 4 * s;\n            if (u <= f) {\n                ro(n);\n                return;\n            }\n            T(r) && (n._data = c, delete n.data, Object.defineProperty(n, \"data\", {\n                configurable: !0,\n                enumerable: !0,\n                get: function() {\n                    return this._decimated;\n                },\n                set: function(p) {\n                    this._data = p;\n                }\n            }));\n            let g;\n            switch(e.algorithm){\n                case \"lttb\":\n                    g = Ul(c, d, u, s, e);\n                    break;\n                case \"min-max\":\n                    g = Kl(c, d, u, s);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${e.algorithm}'`);\n            }\n            n._decimated = g;\n        });\n    },\n    destroy (i) {\n        Ws(i);\n    }\n};\nfunction Gl(i, t, e) {\n    const s = i.segments, n = i.points, o = t.points, r = [];\n    for (const a of s){\n        let { start: l, end: c } = a;\n        c = $i(l, c, n);\n        const h = Pi(e, n[l], n[c], a.loop);\n        if (!t.segments) {\n            r.push({\n                source: a,\n                target: h,\n                start: n[l],\n                end: n[c]\n            });\n            continue;\n        }\n        const d = Fn(t, h);\n        for (const u of d){\n            const f = Pi(e, o[u.start], o[u.end], u.loop), g = En(a, n, f);\n            for (const p of g)r.push({\n                source: p,\n                target: u,\n                start: {\n                    [e]: Ns(h, f, \"start\", Math.max)\n                },\n                end: {\n                    [e]: Ns(h, f, \"end\", Math.min)\n                }\n            });\n        }\n    }\n    return r;\n}\nfunction Pi(i, t, e, s) {\n    if (s) return;\n    let n = t[i], o = e[i];\n    return i === \"angle\" && (n = Z(n), o = Z(o)), {\n        property: i,\n        start: n,\n        end: o\n    };\n}\nfunction Zl(i, t) {\n    const { x: e = null, y: s = null } = i || {}, n = t.points, o = [];\n    return t.segments.forEach(({ start: r, end: a })=>{\n        a = $i(r, a, n);\n        const l = n[r], c = n[a];\n        s !== null ? (o.push({\n            x: l.x,\n            y: s\n        }), o.push({\n            x: c.x,\n            y: s\n        })) : e !== null && (o.push({\n            x: e,\n            y: l.y\n        }), o.push({\n            x: e,\n            y: c.y\n        }));\n    }), o;\n}\nfunction $i(i, t, e) {\n    for(; t > i; t--){\n        const s = e[t];\n        if (!isNaN(s.x) && !isNaN(s.y)) break;\n    }\n    return t;\n}\nfunction Ns(i, t, e, s) {\n    return i && t ? s(i[e], t[e]) : i ? i[e] : t ? t[e] : 0;\n}\nfunction lo(i, t) {\n    let e = [], s = !1;\n    return z(i) ? (s = !0, e = i) : e = Zl(i, t), e.length ? new gt({\n        points: e,\n        options: {\n            tension: 0\n        },\n        _loop: s,\n        _fullLoop: s\n    }) : null;\n}\nfunction Hs(i) {\n    return i && i.fill !== !1;\n}\nfunction Jl(i, t, e) {\n    let n = i[t].fill;\n    const o = [\n        t\n    ];\n    let r;\n    if (!e) return n;\n    for(; n !== !1 && o.indexOf(n) === -1;){\n        if (!N(n)) return n;\n        if (r = i[n], !r) return !1;\n        if (r.visible) return n;\n        o.push(n), n = r.fill;\n    }\n    return !1;\n}\nfunction Ql(i, t, e) {\n    const s = sc(i);\n    if (D(s)) return isNaN(s.value) ? !1 : s;\n    let n = parseFloat(s);\n    return N(n) && Math.floor(n) === n ? tc(s[0], t, n, e) : [\n        \"origin\",\n        \"start\",\n        \"end\",\n        \"stack\",\n        \"shape\"\n    ].indexOf(s) >= 0 && s;\n}\nfunction tc(i, t, e, s) {\n    return (i === \"-\" || i === \"+\") && (e = t + e), e === t || e < 0 || e >= s ? !1 : e;\n}\nfunction ec(i, t) {\n    let e = null;\n    return i === \"start\" ? e = t.bottom : i === \"end\" ? e = t.top : D(i) ? e = t.getPixelForValue(i.value) : t.getBasePixel && (e = t.getBasePixel()), e;\n}\nfunction ic(i, t, e) {\n    let s;\n    return i === \"start\" ? s = e : i === \"end\" ? s = t.options.reverse ? t.min : t.max : D(i) ? s = i.value : s = t.getBaseValue(), s;\n}\nfunction sc(i) {\n    const t = i.options, e = t.fill;\n    let s = C(e && e.target, e);\n    return s === void 0 && (s = !!t.backgroundColor), s === !1 || s === null ? !1 : s === !0 ? \"origin\" : s;\n}\nfunction nc(i) {\n    const { scale: t, index: e, line: s } = i, n = [], o = s.segments, r = s.points, a = oc(t, e);\n    a.push(lo({\n        x: null,\n        y: t.bottom\n    }, s));\n    for(let l = 0; l < o.length; l++){\n        const c = o[l];\n        for(let h = c.start; h <= c.end; h++)rc(n, r[h], a);\n    }\n    return new gt({\n        points: n,\n        options: {}\n    });\n}\nfunction oc(i, t) {\n    const e = [], s = i.getMatchingVisibleMetas(\"line\");\n    for(let n = 0; n < s.length; n++){\n        const o = s[n];\n        if (o.index === t) break;\n        o.hidden || e.unshift(o.dataset);\n    }\n    return e;\n}\nfunction rc(i, t, e) {\n    const s = [];\n    for(let n = 0; n < e.length; n++){\n        const o = e[n], { first: r, last: a, point: l } = ac(o, t, \"x\");\n        if (!(!l || r && a)) {\n            if (r) s.unshift(l);\n            else if (i.push(l), !a) break;\n        }\n    }\n    i.push(...s);\n}\nfunction ac(i, t, e) {\n    const s = i.interpolate(t, e);\n    if (!s) return {};\n    const n = s[e], o = i.segments, r = i.points;\n    let a = !1, l = !1;\n    for(let c = 0; c < o.length; c++){\n        const h = o[c], d = r[h.start][e], u = r[h.end][e];\n        if (ut(n, d, u)) {\n            a = n === d, l = n === u;\n            break;\n        }\n    }\n    return {\n        first: a,\n        last: l,\n        point: s\n    };\n}\nclass co {\n    constructor(t){\n        this.x = t.x, this.y = t.y, this.radius = t.radius;\n    }\n    pathSegment(t, e, s) {\n        const { x: n, y: o, radius: r } = this;\n        return e = e || {\n            start: 0,\n            end: F\n        }, t.arc(n, o, r, e.end, e.start, !0), !s.bounds;\n    }\n    interpolate(t) {\n        const { x: e, y: s, radius: n } = this, o = t.angle;\n        return {\n            x: e + Math.cos(o) * n,\n            y: s + Math.sin(o) * n,\n            angle: o\n        };\n    }\n}\nfunction lc(i) {\n    const { chart: t, fill: e, line: s } = i;\n    if (N(e)) return cc(t, e);\n    if (e === \"stack\") return nc(i);\n    if (e === \"shape\") return !0;\n    const n = hc(i);\n    return n instanceof co ? n : lo(n, s);\n}\nfunction cc(i, t) {\n    const e = i.getDatasetMeta(t);\n    return e && i.isDatasetVisible(t) ? e.dataset : null;\n}\nfunction hc(i) {\n    return (i.scale || {}).getPointPositionForValue ? uc(i) : dc(i);\n}\nfunction dc(i) {\n    const { scale: t = {}, fill: e } = i, s = ec(e, t);\n    if (N(s)) {\n        const n = t.isHorizontal();\n        return {\n            x: n ? s : null,\n            y: n ? null : s\n        };\n    }\n    return null;\n}\nfunction uc(i) {\n    const { scale: t, fill: e } = i, s = t.options, n = t.getLabels().length, o = s.reverse ? t.max : t.min, r = ic(e, t, o), a = [];\n    if (s.grid.circular) {\n        const l = t.getPointPositionForValue(0, o);\n        return new co({\n            x: l.x,\n            y: l.y,\n            radius: t.getDistanceFromCenterForValue(r)\n        });\n    }\n    for(let l = 0; l < n; ++l)a.push(t.getPointPositionForValue(l, r));\n    return a;\n}\nfunction mi(i, t, e) {\n    const s = lc(t), { line: n, scale: o, axis: r } = t, a = n.options, l = a.fill, c = a.backgroundColor, { above: h = c, below: d = c } = l || {};\n    s && n.points.length && (Xe(i, e), fc(i, {\n        line: n,\n        target: s,\n        above: h,\n        below: d,\n        area: e,\n        scale: o,\n        axis: r\n    }), Ue(i));\n}\nfunction fc(i, t) {\n    const { line: e, target: s, above: n, below: o, area: r, scale: a } = t, l = e._loop ? \"angle\" : t.axis;\n    i.save(), l === \"x\" && o !== n && (js(i, s, r.top), $s(i, {\n        line: e,\n        target: s,\n        color: n,\n        scale: a,\n        property: l\n    }), i.restore(), i.save(), js(i, s, r.bottom)), $s(i, {\n        line: e,\n        target: s,\n        color: o,\n        scale: a,\n        property: l\n    }), i.restore();\n}\nfunction js(i, t, e) {\n    const { segments: s, points: n } = t;\n    let o = !0, r = !1;\n    i.beginPath();\n    for (const a of s){\n        const { start: l, end: c } = a, h = n[l], d = n[$i(l, c, n)];\n        o ? (i.moveTo(h.x, h.y), o = !1) : (i.lineTo(h.x, e), i.lineTo(h.x, h.y)), r = !!t.pathSegment(i, a, {\n            move: r\n        }), r ? i.closePath() : i.lineTo(d.x, e);\n    }\n    i.lineTo(t.first().x, e), i.closePath(), i.clip();\n}\nfunction $s(i, t) {\n    const { line: e, target: s, property: n, color: o, scale: r } = t, a = Gl(e, s, n);\n    for (const { source: l, target: c, start: h, end: d } of a){\n        const { style: { backgroundColor: u = o } = {} } = l, f = s !== !0;\n        i.save(), i.fillStyle = u, gc(i, r, f && Pi(n, h, d)), i.beginPath();\n        const g = !!e.pathSegment(i, l);\n        let p;\n        if (f) {\n            g ? i.closePath() : Ys(i, s, d, n);\n            const m = !!s.pathSegment(i, c, {\n                move: g,\n                reverse: !0\n            });\n            p = g && m, p || Ys(i, s, h, n);\n        }\n        i.closePath(), i.fill(p ? \"evenodd\" : \"nonzero\"), i.restore();\n    }\n}\nfunction gc(i, t, e) {\n    const { top: s, bottom: n } = t.chart.chartArea, { property: o, start: r, end: a } = e || {};\n    o === \"x\" && (i.beginPath(), i.rect(r, s, a - r, n - s), i.clip());\n}\nfunction Ys(i, t, e, s) {\n    const n = t.interpolate(e, s);\n    n && i.lineTo(n.x, n.y);\n}\nvar ho = {\n    id: \"filler\",\n    afterDatasetsUpdate (i, t, e) {\n        const s = (i.data.datasets || []).length, n = [];\n        let o, r, a, l;\n        for(r = 0; r < s; ++r)o = i.getDatasetMeta(r), a = o.dataset, l = null, a && a.options && a instanceof gt && (l = {\n            visible: i.isDatasetVisible(r),\n            index: r,\n            fill: Ql(a, r, s),\n            chart: i,\n            axis: o.controller.options.indexAxis,\n            scale: o.vScale,\n            line: a\n        }), o.$filler = l, n.push(l);\n        for(r = 0; r < s; ++r)l = n[r], !(!l || l.fill === !1) && (l.fill = Jl(n, r, e.propagate));\n    },\n    beforeDraw (i, t, e) {\n        const s = e.drawTime === \"beforeDraw\", n = i.getSortedVisibleDatasetMetas(), o = i.chartArea;\n        for(let r = n.length - 1; r >= 0; --r){\n            const a = n[r].$filler;\n            a && (a.line.updateControlPoints(o, a.axis), s && a.fill && mi(i.ctx, a, o));\n        }\n    },\n    beforeDatasetsDraw (i, t, e) {\n        if (e.drawTime !== \"beforeDatasetsDraw\") return;\n        const s = i.getSortedVisibleDatasetMetas();\n        for(let n = s.length - 1; n >= 0; --n){\n            const o = s[n].$filler;\n            Hs(o) && mi(i.ctx, o, i.chartArea);\n        }\n    },\n    beforeDatasetDraw (i, t, e) {\n        const s = t.meta.$filler;\n        !Hs(s) || e.drawTime !== \"beforeDatasetDraw\" || mi(i.ctx, s, i.chartArea);\n    },\n    defaults: {\n        propagate: !0,\n        drawTime: \"beforeDatasetDraw\"\n    }\n};\nconst Xs = (i, t)=>{\n    let { boxHeight: e = t, boxWidth: s = t } = i;\n    return i.usePointStyle && (e = Math.min(e, t), s = i.pointStyleWidth || Math.min(s, t)), {\n        boxWidth: s,\n        boxHeight: e,\n        itemHeight: Math.max(t, e)\n    };\n}, pc = (i, t)=>i !== null && t !== null && i.datasetIndex === t.datasetIndex && i.index === t.index;\nclass Us extends st {\n    constructor(t){\n        super(), this._added = !1, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1, this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this.legendItems = void 0, this.columnSizes = void 0, this.lineWidths = void 0, this.maxHeight = void 0, this.maxWidth = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.height = void 0, this.width = void 0, this._margins = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;\n    }\n    update(t, e, s) {\n        this.maxWidth = t, this.maxHeight = e, this._margins = s, this.setDimensions(), this.buildLabels(), this.fit();\n    }\n    setDimensions() {\n        this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);\n    }\n    buildLabels() {\n        const t = this.options.labels || {};\n        let e = I(t.generateLabels, [\n            this.chart\n        ], this) || [];\n        t.filter && (e = e.filter((s)=>t.filter(s, this.chart.data))), t.sort && (e = e.sort((s, n)=>t.sort(s, n, this.chart.data))), this.options.reverse && e.reverse(), this.legendItems = e;\n    }\n    fit() {\n        const { options: t, ctx: e } = this;\n        if (!t.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const s = t.labels, n = $(s.font), o = n.size, r = this._computeTitleHeight(), { boxWidth: a, itemHeight: l } = Xs(s, o);\n        let c, h;\n        e.font = n.string, this.isHorizontal() ? (c = this.maxWidth, h = this._fitRows(r, o, a, l) + 10) : (h = this.maxHeight, c = this._fitCols(r, o, a, l) + 10), this.width = Math.min(c, t.maxWidth || this.maxWidth), this.height = Math.min(h, t.maxHeight || this.maxHeight);\n    }\n    _fitRows(t, e, s, n) {\n        const { ctx: o, maxWidth: r, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c = this.lineWidths = [\n            0\n        ], h = n + a;\n        let d = t;\n        o.textAlign = \"left\", o.textBaseline = \"middle\";\n        let u = -1, f = -h;\n        return this.legendItems.forEach((g, p)=>{\n            const m = s + e / 2 + o.measureText(g.text).width;\n            (p === 0 || c[c.length - 1] + m + 2 * a > r) && (d += h, c[c.length - (p > 0 ? 0 : 1)] = 0, f += h, u++), l[p] = {\n                left: 0,\n                top: f,\n                row: u,\n                width: m,\n                height: n\n            }, c[c.length - 1] += m + a;\n        }), d;\n    }\n    _fitCols(t, e, s, n) {\n        const { ctx: o, maxHeight: r, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c = this.columnSizes = [], h = r - t;\n        let d = a, u = 0, f = 0, g = 0, p = 0;\n        return this.legendItems.forEach((m, b)=>{\n            const x = s + e / 2 + o.measureText(m.text).width;\n            b > 0 && f + n + 2 * a > h && (d += u + a, c.push({\n                width: u,\n                height: f\n            }), g += u + a, p++, u = f = 0), l[b] = {\n                left: g,\n                top: f,\n                col: p,\n                width: x,\n                height: n\n            }, u = Math.max(u, x), f += n + a;\n        }), d += u, c.push({\n            width: u,\n            height: f\n        }), d;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) return;\n        const t = this._computeTitleHeight(), { legendHitBoxes: e, options: { align: s, labels: { padding: n }, rtl: o } } = this, r = zt(o, this.left, this.width);\n        if (this.isHorizontal()) {\n            let a = 0, l = U(s, this.left + n, this.right - this.lineWidths[a]);\n            for (const c of e)a !== c.row && (a = c.row, l = U(s, this.left + n, this.right - this.lineWidths[a])), c.top += this.top + t + n, c.left = r.leftForLtr(r.x(l), c.width), l += c.width + n;\n        } else {\n            let a = 0, l = U(s, this.top + t + n, this.bottom - this.columnSizes[a].height);\n            for (const c of e)c.col !== a && (a = c.col, l = U(s, this.top + t + n, this.bottom - this.columnSizes[a].height)), c.top = l, c.left += this.left + n, c.left = r.leftForLtr(r.x(c.left), c.width), l += c.height + n;\n        }\n    }\n    isHorizontal() {\n        return this.options.position === \"top\" || this.options.position === \"bottom\";\n    }\n    draw() {\n        if (this.options.display) {\n            const t = this.ctx;\n            Xe(t, this), this._draw(), Ue(t);\n        }\n    }\n    _draw() {\n        const { options: t, columnSizes: e, lineWidths: s, ctx: n } = this, { align: o, labels: r } = t, a = O.color, l = zt(t.rtl, this.left, this.width), c = $(r.font), { color: h, padding: d } = r, u = c.size, f = u / 2;\n        let g;\n        this.drawTitle(), n.textAlign = l.textAlign(\"left\"), n.textBaseline = \"middle\", n.lineWidth = 0.5, n.font = c.string;\n        const { boxWidth: p, boxHeight: m, itemHeight: b } = Xs(r, u), x = function(k, S, w) {\n            if (isNaN(p) || p <= 0 || isNaN(m) || m < 0) return;\n            n.save();\n            const L = C(w.lineWidth, 1);\n            if (n.fillStyle = C(w.fillStyle, a), n.lineCap = C(w.lineCap, \"butt\"), n.lineDashOffset = C(w.lineDashOffset, 0), n.lineJoin = C(w.lineJoin, \"miter\"), n.lineWidth = L, n.strokeStyle = C(w.strokeStyle, a), n.setLineDash(C(w.lineDash, [])), r.usePointStyle) {\n                const R = {\n                    radius: m * Math.SQRT2 / 2,\n                    pointStyle: w.pointStyle,\n                    rotation: w.rotation,\n                    borderWidth: L\n                }, A = l.xPlus(k, p / 2), H = S + f;\n                Mn(n, R, A, H, r.pointStyleWidth && p);\n            } else {\n                const R = S + Math.max((u - m) / 2, 0), A = l.leftForLtr(k, p), H = Dt(w.borderRadius);\n                n.beginPath(), Object.values(H).some((q)=>q !== 0) ? ae(n, {\n                    x: A,\n                    y: R,\n                    w: p,\n                    h: m,\n                    radius: H\n                }) : n.rect(A, R, p, m), n.fill(), L !== 0 && n.stroke();\n            }\n            n.restore();\n        }, v = function(k, S, w) {\n            Tt(n, w.text, k, S + b / 2, c, {\n                strikethrough: w.hidden,\n                textAlign: l.textAlign(w.textAlign)\n            });\n        }, y = this.isHorizontal(), _ = this._computeTitleHeight();\n        y ? g = {\n            x: U(o, this.left + d, this.right - s[0]),\n            y: this.top + d + _,\n            line: 0\n        } : g = {\n            x: this.left + d,\n            y: U(o, this.top + _ + d, this.bottom - e[0].height),\n            line: 0\n        }, Tn(this.ctx, t.textDirection);\n        const M = b + d;\n        this.legendItems.forEach((k, S)=>{\n            n.strokeStyle = k.fontColor || h, n.fillStyle = k.fontColor || h;\n            const w = n.measureText(k.text).width, L = l.textAlign(k.textAlign || (k.textAlign = r.textAlign)), R = p + f + w;\n            let A = g.x, H = g.y;\n            l.setWidth(this.width), y ? S > 0 && A + R + d > this.right && (H = g.y += M, g.line++, A = g.x = U(o, this.left + d, this.right - s[g.line])) : S > 0 && H + M > this.bottom && (A = g.x = A + e[g.line].width + d, g.line++, H = g.y = U(o, this.top + _ + d, this.bottom - e[g.line].height));\n            const q = l.x(A);\n            x(q, H, k), A = Io(L, A + p + f, y ? A + R : this.right, t.rtl), v(l.x(A), H, k), y ? g.x += R + d : g.y += M;\n        }), Ln(this.ctx, t.textDirection);\n    }\n    drawTitle() {\n        const t = this.options, e = t.title, s = $(e.font), n = K(e.padding);\n        if (!e.display) return;\n        const o = zt(t.rtl, this.left, this.width), r = this.ctx, a = e.position, l = s.size / 2, c = n.top + l;\n        let h, d = this.left, u = this.width;\n        if (this.isHorizontal()) u = Math.max(...this.lineWidths), h = this.top + c, d = U(t.align, d, this.right - u);\n        else {\n            const g = this.columnSizes.reduce((p, m)=>Math.max(p, m.height), 0);\n            h = c + U(t.align, this.top, this.bottom - g - t.labels.padding - this._computeTitleHeight());\n        }\n        const f = U(a, d, d + u);\n        r.textAlign = o.textAlign(Li(a)), r.textBaseline = \"middle\", r.strokeStyle = e.color, r.fillStyle = e.color, r.font = s.string, Tt(r, e.text, f, h, s);\n    }\n    _computeTitleHeight() {\n        const t = this.options.title, e = $(t.font), s = K(t.padding);\n        return t.display ? e.lineHeight + s.height : 0;\n    }\n    _getLegendItemAt(t, e) {\n        let s, n, o;\n        if (ut(t, this.left, this.right) && ut(e, this.top, this.bottom)) {\n            for(o = this.legendHitBoxes, s = 0; s < o.length; ++s)if (n = o[s], ut(t, n.left, n.left + n.width) && ut(e, n.top, n.top + n.height)) return this.legendItems[s];\n        }\n        return null;\n    }\n    handleEvent(t) {\n        const e = this.options;\n        if (!mc(t.type, e)) return;\n        const s = this._getLegendItemAt(t.x, t.y);\n        if (t.type === \"mousemove\" || t.type === \"mouseout\") {\n            const n = this._hoveredItem, o = pc(n, s);\n            n && !o && I(e.onLeave, [\n                t,\n                n,\n                this\n            ], this), this._hoveredItem = s, s && !o && I(e.onHover, [\n                t,\n                s,\n                this\n            ], this);\n        } else s && I(e.onClick, [\n            t,\n            s,\n            this\n        ], this);\n    }\n}\nfunction mc(i, t) {\n    return !!((i === \"mousemove\" || i === \"mouseout\") && (t.onHover || t.onLeave) || t.onClick && (i === \"click\" || i === \"mouseup\"));\n}\nvar uo = {\n    id: \"legend\",\n    _element: Us,\n    start (i, t, e) {\n        const s = i.legend = new Us({\n            ctx: i.ctx,\n            options: e,\n            chart: i\n        });\n        X.configure(i, s, e), X.addBox(i, s);\n    },\n    stop (i) {\n        X.removeBox(i, i.legend), delete i.legend;\n    },\n    beforeUpdate (i, t, e) {\n        const s = i.legend;\n        X.configure(i, s, e), s.options = e;\n    },\n    afterUpdate (i) {\n        const t = i.legend;\n        t.buildLabels(), t.adjustHitBoxes();\n    },\n    afterEvent (i, t) {\n        t.replay || i.legend.handleEvent(t.event);\n    },\n    defaults: {\n        display: !0,\n        position: \"top\",\n        align: \"center\",\n        fullSize: !0,\n        reverse: !1,\n        weight: 1e3,\n        onClick (i, t, e) {\n            const s = t.datasetIndex, n = e.chart;\n            n.isDatasetVisible(s) ? (n.hide(s), t.hidden = !0) : (n.show(s), t.hidden = !1);\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (i)=>i.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (i) {\n                const t = i.data.datasets, { labels: { usePointStyle: e, pointStyle: s, textAlign: n, color: o } } = i.legend.options;\n                return i._getSortedDatasetMetas().map((r)=>{\n                    const a = r.controller.getStyle(e ? 0 : void 0), l = K(a.borderWidth);\n                    return {\n                        text: t[r.index].label,\n                        fillStyle: a.backgroundColor,\n                        fontColor: o,\n                        hidden: !r.visible,\n                        lineCap: a.borderCapStyle,\n                        lineDash: a.borderDash,\n                        lineDashOffset: a.borderDashOffset,\n                        lineJoin: a.borderJoinStyle,\n                        lineWidth: (l.width + l.height) / 4,\n                        strokeStyle: a.borderColor,\n                        pointStyle: s || a.pointStyle,\n                        rotation: a.rotation,\n                        textAlign: n || a.textAlign,\n                        borderRadius: 0,\n                        datasetIndex: r.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (i)=>i.chart.options.color,\n            display: !1,\n            position: \"center\",\n            text: \"\"\n        }\n    },\n    descriptors: {\n        _scriptable: (i)=>!i.startsWith(\"on\"),\n        labels: {\n            _scriptable: (i)=>![\n                    \"generateLabels\",\n                    \"filter\",\n                    \"sort\"\n                ].includes(i)\n        }\n    }\n};\nclass Yi extends st {\n    constructor(t){\n        super(), this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this._padding = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;\n    }\n    update(t, e) {\n        const s = this.options;\n        if (this.left = 0, this.top = 0, !s.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = t, this.height = this.bottom = e;\n        const n = z(s.text) ? s.text.length : 1;\n        this._padding = K(s.padding);\n        const o = n * $(s.font).lineHeight + this._padding.height;\n        this.isHorizontal() ? this.height = o : this.width = o;\n    }\n    isHorizontal() {\n        const t = this.options.position;\n        return t === \"top\" || t === \"bottom\";\n    }\n    _drawArgs(t) {\n        const { top: e, left: s, bottom: n, right: o, options: r } = this, a = r.align;\n        let l = 0, c, h, d;\n        return this.isHorizontal() ? (h = U(a, s, o), d = e + t, c = o - s) : (r.position === \"left\" ? (h = s + t, d = U(a, n, e), l = B * -0.5) : (h = o - t, d = U(a, e, n), l = B * 0.5), c = n - e), {\n            titleX: h,\n            titleY: d,\n            maxWidth: c,\n            rotation: l\n        };\n    }\n    draw() {\n        const t = this.ctx, e = this.options;\n        if (!e.display) return;\n        const s = $(e.font), o = s.lineHeight / 2 + this._padding.top, { titleX: r, titleY: a, maxWidth: l, rotation: c } = this._drawArgs(o);\n        Tt(t, e.text, 0, 0, s, {\n            color: e.color,\n            maxWidth: l,\n            rotation: c,\n            textAlign: Li(e.align),\n            textBaseline: \"middle\",\n            translation: [\n                r,\n                a\n            ]\n        });\n    }\n}\nfunction bc(i, t) {\n    const e = new Yi({\n        ctx: i.ctx,\n        options: t,\n        chart: i\n    });\n    X.configure(i, e, t), X.addBox(i, e), i.titleBlock = e;\n}\nvar fo = {\n    id: \"title\",\n    _element: Yi,\n    start (i, t, e) {\n        bc(i, e);\n    },\n    stop (i) {\n        const t = i.titleBlock;\n        X.removeBox(i, t), delete i.titleBlock;\n    },\n    beforeUpdate (i, t, e) {\n        const s = i.titleBlock;\n        X.configure(i, s, e), s.options = e;\n    },\n    defaults: {\n        align: \"center\",\n        display: !1,\n        font: {\n            weight: \"bold\"\n        },\n        fullSize: !0,\n        padding: 10,\n        position: \"top\",\n        text: \"\",\n        weight: 2e3\n    },\n    defaultRoutes: {\n        color: \"color\"\n    },\n    descriptors: {\n        _scriptable: !0,\n        _indexable: !1\n    }\n};\nconst Re = /* @__PURE__ */ new WeakMap();\nvar go = {\n    id: \"subtitle\",\n    start (i, t, e) {\n        const s = new Yi({\n            ctx: i.ctx,\n            options: e,\n            chart: i\n        });\n        X.configure(i, s, e), X.addBox(i, s), Re.set(i, s);\n    },\n    stop (i) {\n        X.removeBox(i, Re.get(i)), Re.delete(i);\n    },\n    beforeUpdate (i, t, e) {\n        const s = Re.get(i);\n        X.configure(i, s, e), s.options = e;\n    },\n    defaults: {\n        align: \"center\",\n        display: !1,\n        font: {\n            weight: \"normal\"\n        },\n        fullSize: !0,\n        padding: 0,\n        position: \"top\",\n        text: \"\",\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: \"color\"\n    },\n    descriptors: {\n        _scriptable: !0,\n        _indexable: !1\n    }\n};\nconst se = {\n    average (i) {\n        if (!i.length) return !1;\n        let t, e, s = 0, n = 0, o = 0;\n        for(t = 0, e = i.length; t < e; ++t){\n            const r = i[t].element;\n            if (r && r.hasValue()) {\n                const a = r.tooltipPosition();\n                s += a.x, n += a.y, ++o;\n            }\n        }\n        return {\n            x: s / o,\n            y: n / o\n        };\n    },\n    nearest (i, t) {\n        if (!i.length) return !1;\n        let e = t.x, s = t.y, n = Number.POSITIVE_INFINITY, o, r, a;\n        for(o = 0, r = i.length; o < r; ++o){\n            const l = i[o].element;\n            if (l && l.hasValue()) {\n                const c = l.getCenterPoint(), h = bi(t, c);\n                h < n && (n = h, a = l);\n            }\n        }\n        if (a) {\n            const l = a.tooltipPosition();\n            e = l.x, s = l.y;\n        }\n        return {\n            x: e,\n            y: s\n        };\n    }\n};\nfunction rt(i, t) {\n    return t && (z(t) ? Array.prototype.push.apply(i, t) : i.push(t)), i;\n}\nfunction ht(i) {\n    return (typeof i == \"string\" || i instanceof String) && i.indexOf(`\n`) > -1 ? i.split(`\n`) : i;\n}\nfunction xc(i, t) {\n    const { element: e, datasetIndex: s, index: n } = t, o = i.getDatasetMeta(s).controller, { label: r, value: a } = o.getLabelAndValue(n);\n    return {\n        chart: i,\n        label: r,\n        parsed: o.getParsed(n),\n        raw: i.data.datasets[s].data[n],\n        formattedValue: a,\n        dataset: o.getDataset(),\n        dataIndex: n,\n        datasetIndex: s,\n        element: e\n    };\n}\nfunction Ks(i, t) {\n    const e = i.chart.ctx, { body: s, footer: n, title: o } = i, { boxWidth: r, boxHeight: a } = t, l = $(t.bodyFont), c = $(t.titleFont), h = $(t.footerFont), d = o.length, u = n.length, f = s.length, g = K(t.padding);\n    let p = g.height, m = 0, b = s.reduce((y, _)=>y + _.before.length + _.lines.length + _.after.length, 0);\n    if (b += i.beforeBody.length + i.afterBody.length, d && (p += d * c.lineHeight + (d - 1) * t.titleSpacing + t.titleMarginBottom), b) {\n        const y = t.displayColors ? Math.max(a, l.lineHeight) : l.lineHeight;\n        p += f * y + (b - f) * l.lineHeight + (b - 1) * t.bodySpacing;\n    }\n    u && (p += t.footerMarginTop + u * h.lineHeight + (u - 1) * t.footerSpacing);\n    let x = 0;\n    const v = function(y) {\n        m = Math.max(m, e.measureText(y).width + x);\n    };\n    return e.save(), e.font = c.string, E(i.title, v), e.font = l.string, E(i.beforeBody.concat(i.afterBody), v), x = t.displayColors ? r + 2 + t.boxPadding : 0, E(s, (y)=>{\n        E(y.before, v), E(y.lines, v), E(y.after, v);\n    }), x = 0, e.font = h.string, E(i.footer, v), e.restore(), m += g.width, {\n        width: m,\n        height: p\n    };\n}\nfunction _c(i, t) {\n    const { y: e, height: s } = t;\n    return e < s / 2 ? \"top\" : e > i.height - s / 2 ? \"bottom\" : \"center\";\n}\nfunction yc(i, t, e, s) {\n    const { x: n, width: o } = s, r = e.caretSize + e.caretPadding;\n    if (i === \"left\" && n + o + r > t.width || i === \"right\" && n - o - r < 0) return !0;\n}\nfunction vc(i, t, e, s) {\n    const { x: n, width: o } = e, { width: r, chartArea: { left: a, right: l } } = i;\n    let c = \"center\";\n    return s === \"center\" ? c = n <= (a + l) / 2 ? \"left\" : \"right\" : n <= o / 2 ? c = \"left\" : n >= r - o / 2 && (c = \"right\"), yc(c, i, t, e) && (c = \"center\"), c;\n}\nfunction qs(i, t, e) {\n    const s = e.yAlign || t.yAlign || _c(i, e);\n    return {\n        xAlign: e.xAlign || t.xAlign || vc(i, t, e, s),\n        yAlign: s\n    };\n}\nfunction Mc(i, t) {\n    let { x: e, width: s } = i;\n    return t === \"right\" ? e -= s : t === \"center\" && (e -= s / 2), e;\n}\nfunction kc(i, t, e) {\n    let { y: s, height: n } = i;\n    return t === \"top\" ? s += e : t === \"bottom\" ? s -= n + e : s -= n / 2, s;\n}\nfunction Gs(i, t, e, s) {\n    const { caretSize: n, caretPadding: o, cornerRadius: r } = i, { xAlign: a, yAlign: l } = e, c = n + o, { topLeft: h, topRight: d, bottomLeft: u, bottomRight: f } = Dt(r);\n    let g = Mc(t, a);\n    const p = kc(t, l, c);\n    return l === \"center\" ? a === \"left\" ? g += c : a === \"right\" && (g -= c) : a === \"left\" ? g -= Math.max(h, u) + n : a === \"right\" && (g += Math.max(d, f) + n), {\n        x: Y(g, 0, s.width - t.width),\n        y: Y(p, 0, s.height - t.height)\n    };\n}\nfunction Ee(i, t, e) {\n    const s = K(e.padding);\n    return t === \"center\" ? i.x + i.width / 2 : t === \"right\" ? i.x + i.width - s.right : i.x + s.left;\n}\nfunction Zs(i) {\n    return rt([], ht(i));\n}\nfunction wc(i, t, e) {\n    return vt(i, {\n        tooltip: t,\n        tooltipItems: e,\n        type: \"tooltip\"\n    });\n}\nfunction Js(i, t) {\n    const e = t && t.dataset && t.dataset.tooltip && t.dataset.tooltip.callbacks;\n    return e ? i.override(e) : i;\n}\nclass Ci extends st {\n    constructor(t){\n        super(), this.opacity = 0, this._active = [], this._eventPosition = void 0, this._size = void 0, this._cachedAnimations = void 0, this._tooltipItems = [], this.$animations = void 0, this.$context = void 0, this.chart = t.chart || t._chart, this._chart = this.chart, this.options = t.options, this.dataPoints = void 0, this.title = void 0, this.beforeBody = void 0, this.body = void 0, this.afterBody = void 0, this.footer = void 0, this.xAlign = void 0, this.yAlign = void 0, this.x = void 0, this.y = void 0, this.height = void 0, this.width = void 0, this.caretX = void 0, this.caretY = void 0, this.labelColors = void 0, this.labelPointStyles = void 0, this.labelTextColors = void 0;\n    }\n    initialize(t) {\n        this.options = t, this._cachedAnimations = void 0, this.$context = void 0;\n    }\n    _resolveAnimations() {\n        const t = this._cachedAnimations;\n        if (t) return t;\n        const e = this.chart, s = this.options.setContext(this.getContext()), n = s.enabled && e.options.animation && s.animations, o = new Ni(this.chart, n);\n        return n._cacheable && (this._cachedAnimations = Object.freeze(o)), o;\n    }\n    getContext() {\n        return this.$context || (this.$context = wc(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(t, e) {\n        const { callbacks: s } = e, n = s.beforeTitle.apply(this, [\n            t\n        ]), o = s.title.apply(this, [\n            t\n        ]), r = s.afterTitle.apply(this, [\n            t\n        ]);\n        let a = [];\n        return a = rt(a, ht(n)), a = rt(a, ht(o)), a = rt(a, ht(r)), a;\n    }\n    getBeforeBody(t, e) {\n        return Zs(e.callbacks.beforeBody.apply(this, [\n            t\n        ]));\n    }\n    getBody(t, e) {\n        const { callbacks: s } = e, n = [];\n        return E(t, (o)=>{\n            const r = {\n                before: [],\n                lines: [],\n                after: []\n            }, a = Js(s, o);\n            rt(r.before, ht(a.beforeLabel.call(this, o))), rt(r.lines, a.label.call(this, o)), rt(r.after, ht(a.afterLabel.call(this, o))), n.push(r);\n        }), n;\n    }\n    getAfterBody(t, e) {\n        return Zs(e.callbacks.afterBody.apply(this, [\n            t\n        ]));\n    }\n    getFooter(t, e) {\n        const { callbacks: s } = e, n = s.beforeFooter.apply(this, [\n            t\n        ]), o = s.footer.apply(this, [\n            t\n        ]), r = s.afterFooter.apply(this, [\n            t\n        ]);\n        let a = [];\n        return a = rt(a, ht(n)), a = rt(a, ht(o)), a = rt(a, ht(r)), a;\n    }\n    _createItems(t) {\n        const e = this._active, s = this.chart.data, n = [], o = [], r = [];\n        let a = [], l, c;\n        for(l = 0, c = e.length; l < c; ++l)a.push(xc(this.chart, e[l]));\n        return t.filter && (a = a.filter((h, d, u)=>t.filter(h, d, u, s))), t.itemSort && (a = a.sort((h, d)=>t.itemSort(h, d, s))), E(a, (h)=>{\n            const d = Js(t.callbacks, h);\n            n.push(d.labelColor.call(this, h)), o.push(d.labelPointStyle.call(this, h)), r.push(d.labelTextColor.call(this, h));\n        }), this.labelColors = n, this.labelPointStyles = o, this.labelTextColors = r, this.dataPoints = a, a;\n    }\n    update(t, e) {\n        const s = this.options.setContext(this.getContext()), n = this._active;\n        let o, r = [];\n        if (!n.length) this.opacity !== 0 && (o = {\n            opacity: 0\n        });\n        else {\n            const a = se[s.position].call(this, n, this._eventPosition);\n            r = this._createItems(s), this.title = this.getTitle(r, s), this.beforeBody = this.getBeforeBody(r, s), this.body = this.getBody(r, s), this.afterBody = this.getAfterBody(r, s), this.footer = this.getFooter(r, s);\n            const l = this._size = Ks(this, s), c = Object.assign({}, a, l), h = qs(this.chart, s, c), d = Gs(s, c, h, this.chart);\n            this.xAlign = h.xAlign, this.yAlign = h.yAlign, o = {\n                opacity: 1,\n                x: d.x,\n                y: d.y,\n                width: l.width,\n                height: l.height,\n                caretX: a.x,\n                caretY: a.y\n            };\n        }\n        this._tooltipItems = r, this.$context = void 0, o && this._resolveAnimations().update(this, o), t && s.external && s.external.call(this, {\n            chart: this.chart,\n            tooltip: this,\n            replay: e\n        });\n    }\n    drawCaret(t, e, s, n) {\n        const o = this.getCaretPosition(t, s, n);\n        e.lineTo(o.x1, o.y1), e.lineTo(o.x2, o.y2), e.lineTo(o.x3, o.y3);\n    }\n    getCaretPosition(t, e, s) {\n        const { xAlign: n, yAlign: o } = this, { caretSize: r, cornerRadius: a } = s, { topLeft: l, topRight: c, bottomLeft: h, bottomRight: d } = Dt(a), { x: u, y: f } = t, { width: g, height: p } = e;\n        let m, b, x, v, y, _;\n        return o === \"center\" ? (y = f + p / 2, n === \"left\" ? (m = u, b = m - r, v = y + r, _ = y - r) : (m = u + g, b = m + r, v = y - r, _ = y + r), x = m) : (n === \"left\" ? b = u + Math.max(l, h) + r : n === \"right\" ? b = u + g - Math.max(c, d) - r : b = this.caretX, o === \"top\" ? (v = f, y = v - r, m = b - r, x = b + r) : (v = f + p, y = v + r, m = b + r, x = b - r), _ = v), {\n            x1: m,\n            x2: b,\n            x3: x,\n            y1: v,\n            y2: y,\n            y3: _\n        };\n    }\n    drawTitle(t, e, s) {\n        const n = this.title, o = n.length;\n        let r, a, l;\n        if (o) {\n            const c = zt(s.rtl, this.x, this.width);\n            for(t.x = Ee(this, s.titleAlign, s), e.textAlign = c.textAlign(s.titleAlign), e.textBaseline = \"middle\", r = $(s.titleFont), a = s.titleSpacing, e.fillStyle = s.titleColor, e.font = r.string, l = 0; l < o; ++l)e.fillText(n[l], c.x(t.x), t.y + r.lineHeight / 2), t.y += r.lineHeight + a, l + 1 === o && (t.y += s.titleMarginBottom - a);\n        }\n    }\n    _drawColorBox(t, e, s, n, o) {\n        const r = this.labelColors[s], a = this.labelPointStyles[s], { boxHeight: l, boxWidth: c, boxPadding: h } = o, d = $(o.bodyFont), u = Ee(this, \"left\", o), f = n.x(u), g = l < d.lineHeight ? (d.lineHeight - l) / 2 : 0, p = e.y + g;\n        if (o.usePointStyle) {\n            const m = {\n                radius: Math.min(c, l) / 2,\n                pointStyle: a.pointStyle,\n                rotation: a.rotation,\n                borderWidth: 1\n            }, b = n.leftForLtr(f, c) + c / 2, x = p + l / 2;\n            t.strokeStyle = o.multiKeyBackground, t.fillStyle = o.multiKeyBackground, yi(t, m, b, x), t.strokeStyle = r.borderColor, t.fillStyle = r.backgroundColor, yi(t, m, b, x);\n        } else {\n            t.lineWidth = D(r.borderWidth) ? Math.max(...Object.values(r.borderWidth)) : r.borderWidth || 1, t.strokeStyle = r.borderColor, t.setLineDash(r.borderDash || []), t.lineDashOffset = r.borderDashOffset || 0;\n            const m = n.leftForLtr(f, c - h), b = n.leftForLtr(n.xPlus(f, 1), c - h - 2), x = Dt(r.borderRadius);\n            Object.values(x).some((v)=>v !== 0) ? (t.beginPath(), t.fillStyle = o.multiKeyBackground, ae(t, {\n                x: m,\n                y: p,\n                w: c,\n                h: l,\n                radius: x\n            }), t.fill(), t.stroke(), t.fillStyle = r.backgroundColor, t.beginPath(), ae(t, {\n                x: b,\n                y: p + 1,\n                w: c - 2,\n                h: l - 2,\n                radius: x\n            }), t.fill()) : (t.fillStyle = o.multiKeyBackground, t.fillRect(m, p, c, l), t.strokeRect(m, p, c, l), t.fillStyle = r.backgroundColor, t.fillRect(b, p + 1, c - 2, l - 2));\n        }\n        t.fillStyle = this.labelTextColors[s];\n    }\n    drawBody(t, e, s) {\n        const { body: n } = this, { bodySpacing: o, bodyAlign: r, displayColors: a, boxHeight: l, boxWidth: c, boxPadding: h } = s, d = $(s.bodyFont);\n        let u = d.lineHeight, f = 0;\n        const g = zt(s.rtl, this.x, this.width), p = function(S) {\n            e.fillText(S, g.x(t.x + f), t.y + u / 2), t.y += u + o;\n        }, m = g.textAlign(r);\n        let b, x, v, y, _, M, k;\n        for(e.textAlign = r, e.textBaseline = \"middle\", e.font = d.string, t.x = Ee(this, m, s), e.fillStyle = s.bodyColor, E(this.beforeBody, p), f = a && m !== \"right\" ? r === \"center\" ? c / 2 + h : c + 2 + h : 0, y = 0, M = n.length; y < M; ++y){\n            for(b = n[y], x = this.labelTextColors[y], e.fillStyle = x, E(b.before, p), v = b.lines, a && v.length && (this._drawColorBox(e, t, y, g, s), u = Math.max(d.lineHeight, l)), _ = 0, k = v.length; _ < k; ++_)p(v[_]), u = d.lineHeight;\n            E(b.after, p);\n        }\n        f = 0, u = d.lineHeight, E(this.afterBody, p), t.y -= o;\n    }\n    drawFooter(t, e, s) {\n        const n = this.footer, o = n.length;\n        let r, a;\n        if (o) {\n            const l = zt(s.rtl, this.x, this.width);\n            for(t.x = Ee(this, s.footerAlign, s), t.y += s.footerMarginTop, e.textAlign = l.textAlign(s.footerAlign), e.textBaseline = \"middle\", r = $(s.footerFont), e.fillStyle = s.footerColor, e.font = r.string, a = 0; a < o; ++a)e.fillText(n[a], l.x(t.x), t.y + r.lineHeight / 2), t.y += r.lineHeight + s.footerSpacing;\n        }\n    }\n    drawBackground(t, e, s, n) {\n        const { xAlign: o, yAlign: r } = this, { x: a, y: l } = t, { width: c, height: h } = s, { topLeft: d, topRight: u, bottomLeft: f, bottomRight: g } = Dt(n.cornerRadius);\n        e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.beginPath(), e.moveTo(a + d, l), r === \"top\" && this.drawCaret(t, e, s, n), e.lineTo(a + c - u, l), e.quadraticCurveTo(a + c, l, a + c, l + u), r === \"center\" && o === \"right\" && this.drawCaret(t, e, s, n), e.lineTo(a + c, l + h - g), e.quadraticCurveTo(a + c, l + h, a + c - g, l + h), r === \"bottom\" && this.drawCaret(t, e, s, n), e.lineTo(a + f, l + h), e.quadraticCurveTo(a, l + h, a, l + h - f), r === \"center\" && o === \"left\" && this.drawCaret(t, e, s, n), e.lineTo(a, l + d), e.quadraticCurveTo(a, l, a + d, l), e.closePath(), e.fill(), n.borderWidth > 0 && e.stroke();\n    }\n    _updateAnimationTarget(t) {\n        const e = this.chart, s = this.$animations, n = s && s.x, o = s && s.y;\n        if (n || o) {\n            const r = se[t.position].call(this, this._active, this._eventPosition);\n            if (!r) return;\n            const a = this._size = Ks(this, t), l = Object.assign({}, r, this._size), c = qs(e, t, l), h = Gs(t, l, c, e);\n            (n._to !== h.x || o._to !== h.y) && (this.xAlign = c.xAlign, this.yAlign = c.yAlign, this.width = a.width, this.height = a.height, this.caretX = r.x, this.caretY = r.y, this._resolveAnimations().update(this, h));\n        }\n    }\n    _willRender() {\n        return !!this.opacity;\n    }\n    draw(t) {\n        const e = this.options.setContext(this.getContext());\n        let s = this.opacity;\n        if (!s) return;\n        this._updateAnimationTarget(e);\n        const n = {\n            width: this.width,\n            height: this.height\n        }, o = {\n            x: this.x,\n            y: this.y\n        };\n        s = Math.abs(s) < 1e-3 ? 0 : s;\n        const r = K(e.padding), a = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        e.enabled && a && (t.save(), t.globalAlpha = s, this.drawBackground(o, t, n, e), Tn(t, e.textDirection), o.y += r.top, this.drawTitle(o, t, e), this.drawBody(o, t, e), this.drawFooter(o, t, e), Ln(t, e.textDirection), t.restore());\n    }\n    getActiveElements() {\n        return this._active || [];\n    }\n    setActiveElements(t, e) {\n        const s = this._active, n = t.map(({ datasetIndex: a, index: l })=>{\n            const c = this.chart.getDatasetMeta(a);\n            if (!c) throw new Error(\"Cannot find a dataset at index \" + a);\n            return {\n                datasetIndex: a,\n                element: c.data[l],\n                index: l\n            };\n        }), o = !ze(s, n), r = this._positionChanged(n, e);\n        (o || r) && (this._active = n, this._eventPosition = e, this._ignoreReplayEvents = !0, this.update(!0));\n    }\n    handleEvent(t, e, s = !0) {\n        if (e && this._ignoreReplayEvents) return !1;\n        this._ignoreReplayEvents = !1;\n        const n = this.options, o = this._active || [], r = this._getActiveElements(t, o, e, s), a = this._positionChanged(r, t), l = e || !ze(r, o) || a;\n        return l && (this._active = r, (n.enabled || n.external) && (this._eventPosition = {\n            x: t.x,\n            y: t.y\n        }, this.update(!0, e))), l;\n    }\n    _getActiveElements(t, e, s, n) {\n        const o = this.options;\n        if (t.type === \"mouseout\") return [];\n        if (!n) return e;\n        const r = this.chart.getElementsAtEventForMode(t, o.mode, o, s);\n        return o.reverse && r.reverse(), r;\n    }\n    _positionChanged(t, e) {\n        const { caretX: s, caretY: n, options: o } = this, r = se[o.position].call(this, t, e);\n        return r !== !1 && (s !== r.x || n !== r.y);\n    }\n}\nCi.positioners = se;\nvar po = {\n    id: \"tooltip\",\n    _element: Ci,\n    positioners: se,\n    afterInit (i, t, e) {\n        e && (i.tooltip = new Ci({\n            chart: i,\n            options: e\n        }));\n    },\n    beforeUpdate (i, t, e) {\n        i.tooltip && i.tooltip.initialize(e);\n    },\n    reset (i, t, e) {\n        i.tooltip && i.tooltip.initialize(e);\n    },\n    afterDraw (i) {\n        const t = i.tooltip;\n        if (t && t._willRender()) {\n            const e = {\n                tooltip: t\n            };\n            if (i.notifyPlugins(\"beforeTooltipDraw\", e) === !1) return;\n            t.draw(i.ctx), i.notifyPlugins(\"afterTooltipDraw\", e);\n        }\n    },\n    afterEvent (i, t) {\n        if (i.tooltip) {\n            const e = t.replay;\n            i.tooltip.handleEvent(t.event, e, t.inChartArea) && (t.changed = !0);\n        }\n    },\n    defaults: {\n        enabled: !0,\n        external: null,\n        position: \"average\",\n        backgroundColor: \"rgba(0,0,0,0.8)\",\n        titleColor: \"#fff\",\n        titleFont: {\n            weight: \"bold\"\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: \"left\",\n        bodyColor: \"#fff\",\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: \"left\",\n        footerColor: \"#fff\",\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: \"bold\"\n        },\n        footerAlign: \"left\",\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (i, t)=>t.bodyFont.size,\n        boxWidth: (i, t)=>t.bodyFont.size,\n        multiKeyBackground: \"#fff\",\n        displayColors: !0,\n        boxPadding: 0,\n        borderColor: \"rgba(0,0,0,0)\",\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: \"easeOutQuart\"\n        },\n        animations: {\n            numbers: {\n                type: \"number\",\n                properties: [\n                    \"x\",\n                    \"y\",\n                    \"width\",\n                    \"height\",\n                    \"caretX\",\n                    \"caretY\"\n                ]\n            },\n            opacity: {\n                easing: \"linear\",\n                duration: 200\n            }\n        },\n        callbacks: {\n            beforeTitle: ct,\n            title (i) {\n                if (i.length > 0) {\n                    const t = i[0], e = t.chart.data.labels, s = e ? e.length : 0;\n                    if (this && this.options && this.options.mode === \"dataset\") return t.dataset.label || \"\";\n                    if (t.label) return t.label;\n                    if (s > 0 && t.dataIndex < s) return e[t.dataIndex];\n                }\n                return \"\";\n            },\n            afterTitle: ct,\n            beforeBody: ct,\n            beforeLabel: ct,\n            label (i) {\n                if (this && this.options && this.options.mode === \"dataset\") return i.label + \": \" + i.formattedValue || i.formattedValue;\n                let t = i.dataset.label || \"\";\n                t && (t += \": \");\n                const e = i.formattedValue;\n                return T(e) || (t += e), t;\n            },\n            labelColor (i) {\n                const e = i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);\n                return {\n                    borderColor: e.borderColor,\n                    backgroundColor: e.backgroundColor,\n                    borderWidth: e.borderWidth,\n                    borderDash: e.borderDash,\n                    borderDashOffset: e.borderDashOffset,\n                    borderRadius: 0\n                };\n            },\n            labelTextColor () {\n                return this.options.bodyColor;\n            },\n            labelPointStyle (i) {\n                const e = i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);\n                return {\n                    pointStyle: e.pointStyle,\n                    rotation: e.rotation\n                };\n            },\n            afterLabel: ct,\n            afterBody: ct,\n            beforeFooter: ct,\n            footer: ct,\n            afterFooter: ct\n        }\n    },\n    defaultRoutes: {\n        bodyFont: \"font\",\n        footerFont: \"font\",\n        titleFont: \"font\"\n    },\n    descriptors: {\n        _scriptable: (i)=>i !== \"filter\" && i !== \"itemSort\" && i !== \"external\",\n        _indexable: !1,\n        callbacks: {\n            _scriptable: !1,\n            _indexable: !1\n        },\n        animation: {\n            _fallback: !1\n        },\n        animations: {\n            _fallback: \"animation\"\n        }\n    },\n    additionalOptionScopes: [\n        \"interaction\"\n    ]\n}, mo = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    Decimation: ao,\n    Filler: ho,\n    Legend: uo,\n    SubTitle: go,\n    Title: fo,\n    Tooltip: po\n});\nconst Sc = (i, t, e, s)=>(typeof t == \"string\" ? (e = i.push(t) - 1, s.unshift({\n        index: e,\n        label: t\n    })) : isNaN(t) && (e = null), e);\nfunction Pc(i, t, e, s) {\n    const n = i.indexOf(t);\n    if (n === -1) return Sc(i, t, e, s);\n    const o = i.lastIndexOf(t);\n    return n !== o ? e : n;\n}\nconst Cc = (i, t)=>i === null ? null : Y(Math.round(i), 0, t);\nclass ce extends Mt {\n    constructor(t){\n        super(t), this._startValue = void 0, this._valueRange = 0, this._addedLabels = [];\n    }\n    init(t) {\n        const e = this._addedLabels;\n        if (e.length) {\n            const s = this.getLabels();\n            for (const { index: n, label: o } of e)s[n] === o && s.splice(n, 1);\n            this._addedLabels = [];\n        }\n        super.init(t);\n    }\n    parse(t, e) {\n        if (T(t)) return null;\n        const s = this.getLabels();\n        return e = isFinite(e) && s[e] === t ? e : Pc(s, t, C(e, t), this._addedLabels), Cc(e, s.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined: t, maxDefined: e } = this.getUserBounds();\n        let { min: s, max: n } = this.getMinMax(!0);\n        this.options.bounds === \"ticks\" && (t || (s = 0), e || (n = this.getLabels().length - 1)), this.min = s, this.max = n;\n    }\n    buildTicks() {\n        const t = this.min, e = this.max, s = this.options.offset, n = [];\n        let o = this.getLabels();\n        o = t === 0 && e === o.length - 1 ? o : o.slice(t, e + 1), this._valueRange = Math.max(o.length - (s ? 0 : 1), 1), this._startValue = this.min - (s ? 0.5 : 0);\n        for(let r = t; r <= e; r++)n.push({\n            value: r\n        });\n        return n;\n    }\n    getLabelForValue(t) {\n        const e = this.getLabels();\n        return t >= 0 && t < e.length ? e[t] : t;\n    }\n    configure() {\n        super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);\n    }\n    getPixelForValue(t) {\n        return typeof t != \"number\" && (t = this.parse(t)), t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(t) {\n        const e = this.ticks;\n        return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n    }\n    getValueForPixel(t) {\n        return Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\nce.id = \"category\";\nce.defaults = {\n    ticks: {\n        callback: ce.prototype.getLabelForValue\n    }\n};\nfunction Dc(i, t) {\n    const e = [], { bounds: n, step: o, min: r, max: a, precision: l, count: c, maxTicks: h, maxDigits: d, includeBounds: u } = i, f = o || 1, g = h - 1, { min: p, max: m } = t, b = !T(r), x = !T(a), v = !T(c), y = (m - p) / (d + 1);\n    let _ = qi((m - p) / g / f) * f, M, k, S, w;\n    if (_ < 1e-14 && !b && !x) return [\n        {\n            value: p\n        },\n        {\n            value: m\n        }\n    ];\n    w = Math.ceil(m / _) - Math.floor(p / _), w > g && (_ = qi(w * _ / g / f) * f), T(l) || (M = Math.pow(10, l), _ = Math.ceil(_ * M) / M), n === \"ticks\" ? (k = Math.floor(p / _) * _, S = Math.ceil(m / _) * _) : (k = p, S = m), b && x && o && Oo((a - r) / o, _ / 1e3) ? (w = Math.round(Math.min((a - r) / _, h)), _ = (a - r) / w, k = r, S = a) : v ? (k = b ? r : k, S = x ? a : S, w = c - 1, _ = (S - k) / w) : (w = (S - k) / _, te(w, Math.round(w), _ / 1e3) ? w = Math.round(w) : w = Math.ceil(w));\n    const L = Math.max(Gi(_), Gi(k));\n    M = Math.pow(10, T(l) ? L : l), k = Math.round(k * M) / M, S = Math.round(S * M) / M;\n    let R = 0;\n    for(b && (u && k !== r ? (e.push({\n        value: r\n    }), k < r && R++, te(Math.round((k + R * _) * M) / M, r, Qs(r, y, i)) && R++) : k < r && R++); R < w; ++R)e.push({\n        value: Math.round((k + R * _) * M) / M\n    });\n    return x && u && S !== a ? e.length && te(e[e.length - 1].value, a, Qs(a, y, i)) ? e[e.length - 1].value = a : e.push({\n        value: a\n    }) : (!x || S === a) && e.push({\n        value: S\n    }), e;\n}\nfunction Qs(i, t, { horizontal: e, minRotation: s }) {\n    const n = nt(s), o = (e ? Math.sin(n) : Math.cos(n)) || 1e-3, r = 0.75 * t * (\"\" + i).length;\n    return Math.min(t / o, r);\n}\nclass Ye extends Mt {\n    constructor(t){\n        super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._endValue = void 0, this._valueRange = 0;\n    }\n    parse(t, e) {\n        return T(t) || (typeof t == \"number\" || t instanceof Number) && !isFinite(+t) ? null : +t;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero: t } = this.options, { minDefined: e, maxDefined: s } = this.getUserBounds();\n        let { min: n, max: o } = this;\n        const r = (l)=>n = e ? n : l, a = (l)=>o = s ? o : l;\n        if (t) {\n            const l = lt(n), c = lt(o);\n            l < 0 && c < 0 ? a(0) : l > 0 && c > 0 && r(0);\n        }\n        if (n === o) {\n            let l = 1;\n            (o >= Number.MAX_SAFE_INTEGER || n <= Number.MIN_SAFE_INTEGER) && (l = Math.abs(o * 0.05)), a(o + l), t || r(n - l);\n        }\n        this.min = n, this.max = o;\n    }\n    getTickLimit() {\n        const t = this.options.ticks;\n        let { maxTicksLimit: e, stepSize: s } = t, n;\n        return s ? (n = Math.ceil(this.max / s) - Math.floor(this.min / s) + 1, n > 1e3 && (console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${n} ticks. Limiting to 1000.`), n = 1e3)) : (n = this.computeTickLimit(), e = e || 11), e && (n = Math.min(e, n)), n;\n    }\n    computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const t = this.options, e = t.ticks;\n        let s = this.getTickLimit();\n        s = Math.max(2, s);\n        const n = {\n            maxTicks: s,\n            bounds: t.bounds,\n            min: t.min,\n            max: t.max,\n            precision: e.precision,\n            step: e.stepSize,\n            count: e.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: e.minRotation || 0,\n            includeBounds: e.includeBounds !== !1\n        }, o = this._range || this, r = Dc(n, o);\n        return t.bounds === \"ticks\" && cn(r, this, \"value\"), t.reverse ? (r.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), r;\n    }\n    configure() {\n        const t = this.ticks;\n        let e = this.min, s = this.max;\n        if (super.configure(), this.options.offset && t.length) {\n            const n = (s - e) / Math.max(t.length - 1, 1) / 2;\n            e -= n, s += n;\n        }\n        this._startValue = e, this._endValue = s, this._valueRange = s - e;\n    }\n    getLabelForValue(t) {\n        return de(t, this.chart.options.locale, this.options.ticks.format);\n    }\n}\nclass Ge extends Ye {\n    determineDataLimits() {\n        const { min: t, max: e } = this.getMinMax(!0);\n        this.min = N(t) ? t : 0, this.max = N(e) ? e : 1, this.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n        const t = this.isHorizontal(), e = t ? this.width : this.height, s = nt(this.options.ticks.minRotation), n = (t ? Math.sin(s) : Math.cos(s)) || 1e-3, o = this._resolveTickFontOptions(0);\n        return Math.ceil(e / Math.min(40, o.lineHeight / n));\n    }\n    getPixelForValue(t) {\n        return t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(t) {\n        return this._startValue + this.getDecimalForPixel(t) * this._valueRange;\n    }\n}\nGe.id = \"linear\";\nGe.defaults = {\n    ticks: {\n        callback: be.formatters.numeric\n    }\n};\nfunction tn(i) {\n    return i / Math.pow(10, Math.floor(tt(i))) === 1;\n}\nfunction Oc(i, t) {\n    const e = Math.floor(tt(t.max)), s = Math.ceil(t.max / Math.pow(10, e)), n = [];\n    let o = Q(i.min, Math.pow(10, Math.floor(tt(t.min)))), r = Math.floor(tt(o)), a = Math.floor(o / Math.pow(10, r)), l = r < 0 ? Math.pow(10, Math.abs(r)) : 1;\n    do n.push({\n        value: o,\n        major: tn(o)\n    }), ++a, a === 10 && (a = 1, ++r, l = r >= 0 ? 1 : l), o = Math.round(a * Math.pow(10, r) * l) / l;\n    while (r < e || r === e && a < s);\n    const c = Q(i.max, o);\n    return n.push({\n        value: c,\n        major: tn(o)\n    }), n;\n}\nclass Ze extends Mt {\n    constructor(t){\n        super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._valueRange = 0;\n    }\n    parse(t, e) {\n        const s = Ye.prototype.parse.apply(this, [\n            t,\n            e\n        ]);\n        if (s === 0) {\n            this._zero = !0;\n            return;\n        }\n        return N(s) && s > 0 ? s : null;\n    }\n    determineDataLimits() {\n        const { min: t, max: e } = this.getMinMax(!0);\n        this.min = N(t) ? Math.max(0, t) : null, this.max = N(e) ? Math.max(0, e) : null, this.options.beginAtZero && (this._zero = !0), this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined: t, maxDefined: e } = this.getUserBounds();\n        let s = this.min, n = this.max;\n        const o = (l)=>s = t ? s : l, r = (l)=>n = e ? n : l, a = (l, c)=>Math.pow(10, Math.floor(tt(l)) + c);\n        s === n && (s <= 0 ? (o(1), r(10)) : (o(a(s, -1)), r(a(n, 1)))), s <= 0 && o(a(n, -1)), n <= 0 && r(a(s, 1)), this._zero && this.min !== this._suggestedMin && s === a(this.min, 0) && o(a(s, -1)), this.min = s, this.max = n;\n    }\n    buildTicks() {\n        const t = this.options, e = {\n            min: this._userMin,\n            max: this._userMax\n        }, s = Oc(e, this);\n        return t.bounds === \"ticks\" && cn(s, this, \"value\"), t.reverse ? (s.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), s;\n    }\n    getLabelForValue(t) {\n        return t === void 0 ? \"0\" : de(t, this.chart.options.locale, this.options.ticks.format);\n    }\n    configure() {\n        const t = this.min;\n        super.configure(), this._startValue = tt(t), this._valueRange = tt(this.max) - tt(t);\n    }\n    getPixelForValue(t) {\n        return (t === void 0 || t === 0) && (t = this.min), t === null || isNaN(t) ? NaN : this.getPixelForDecimal(t === this.min ? 0 : (tt(t) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(t) {\n        const e = this.getDecimalForPixel(t);\n        return Math.pow(10, this._startValue + e * this._valueRange);\n    }\n}\nZe.id = \"logarithmic\";\nZe.defaults = {\n    ticks: {\n        callback: be.formatters.logarithmic,\n        major: {\n            enabled: !0\n        }\n    }\n};\nfunction Di(i) {\n    const t = i.ticks;\n    if (t.display && i.display) {\n        const e = K(t.backdropPadding);\n        return C(t.font && t.font.size, O.font.size) + e.height;\n    }\n    return 0;\n}\nfunction Ac(i, t, e) {\n    return e = z(e) ? e : [\n        e\n    ], {\n        w: ar(i, t.string, e),\n        h: e.length * t.lineHeight\n    };\n}\nfunction en(i, t, e, s, n) {\n    return i === s || i === n ? {\n        start: t - e / 2,\n        end: t + e / 2\n    } : i < s || i > n ? {\n        start: t - e,\n        end: t\n    } : {\n        start: t,\n        end: t + e\n    };\n}\nfunction Tc(i) {\n    const t = {\n        l: i.left + i._padding.left,\n        r: i.right - i._padding.right,\n        t: i.top + i._padding.top,\n        b: i.bottom - i._padding.bottom\n    }, e = Object.assign({}, t), s = [], n = [], o = i._pointLabels.length, r = i.options.pointLabels, a = r.centerPointLabels ? B / o : 0;\n    for(let l = 0; l < o; l++){\n        const c = r.setContext(i.getPointLabelContext(l));\n        n[l] = c.padding;\n        const h = i.getPointPosition(l, i.drawingArea + n[l], a), d = $(c.font), u = Ac(i.ctx, d, i._pointLabels[l]);\n        s[l] = u;\n        const f = Z(i.getIndexAngle(l) + a), g = Math.round(Ai(f)), p = en(g, h.x, u.w, 0, 180), m = en(g, h.y, u.h, 90, 270);\n        Lc(e, t, f, p, m);\n    }\n    i.setCenterPoint(t.l - e.l, e.r - t.r, t.t - e.t, e.b - t.b), i._pointLabelItems = Rc(i, s, n);\n}\nfunction Lc(i, t, e, s, n) {\n    const o = Math.abs(Math.sin(e)), r = Math.abs(Math.cos(e));\n    let a = 0, l = 0;\n    s.start < t.l ? (a = (t.l - s.start) / o, i.l = Math.min(i.l, t.l - a)) : s.end > t.r && (a = (s.end - t.r) / o, i.r = Math.max(i.r, t.r + a)), n.start < t.t ? (l = (t.t - n.start) / r, i.t = Math.min(i.t, t.t - l)) : n.end > t.b && (l = (n.end - t.b) / r, i.b = Math.max(i.b, t.b + l));\n}\nfunction Rc(i, t, e) {\n    const s = [], n = i._pointLabels.length, o = i.options, r = Di(o) / 2, a = i.drawingArea, l = o.pointLabels.centerPointLabels ? B / n : 0;\n    for(let c = 0; c < n; c++){\n        const h = i.getPointPosition(c, a + r + e[c], l), d = Math.round(Ai(Z(h.angle + V))), u = t[c], f = Ic(h.y, u.h, d), g = Ec(d), p = Fc(h.x, u.w, g);\n        s.push({\n            x: h.x,\n            y: f,\n            textAlign: g,\n            left: p,\n            top: f,\n            right: p + u.w,\n            bottom: f + u.h\n        });\n    }\n    return s;\n}\nfunction Ec(i) {\n    return i === 0 || i === 180 ? \"center\" : i < 180 ? \"left\" : \"right\";\n}\nfunction Fc(i, t, e) {\n    return e === \"right\" ? i -= t : e === \"center\" && (i -= t / 2), i;\n}\nfunction Ic(i, t, e) {\n    return e === 90 || e === 270 ? i -= t / 2 : (e > 270 || e < 90) && (i -= t), i;\n}\nfunction zc(i, t) {\n    const { ctx: e, options: { pointLabels: s } } = i;\n    for(let n = t - 1; n >= 0; n--){\n        const o = s.setContext(i.getPointLabelContext(n)), r = $(o.font), { x: a, y: l, textAlign: c, left: h, top: d, right: u, bottom: f } = i._pointLabelItems[n], { backdropColor: g } = o;\n        if (!T(g)) {\n            const p = Dt(o.borderRadius), m = K(o.backdropPadding);\n            e.fillStyle = g;\n            const b = h - m.left, x = d - m.top, v = u - h + m.width, y = f - d + m.height;\n            Object.values(p).some((_)=>_ !== 0) ? (e.beginPath(), ae(e, {\n                x: b,\n                y: x,\n                w: v,\n                h: y,\n                radius: p\n            }), e.fill()) : e.fillRect(b, x, v, y);\n        }\n        Tt(e, i._pointLabels[n], a, l + r.lineHeight / 2, r, {\n            color: o.color,\n            textAlign: c,\n            textBaseline: \"middle\"\n        });\n    }\n}\nfunction bo(i, t, e, s) {\n    const { ctx: n } = i;\n    if (e) n.arc(i.xCenter, i.yCenter, t, 0, F);\n    else {\n        let o = i.getPointPosition(0, t);\n        n.moveTo(o.x, o.y);\n        for(let r = 1; r < s; r++)o = i.getPointPosition(r, t), n.lineTo(o.x, o.y);\n    }\n}\nfunction Bc(i, t, e, s) {\n    const n = i.ctx, o = t.circular, { color: r, lineWidth: a } = t;\n    !o && !s || !r || !a || e < 0 || (n.save(), n.strokeStyle = r, n.lineWidth = a, n.setLineDash(t.borderDash), n.lineDashOffset = t.borderDashOffset, n.beginPath(), bo(i, e, o, s), n.closePath(), n.stroke(), n.restore());\n}\nfunction Vc(i, t, e) {\n    return vt(i, {\n        label: e,\n        index: t,\n        type: \"pointLabel\"\n    });\n}\nclass Nt extends Ye {\n    constructor(t){\n        super(t), this.xCenter = void 0, this.yCenter = void 0, this.drawingArea = void 0, this._pointLabels = [], this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const t = this._padding = K(Di(this.options) / 2), e = this.width = this.maxWidth - t.width, s = this.height = this.maxHeight - t.height;\n        this.xCenter = Math.floor(this.left + e / 2 + t.left), this.yCenter = Math.floor(this.top + s / 2 + t.top), this.drawingArea = Math.floor(Math.min(e, s) / 2);\n    }\n    determineDataLimits() {\n        const { min: t, max: e } = this.getMinMax(!1);\n        this.min = N(t) && !isNaN(t) ? t : 0, this.max = N(e) && !isNaN(e) ? e : 0, this.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n        return Math.ceil(this.drawingArea / Di(this.options));\n    }\n    generateTickLabels(t) {\n        Ye.prototype.generateTickLabels.call(this, t), this._pointLabels = this.getLabels().map((e, s)=>{\n            const n = I(this.options.pointLabels.callback, [\n                e,\n                s\n            ], this);\n            return n || n === 0 ? n : \"\";\n        }).filter((e, s)=>this.chart.getDataVisibility(s));\n    }\n    fit() {\n        const t = this.options;\n        t.display && t.pointLabels.display ? Tc(this) : this.setCenterPoint(0, 0, 0, 0);\n    }\n    setCenterPoint(t, e, s, n) {\n        this.xCenter += Math.floor((t - e) / 2), this.yCenter += Math.floor((s - n) / 2), this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(t, e, s, n));\n    }\n    getIndexAngle(t) {\n        const e = F / (this._pointLabels.length || 1), s = this.options.startAngle || 0;\n        return Z(t * e + nt(s));\n    }\n    getDistanceFromCenterForValue(t) {\n        if (T(t)) return NaN;\n        const e = this.drawingArea / (this.max - this.min);\n        return this.options.reverse ? (this.max - t) * e : (t - this.min) * e;\n    }\n    getValueForDistanceFromCenter(t) {\n        if (T(t)) return NaN;\n        const e = t / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - e : this.min + e;\n    }\n    getPointLabelContext(t) {\n        const e = this._pointLabels || [];\n        if (t >= 0 && t < e.length) {\n            const s = e[t];\n            return Vc(this.getContext(), t, s);\n        }\n    }\n    getPointPosition(t, e, s = 0) {\n        const n = this.getIndexAngle(t) - V + s;\n        return {\n            x: Math.cos(n) * e + this.xCenter,\n            y: Math.sin(n) * e + this.yCenter,\n            angle: n\n        };\n    }\n    getPointPositionForValue(t, e) {\n        return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n    }\n    getBasePosition(t) {\n        return this.getPointPositionForValue(t || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(t) {\n        const { left: e, top: s, right: n, bottom: o } = this._pointLabelItems[t];\n        return {\n            left: e,\n            top: s,\n            right: n,\n            bottom: o\n        };\n    }\n    drawBackground() {\n        const { backgroundColor: t, grid: { circular: e } } = this.options;\n        if (t) {\n            const s = this.ctx;\n            s.save(), s.beginPath(), bo(this, this.getDistanceFromCenterForValue(this._endValue), e, this._pointLabels.length), s.closePath(), s.fillStyle = t, s.fill(), s.restore();\n        }\n    }\n    drawGrid() {\n        const t = this.ctx, e = this.options, { angleLines: s, grid: n } = e, o = this._pointLabels.length;\n        let r, a, l;\n        if (e.pointLabels.display && zc(this, o), n.display && this.ticks.forEach((c, h)=>{\n            if (h !== 0) {\n                a = this.getDistanceFromCenterForValue(c.value);\n                const d = n.setContext(this.getContext(h - 1));\n                Bc(this, d, a, o);\n            }\n        }), s.display) {\n            for(t.save(), r = o - 1; r >= 0; r--){\n                const c = s.setContext(this.getPointLabelContext(r)), { color: h, lineWidth: d } = c;\n                !d || !h || (t.lineWidth = d, t.strokeStyle = h, t.setLineDash(c.borderDash), t.lineDashOffset = c.borderDashOffset, a = this.getDistanceFromCenterForValue(e.ticks.reverse ? this.min : this.max), l = this.getPointPosition(r, a), t.beginPath(), t.moveTo(this.xCenter, this.yCenter), t.lineTo(l.x, l.y), t.stroke());\n            }\n            t.restore();\n        }\n    }\n    drawBorder() {}\n    drawLabels() {\n        const t = this.ctx, e = this.options, s = e.ticks;\n        if (!s.display) return;\n        const n = this.getIndexAngle(0);\n        let o, r;\n        t.save(), t.translate(this.xCenter, this.yCenter), t.rotate(n), t.textAlign = \"center\", t.textBaseline = \"middle\", this.ticks.forEach((a, l)=>{\n            if (l === 0 && !e.reverse) return;\n            const c = s.setContext(this.getContext(l)), h = $(c.font);\n            if (o = this.getDistanceFromCenterForValue(this.ticks[l].value), c.showLabelBackdrop) {\n                t.font = h.string, r = t.measureText(a.label).width, t.fillStyle = c.backdropColor;\n                const d = K(c.backdropPadding);\n                t.fillRect(-r / 2 - d.left, -o - h.size / 2 - d.top, r + d.width, h.size + d.height);\n            }\n            Tt(t, a.label, 0, -o, h, {\n                color: c.color\n            });\n        }), t.restore();\n    }\n    drawTitle() {}\n}\nNt.id = \"radialLinear\";\nNt.defaults = {\n    display: !0,\n    animate: !0,\n    position: \"chartArea\",\n    angleLines: {\n        display: !0,\n        lineWidth: 1,\n        borderDash: [],\n        borderDashOffset: 0\n    },\n    grid: {\n        circular: !1\n    },\n    startAngle: 0,\n    ticks: {\n        showLabelBackdrop: !0,\n        callback: be.formatters.numeric\n    },\n    pointLabels: {\n        backdropColor: void 0,\n        backdropPadding: 2,\n        display: !0,\n        font: {\n            size: 10\n        },\n        callback (i) {\n            return i;\n        },\n        padding: 5,\n        centerPointLabels: !1\n    }\n};\nNt.defaultRoutes = {\n    \"angleLines.color\": \"borderColor\",\n    \"pointLabels.color\": \"color\",\n    \"ticks.color\": \"color\"\n};\nNt.descriptors = {\n    angleLines: {\n        _fallback: \"grid\"\n    }\n};\nconst Je = {\n    millisecond: {\n        common: !0,\n        size: 1,\n        steps: 1e3\n    },\n    second: {\n        common: !0,\n        size: 1e3,\n        steps: 60\n    },\n    minute: {\n        common: !0,\n        size: 6e4,\n        steps: 60\n    },\n    hour: {\n        common: !0,\n        size: 36e5,\n        steps: 24\n    },\n    day: {\n        common: !0,\n        size: 864e5,\n        steps: 30\n    },\n    week: {\n        common: !1,\n        size: 6048e5,\n        steps: 4\n    },\n    month: {\n        common: !0,\n        size: 2628e6,\n        steps: 12\n    },\n    quarter: {\n        common: !1,\n        size: 7884e6,\n        steps: 4\n    },\n    year: {\n        common: !0,\n        size: 3154e7\n    }\n}, G = Object.keys(Je);\nfunction Wc(i, t) {\n    return i - t;\n}\nfunction sn(i, t) {\n    if (T(t)) return null;\n    const e = i._adapter, { parser: s, round: n, isoWeekday: o } = i._parseOpts;\n    let r = t;\n    return typeof s == \"function\" && (r = s(r)), N(r) || (r = typeof s == \"string\" ? e.parse(r, s) : e.parse(r)), r === null ? null : (n && (r = n === \"week\" && (Bt(o) || o === !0) ? e.startOf(r, \"isoWeek\", o) : e.startOf(r, n)), +r);\n}\nfunction nn(i, t, e, s) {\n    const n = G.length;\n    for(let o = G.indexOf(i); o < n - 1; ++o){\n        const r = Je[G[o]], a = r.steps ? r.steps : Number.MAX_SAFE_INTEGER;\n        if (r.common && Math.ceil((e - t) / (a * r.size)) <= s) return G[o];\n    }\n    return G[n - 1];\n}\nfunction Nc(i, t, e, s, n) {\n    for(let o = G.length - 1; o >= G.indexOf(e); o--){\n        const r = G[o];\n        if (Je[r].common && i._adapter.diff(n, s, r) >= t - 1) return r;\n    }\n    return G[e ? G.indexOf(e) : 0];\n}\nfunction Hc(i) {\n    for(let t = G.indexOf(i) + 1, e = G.length; t < e; ++t)if (Je[G[t]].common) return G[t];\n}\nfunction on(i, t, e) {\n    if (!e) i[t] = !0;\n    else if (e.length) {\n        const { lo: s, hi: n } = Ti(e, t), o = e[s] >= t ? e[s] : e[n];\n        i[o] = !0;\n    }\n}\nfunction jc(i, t, e, s) {\n    const n = i._adapter, o = +n.startOf(t[0].value, s), r = t[t.length - 1].value;\n    let a, l;\n    for(a = o; a <= r; a = +n.add(a, 1, s))l = e[a], l >= 0 && (t[l].major = !0);\n    return t;\n}\nfunction rn(i, t, e) {\n    const s = [], n = {}, o = t.length;\n    let r, a;\n    for(r = 0; r < o; ++r)a = t[r], n[a] = r, s.push({\n        value: a,\n        major: !1\n    });\n    return o === 0 || !e ? s : jc(i, s, n, e);\n}\nclass Ht extends Mt {\n    constructor(t){\n        super(t), this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        }, this._unit = \"day\", this._majorUnit = void 0, this._offsets = {}, this._normalized = !1, this._parseOpts = void 0;\n    }\n    init(t, e) {\n        const s = t.time || (t.time = {}), n = this._adapter = new Nn._date(t.adapters.date);\n        n.init(e), Qt(s.displayFormats, n.formats()), this._parseOpts = {\n            parser: s.parser,\n            round: s.round,\n            isoWeekday: s.isoWeekday\n        }, super.init(t), this._normalized = e.normalized;\n    }\n    parse(t, e) {\n        return t === void 0 ? null : sn(this, t);\n    }\n    beforeLayout() {\n        super.beforeLayout(), this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const t = this.options, e = this._adapter, s = t.time.unit || \"day\";\n        let { min: n, max: o, minDefined: r, maxDefined: a } = this.getUserBounds();\n        function l(c) {\n            !r && !isNaN(c.min) && (n = Math.min(n, c.min)), !a && !isNaN(c.max) && (o = Math.max(o, c.max));\n        }\n        (!r || !a) && (l(this._getLabelBounds()), (t.bounds !== \"ticks\" || t.ticks.source !== \"labels\") && l(this.getMinMax(!1))), n = N(n) && !isNaN(n) ? n : +e.startOf(Date.now(), s), o = N(o) && !isNaN(o) ? o : +e.endOf(Date.now(), s) + 1, this.min = Math.min(n, o - 1), this.max = Math.max(n + 1, o);\n    }\n    _getLabelBounds() {\n        const t = this.getLabelTimestamps();\n        let e = Number.POSITIVE_INFINITY, s = Number.NEGATIVE_INFINITY;\n        return t.length && (e = t[0], s = t[t.length - 1]), {\n            min: e,\n            max: s\n        };\n    }\n    buildTicks() {\n        const t = this.options, e = t.time, s = t.ticks, n = s.source === \"labels\" ? this.getLabelTimestamps() : this._generate();\n        t.bounds === \"ticks\" && n.length && (this.min = this._userMin || n[0], this.max = this._userMax || n[n.length - 1]);\n        const o = this.min, r = this.max, a = Ro(n, o, r);\n        return this._unit = e.unit || (s.autoSkip ? nn(e.minUnit, this.min, this.max, this._getLabelCapacity(o)) : Nc(this, a.length, e.minUnit, this.min, this.max)), this._majorUnit = !s.major.enabled || this._unit === \"year\" ? void 0 : Hc(this._unit), this.initOffsets(n), t.reverse && a.reverse(), rn(this, a, this._majorUnit);\n    }\n    afterAutoSkip() {\n        this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((t)=>+t.value));\n    }\n    initOffsets(t) {\n        let e = 0, s = 0, n, o;\n        this.options.offset && t.length && (n = this.getDecimalForValue(t[0]), t.length === 1 ? e = 1 - n : e = (this.getDecimalForValue(t[1]) - n) / 2, o = this.getDecimalForValue(t[t.length - 1]), t.length === 1 ? s = o : s = (o - this.getDecimalForValue(t[t.length - 2])) / 2);\n        const r = t.length < 3 ? 0.5 : 0.25;\n        e = Y(e, 0, r), s = Y(s, 0, r), this._offsets = {\n            start: e,\n            end: s,\n            factor: 1 / (e + 1 + s)\n        };\n    }\n    _generate() {\n        const t = this._adapter, e = this.min, s = this.max, n = this.options, o = n.time, r = o.unit || nn(o.minUnit, e, s, this._getLabelCapacity(e)), a = C(o.stepSize, 1), l = r === \"week\" ? o.isoWeekday : !1, c = Bt(l) || l === !0, h = {};\n        let d = e, u, f;\n        if (c && (d = +t.startOf(d, \"isoWeek\", l)), d = +t.startOf(d, c ? \"day\" : r), t.diff(s, e, r) > 1e5 * a) throw new Error(e + \" and \" + s + \" are too far apart with stepSize of \" + a + \" \" + r);\n        const g = n.ticks.source === \"data\" && this.getDataTimestamps();\n        for(u = d, f = 0; u < s; u = +t.add(u, a, r), f++)on(h, u, g);\n        return (u === s || n.bounds === \"ticks\" || f === 1) && on(h, u, g), Object.keys(h).sort((p, m)=>p - m).map((p)=>+p);\n    }\n    getLabelForValue(t) {\n        const e = this._adapter, s = this.options.time;\n        return s.tooltipFormat ? e.format(t, s.tooltipFormat) : e.format(t, s.displayFormats.datetime);\n    }\n    _tickFormatFunction(t, e, s, n) {\n        const o = this.options, r = o.time.displayFormats, a = this._unit, l = this._majorUnit, c = a && r[a], h = l && r[l], d = s[e], u = l && h && d && d.major, f = this._adapter.format(t, n || (u ? h : c)), g = o.ticks.callback;\n        return g ? I(g, [\n            f,\n            e,\n            s\n        ], this) : f;\n    }\n    generateTickLabels(t) {\n        let e, s, n;\n        for(e = 0, s = t.length; e < s; ++e)n = t[e], n.label = this._tickFormatFunction(n.value, e, t);\n    }\n    getDecimalForValue(t) {\n        return t === null ? NaN : (t - this.min) / (this.max - this.min);\n    }\n    getPixelForValue(t) {\n        const e = this._offsets, s = this.getDecimalForValue(t);\n        return this.getPixelForDecimal((e.start + s) * e.factor);\n    }\n    getValueForPixel(t) {\n        const e = this._offsets, s = this.getDecimalForPixel(t) / e.factor - e.end;\n        return this.min + s * (this.max - this.min);\n    }\n    _getLabelSize(t) {\n        const e = this.options.ticks, s = this.ctx.measureText(t).width, n = nt(this.isHorizontal() ? e.maxRotation : e.minRotation), o = Math.cos(n), r = Math.sin(n), a = this._resolveTickFontOptions(0).size;\n        return {\n            w: s * o + a * r,\n            h: s * r + a * o\n        };\n    }\n    _getLabelCapacity(t) {\n        const e = this.options.time, s = e.displayFormats, n = s[e.unit] || s.millisecond, o = this._tickFormatFunction(t, 0, rn(this, [\n            t\n        ], this._majorUnit), n), r = this._getLabelSize(o), a = Math.floor(this.isHorizontal() ? this.width / r.w : this.height / r.h) - 1;\n        return a > 0 ? a : 1;\n    }\n    getDataTimestamps() {\n        let t = this._cache.data || [], e, s;\n        if (t.length) return t;\n        const n = this.getMatchingVisibleMetas();\n        if (this._normalized && n.length) return this._cache.data = n[0].controller.getAllParsedValues(this);\n        for(e = 0, s = n.length; e < s; ++e)t = t.concat(n[e].controller.getAllParsedValues(this));\n        return this._cache.data = this.normalize(t);\n    }\n    getLabelTimestamps() {\n        const t = this._cache.labels || [];\n        let e, s;\n        if (t.length) return t;\n        const n = this.getLabels();\n        for(e = 0, s = n.length; e < s; ++e)t.push(sn(this, n[e]));\n        return this._cache.labels = this._normalized ? t : this.normalize(t);\n    }\n    normalize(t) {\n        return un(t.sort(Wc));\n    }\n}\nHt.id = \"time\";\nHt.defaults = {\n    bounds: \"data\",\n    adapters: {},\n    time: {\n        parser: !1,\n        unit: !1,\n        round: !1,\n        isoWeekday: !1,\n        minUnit: \"millisecond\",\n        displayFormats: {}\n    },\n    ticks: {\n        source: \"auto\",\n        major: {\n            enabled: !1\n        }\n    }\n};\nfunction Fe(i, t, e) {\n    let s = 0, n = i.length - 1, o, r, a, l;\n    e ? (t >= i[s].pos && t <= i[n].pos && ({ lo: s, hi: n } = ft(i, \"pos\", t)), { pos: o, time: a } = i[s], { pos: r, time: l } = i[n]) : (t >= i[s].time && t <= i[n].time && ({ lo: s, hi: n } = ft(i, \"time\", t)), { time: o, pos: a } = i[s], { time: r, pos: l } = i[n]);\n    const c = r - o;\n    return c ? a + (l - a) * (t - o) / c : a;\n}\nclass Qe extends Ht {\n    constructor(t){\n        super(t), this._table = [], this._minPos = void 0, this._tableRange = void 0;\n    }\n    initOffsets() {\n        const t = this._getTimestampsForTable(), e = this._table = this.buildLookupTable(t);\n        this._minPos = Fe(e, this.min), this._tableRange = Fe(e, this.max) - this._minPos, super.initOffsets(t);\n    }\n    buildLookupTable(t) {\n        const { min: e, max: s } = this, n = [], o = [];\n        let r, a, l, c, h;\n        for(r = 0, a = t.length; r < a; ++r)c = t[r], c >= e && c <= s && n.push(c);\n        if (n.length < 2) return [\n            {\n                time: e,\n                pos: 0\n            },\n            {\n                time: s,\n                pos: 1\n            }\n        ];\n        for(r = 0, a = n.length; r < a; ++r)h = n[r + 1], l = n[r - 1], c = n[r], Math.round((h + l) / 2) !== c && o.push({\n            time: c,\n            pos: r / (a - 1)\n        });\n        return o;\n    }\n    _getTimestampsForTable() {\n        let t = this._cache.all || [];\n        if (t.length) return t;\n        const e = this.getDataTimestamps(), s = this.getLabelTimestamps();\n        return e.length && s.length ? t = this.normalize(e.concat(s)) : t = e.length ? e : s, t = this._cache.all = t, t;\n    }\n    getDecimalForValue(t) {\n        return (Fe(this._table, t) - this._minPos) / this._tableRange;\n    }\n    getValueForPixel(t) {\n        const e = this._offsets, s = this.getDecimalForPixel(t) / e.factor - e.end;\n        return Fe(this._table, s * this._tableRange + this._minPos, !0);\n    }\n}\nQe.id = \"timeseries\";\nQe.defaults = Ht.defaults;\nvar xo = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    CategoryScale: ce,\n    LinearScale: Ge,\n    LogarithmicScale: Ze,\n    RadialLinearScale: Nt,\n    TimeScale: Ht,\n    TimeSeriesScale: Qe\n});\nconst $c = [\n    Wn,\n    oo,\n    mo,\n    xo\n], Yc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    Animation: In,\n    Animations: Ni,\n    ArcElement: ye,\n    BarController: ue,\n    BarElement: Me,\n    BasePlatform: Hi,\n    BasicPlatform: Yn,\n    BubbleController: fe,\n    CategoryScale: ce,\n    Chart: ji,\n    DatasetController: it,\n    Decimation: ao,\n    DomPlatform: Kn,\n    DoughnutController: Lt,\n    Element: st,\n    Filler: ho,\n    Interaction: Hn,\n    Legend: uo,\n    LineController: ge,\n    LineElement: gt,\n    LinearScale: Ge,\n    LogarithmicScale: Ze,\n    PieController: qe,\n    PointElement: ve,\n    PolarAreaController: pe,\n    RadarController: me,\n    RadialLinearScale: Nt,\n    Scale: Mt,\n    ScatterController: xe,\n    SubTitle: go,\n    Ticks: be,\n    TimeScale: Ht,\n    TimeSeriesScale: Qe,\n    Title: fo,\n    Tooltip: po,\n    _adapters: Nn,\n    _detectPlatform: qn,\n    animator: at,\n    controllers: Wn,\n    defaults: O,\n    elements: oo,\n    layouts: X,\n    plugins: mo,\n    registerables: $c,\n    registry: ot,\n    scales: xo\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\n //# sourceMappingURL=chart.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tw-elements/dist/js/chart.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tw-elements/dist/js/chartjs-plugin-datalabels.es.js":
/*!**************************************************************************!*\
  !*** ./node_modules/tw-elements/dist/js/chartjs-plugin-datalabels.es.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Me)\n/* harmony export */ });\n/* harmony import */ var _chart_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart.es.js */ \"(ssr)/./node_modules/tw-elements/dist/js/chart.es.js\");\n\n/*!\n * chartjs-plugin-datalabels v2.2.0\n * https://chartjs-plugin-datalabels.netlify.app\n * (c) 2017-2022 chartjs-plugin-datalabels contributors\n * Released under the MIT license\n */ var D = function() {\n    if (false) { var e; }\n    return 1;\n}(), m = {\n    // @todo move this in Chart.helpers.toTextLines\n    toTextLines: function(e) {\n        var t = [], r;\n        for(e = [].concat(e); e.length;)r = e.pop(), typeof r == \"string\" ? t.unshift.apply(t, r.split(`\n`)) : Array.isArray(r) ? e.push.apply(e, r) : (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.i)(e) || t.unshift(\"\" + r);\n        return t;\n    },\n    // @todo move this in Chart.helpers.canvas.textSize\n    // @todo cache calls of measureText if font doesn't change?!\n    textSize: function(e, t, r) {\n        var a = [].concat(t), i = a.length, n = e.font, o = 0, s;\n        for(e.font = r.string, s = 0; s < i; ++s)o = Math.max(e.measureText(a[s]).width, o);\n        return e.font = n, {\n            height: i * r.lineHeight,\n            width: o\n        };\n    },\n    /**\n   * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).\n   * @todo move this method in Chart.helpers.bound\n   * https://doc.qt.io/qt-5/qtglobal.html#qBound\n   */ bound: function(e, t, r) {\n        return Math.max(e, Math.min(t, r));\n    },\n    /**\n   * Returns an array of pair [value, state] where state is:\n   * * -1: value is only in a0 (removed)\n   * *  1: value is only in a1 (added)\n   */ arrayDiff: function(e, t) {\n        var r = e.slice(), a = [], i, n, o, s;\n        for(i = 0, o = t.length; i < o; ++i)s = t[i], n = r.indexOf(s), n === -1 ? a.push([\n            s,\n            1\n        ]) : r.splice(n, 1);\n        for(i = 0, o = r.length; i < o; ++i)a.push([\n            r[i],\n            -1\n        ]);\n        return a;\n    },\n    /**\n   * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70\n   */ rasterize: function(e) {\n        return Math.round(e * D) / D;\n    }\n};\nfunction A(e, t) {\n    var r = t.x, a = t.y;\n    if (r === null) return {\n        x: 0,\n        y: -1\n    };\n    if (a === null) return {\n        x: 1,\n        y: 0\n    };\n    var i = e.x - r, n = e.y - a, o = Math.sqrt(i * i + n * n);\n    return {\n        x: o ? i / o : 0,\n        y: o ? n / o : -1\n    };\n}\nfunction ae(e, t, r, a, i) {\n    switch(i){\n        case \"center\":\n            r = a = 0;\n            break;\n        case \"bottom\":\n            r = 0, a = 1;\n            break;\n        case \"right\":\n            r = 1, a = 0;\n            break;\n        case \"left\":\n            r = -1, a = 0;\n            break;\n        case \"top\":\n            r = 0, a = -1;\n            break;\n        case \"start\":\n            r = -r, a = -a;\n            break;\n        case \"end\":\n            break;\n        default:\n            i *= Math.PI / 180, r = Math.cos(i), a = Math.sin(i);\n            break;\n    }\n    return {\n        x: e,\n        y: t,\n        vx: r,\n        vy: a\n    };\n}\nvar te = 0, j = 1, N = 2, O = 4, F = 8;\nfunction M(e, t, r) {\n    var a = te;\n    return e < r.left ? a |= j : e > r.right && (a |= N), t < r.top ? a |= F : t > r.bottom && (a |= O), a;\n}\nfunction ie(e, t) {\n    for(var r = e.x0, a = e.y0, i = e.x1, n = e.y1, o = M(r, a, t), s = M(i, n, t), l, u, v; !(!(o | s) || o & s);)l = o || s, l & F ? (u = r + (i - r) * (t.top - a) / (n - a), v = t.top) : l & O ? (u = r + (i - r) * (t.bottom - a) / (n - a), v = t.bottom) : l & N ? (v = a + (n - a) * (t.right - r) / (i - r), u = t.right) : l & j && (v = a + (n - a) * (t.left - r) / (i - r), u = t.left), l === o ? (r = u, a = v, o = M(r, a, t)) : (i = u, n = v, s = M(i, n, t));\n    return {\n        x0: r,\n        x1: i,\n        y0: a,\n        y1: n\n    };\n}\nfunction P(e, t) {\n    var r = t.anchor, a = e, i, n;\n    return t.clamp && (a = ie(a, t.area)), r === \"start\" ? (i = a.x0, n = a.y0) : r === \"end\" ? (i = a.x1, n = a.y1) : (i = (a.x0 + a.x1) / 2, n = (a.y0 + a.y1) / 2), ae(i, n, e.vx, e.vy, t.align);\n}\nvar E = {\n    arc: function(e, t) {\n        var r = (e.startAngle + e.endAngle) / 2, a = Math.cos(r), i = Math.sin(r), n = e.innerRadius, o = e.outerRadius;\n        return P({\n            x0: e.x + a * n,\n            y0: e.y + i * n,\n            x1: e.x + a * o,\n            y1: e.y + i * o,\n            vx: a,\n            vy: i\n        }, t);\n    },\n    point: function(e, t) {\n        var r = A(e, t.origin), a = r.x * e.options.radius, i = r.y * e.options.radius;\n        return P({\n            x0: e.x - a,\n            y0: e.y - i,\n            x1: e.x + a,\n            y1: e.y + i,\n            vx: r.x,\n            vy: r.y\n        }, t);\n    },\n    bar: function(e, t) {\n        var r = A(e, t.origin), a = e.x, i = e.y, n = 0, o = 0;\n        return e.horizontal ? (a = Math.min(e.x, e.base), n = Math.abs(e.base - e.x)) : (i = Math.min(e.y, e.base), o = Math.abs(e.base - e.y)), P({\n            x0: a,\n            y0: i + o,\n            x1: a + n,\n            y1: i,\n            vx: r.x,\n            vy: r.y\n        }, t);\n    },\n    fallback: function(e, t) {\n        var r = A(e, t.origin);\n        return P({\n            x0: e.x,\n            y0: e.y,\n            x1: e.x + (e.width || 0),\n            y1: e.y + (e.height || 0),\n            vx: r.x,\n            vy: r.y\n        }, t);\n    }\n}, x = m.rasterize;\nfunction ne(e) {\n    var t = e.borderWidth || 0, r = e.padding, a = e.size.height, i = e.size.width, n = -i / 2, o = -a / 2;\n    return {\n        frame: {\n            x: n - r.left - t,\n            y: o - r.top - t,\n            w: i + r.width + t * 2,\n            h: a + r.height + t * 2\n        },\n        text: {\n            x: n,\n            y: o,\n            w: i,\n            h: a\n        }\n    };\n}\nfunction oe(e, t) {\n    var r = t.chart.getDatasetMeta(t.datasetIndex).vScale;\n    if (!r) return null;\n    if (r.xCenter !== void 0 && r.yCenter !== void 0) return {\n        x: r.xCenter,\n        y: r.yCenter\n    };\n    var a = r.getBasePixel();\n    return e.horizontal ? {\n        x: a,\n        y: null\n    } : {\n        x: null,\n        y: a\n    };\n}\nfunction se(e) {\n    return e instanceof _chart_es_js__WEBPACK_IMPORTED_MODULE_0__.A ? E.arc : e instanceof _chart_es_js__WEBPACK_IMPORTED_MODULE_0__.P ? E.point : e instanceof _chart_es_js__WEBPACK_IMPORTED_MODULE_0__.B ? E.bar : E.fallback;\n}\nfunction le(e, t, r, a, i, n) {\n    var o = Math.PI / 2;\n    if (n) {\n        var s = Math.min(n, i / 2, a / 2), l = t + s, u = r + s, v = t + a - s, d = r + i - s;\n        e.moveTo(t, u), l < v && u < d ? (e.arc(l, u, s, -Math.PI, -o), e.arc(v, u, s, -o, 0), e.arc(v, d, s, 0, o), e.arc(l, d, s, o, Math.PI)) : l < v ? (e.moveTo(l, r), e.arc(v, u, s, -o, o), e.arc(l, u, s, o, Math.PI + o)) : u < d ? (e.arc(l, u, s, -Math.PI, 0), e.arc(l, d, s, 0, Math.PI)) : e.arc(l, u, s, -Math.PI, Math.PI), e.closePath(), e.moveTo(t, r);\n    } else e.rect(t, r, a, i);\n}\nfunction ue(e, t, r) {\n    var a = r.backgroundColor, i = r.borderColor, n = r.borderWidth;\n    !a && (!i || !n) || (e.beginPath(), le(e, x(t.x) + n / 2, x(t.y) + n / 2, x(t.w) - n, x(t.h) - n, r.borderRadius), e.closePath(), a && (e.fillStyle = a, e.fill()), i && n && (e.strokeStyle = i, e.lineWidth = n, e.lineJoin = \"miter\", e.stroke()));\n}\nfunction ve(e, t, r) {\n    var a = r.lineHeight, i = e.w, n = e.x, o = e.y + a / 2;\n    return t === \"center\" ? n += i / 2 : (t === \"end\" || t === \"right\") && (n += i), {\n        h: a,\n        w: i,\n        x: n,\n        y: o\n    };\n}\nfunction de(e, t, r) {\n    var a = e.shadowBlur, i = r.stroked, n = x(r.x), o = x(r.y), s = x(r.w);\n    i && e.strokeText(t, n, o, s), r.filled && (a && i && (e.shadowBlur = 0), e.fillText(t, n, o, s), a && i && (e.shadowBlur = a));\n}\nfunction fe(e, t, r, a) {\n    var i = a.textAlign, n = a.color, o = !!n, s = a.font, l = t.length, u = a.textStrokeColor, v = a.textStrokeWidth, d = u && v, y;\n    if (!(!l || !o && !d)) for(r = ve(r, i, s), e.font = s.string, e.textAlign = i, e.textBaseline = \"middle\", e.shadowBlur = a.textShadowBlur, e.shadowColor = a.textShadowColor, o && (e.fillStyle = n), d && (e.lineJoin = \"round\", e.lineWidth = v, e.strokeStyle = u), y = 0, l = t.length; y < l; ++y)de(e, t[y], {\n        stroked: d,\n        filled: o,\n        w: r.w,\n        x: r.x,\n        y: r.y + r.h * y\n    });\n}\nvar L = function(e, t, r, a) {\n    var i = this;\n    i._config = e, i._index = a, i._model = null, i._rects = null, i._ctx = t, i._el = r;\n};\n(0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.m)(L.prototype, {\n    /**\n   * @private\n   */ _modelize: function(e, t, r, a) {\n        var i = this, n = i._index, o = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.t)((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n            r.font,\n            {}\n        ], a, n)), s = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n            r.color,\n            _chart_es_js__WEBPACK_IMPORTED_MODULE_0__.d.color\n        ], a, n);\n        return {\n            align: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.align,\n                \"center\"\n            ], a, n),\n            anchor: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.anchor,\n                \"center\"\n            ], a, n),\n            area: a.chart.chartArea,\n            backgroundColor: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.backgroundColor,\n                null\n            ], a, n),\n            borderColor: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.borderColor,\n                null\n            ], a, n),\n            borderRadius: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.borderRadius,\n                0\n            ], a, n),\n            borderWidth: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.borderWidth,\n                0\n            ], a, n),\n            clamp: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.clamp,\n                !1\n            ], a, n),\n            clip: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.clip,\n                !1\n            ], a, n),\n            color: s,\n            display: e,\n            font: o,\n            lines: t,\n            offset: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.offset,\n                4\n            ], a, n),\n            opacity: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.opacity,\n                1\n            ], a, n),\n            origin: oe(i._el, a),\n            padding: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.padding,\n                4\n            ], a, n)),\n            positioner: se(i._el),\n            rotation: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.rotation,\n                0\n            ], a, n) * (Math.PI / 180),\n            size: m.textSize(i._ctx, t, o),\n            textAlign: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.textAlign,\n                \"start\"\n            ], a, n),\n            textShadowBlur: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.textShadowBlur,\n                0\n            ], a, n),\n            textShadowColor: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.textShadowColor,\n                s\n            ], a, n),\n            textStrokeColor: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.textStrokeColor,\n                s\n            ], a, n),\n            textStrokeWidth: (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n                r.textStrokeWidth,\n                0\n            ], a, n)\n        };\n    },\n    update: function(e) {\n        var t = this, r = null, a = null, i = t._index, n = t._config, o, s, l, u = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.r)([\n            n.display,\n            !0\n        ], e, i);\n        u && (o = e.dataset.data[i], s = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.v)((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.c)(n.formatter, [\n            o,\n            e\n        ]), o), l = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.i)(s) ? [] : m.toTextLines(s), l.length && (r = t._modelize(u, l, n, e), a = ne(r))), t._model = r, t._rects = a;\n    },\n    geometry: function() {\n        return this._rects ? this._rects.frame : {};\n    },\n    rotation: function() {\n        return this._model ? this._model.rotation : 0;\n    },\n    visible: function() {\n        return this._model && this._model.opacity;\n    },\n    model: function() {\n        return this._model;\n    },\n    draw: function(e, t) {\n        var r = this, a = e.ctx, i = r._model, n = r._rects, o;\n        this.visible() && (a.save(), i.clip && (o = i.area, a.beginPath(), a.rect(o.left, o.top, o.right - o.left, o.bottom - o.top), a.clip()), a.globalAlpha = m.bound(0, i.opacity, 1), a.translate(x(t.x), x(t.y)), a.rotate(i.rotation), ue(a, n.frame, i), fe(a, i.lines, n.text, i), a.restore());\n    }\n});\nvar he = Number.MIN_SAFE_INTEGER || -9007199254740991, ye = Number.MAX_SAFE_INTEGER || 9007199254740991;\nfunction b(e, t, r) {\n    var a = Math.cos(r), i = Math.sin(r), n = t.x, o = t.y;\n    return {\n        x: n + a * (e.x - n) - i * (e.y - o),\n        y: o + i * (e.x - n) + a * (e.y - o)\n    };\n}\nfunction W(e, t) {\n    var r = ye, a = he, i = t.origin, n, o, s, l, u;\n    for(n = 0; n < e.length; ++n)o = e[n], s = o.x - i.x, l = o.y - i.y, u = t.vx * s + t.vy * l, r = Math.min(r, u), a = Math.max(a, u);\n    return {\n        min: r,\n        max: a\n    };\n}\nfunction I(e, t) {\n    var r = t.x - e.x, a = t.y - e.y, i = Math.sqrt(r * r + a * a);\n    return {\n        vx: (t.x - e.x) / i,\n        vy: (t.y - e.y) / i,\n        origin: e,\n        ln: i\n    };\n}\nvar G = function() {\n    this._rotation = 0, this._rect = {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0\n    };\n};\n(0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.m)(G.prototype, {\n    center: function() {\n        var e = this._rect;\n        return {\n            x: e.x + e.w / 2,\n            y: e.y + e.h / 2\n        };\n    },\n    update: function(e, t, r) {\n        this._rotation = r, this._rect = {\n            x: t.x + e.x,\n            y: t.y + e.y,\n            w: t.w,\n            h: t.h\n        };\n    },\n    contains: function(e) {\n        var t = this, r = 1, a = t._rect;\n        return e = b(e, t.center(), -t._rotation), !(e.x < a.x - r || e.y < a.y - r || e.x > a.x + a.w + r * 2 || e.y > a.y + a.h + r * 2);\n    },\n    // Separating Axis Theorem\n    // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n    intersects: function(e) {\n        var t = this._points(), r = e._points(), a = [\n            I(t[0], t[1]),\n            I(t[0], t[3])\n        ], i, n, o;\n        for(this._rotation !== e._rotation && a.push(I(r[0], r[1]), I(r[0], r[3])), i = 0; i < a.length; ++i)if (n = W(t, a[i]), o = W(r, a[i]), n.max < o.min || o.max < n.min) return !1;\n        return !0;\n    },\n    /**\n   * @private\n   */ _points: function() {\n        var e = this, t = e._rect, r = e._rotation, a = e.center();\n        return [\n            b({\n                x: t.x,\n                y: t.y\n            }, a, r),\n            b({\n                x: t.x + t.w,\n                y: t.y\n            }, a, r),\n            b({\n                x: t.x + t.w,\n                y: t.y + t.h\n            }, a, r),\n            b({\n                x: t.x,\n                y: t.y + t.h\n            }, a, r)\n        ];\n    }\n});\nfunction H(e, t, r) {\n    var a = t.positioner(e, t), i = a.vx, n = a.vy;\n    if (!i && !n) return {\n        x: a.x,\n        y: a.y\n    };\n    var o = r.w, s = r.h, l = t.rotation, u = Math.abs(o / 2 * Math.cos(l)) + Math.abs(s / 2 * Math.sin(l)), v = Math.abs(o / 2 * Math.sin(l)) + Math.abs(s / 2 * Math.cos(l)), d = 1 / Math.max(Math.abs(i), Math.abs(n));\n    return u *= i * d, v *= n * d, u += t.offset * i, v += t.offset * n, {\n        x: a.x + u,\n        y: a.y + v\n    };\n}\nfunction xe(e, t) {\n    var r, a, i, n;\n    for(r = e.length - 1; r >= 0; --r)for(i = e[r].$layout, a = r - 1; a >= 0 && i._visible; --a)n = e[a].$layout, n._visible && i._box.intersects(n._box) && t(i, n);\n    return e;\n}\nfunction _e(e) {\n    var t, r, a, i, n, o, s;\n    for(t = 0, r = e.length; t < r; ++t)a = e[t], i = a.$layout, i._visible && (s = new Proxy(a._el, {\n        get: (l, u)=>l.getProps([\n                u\n            ], !0)[u]\n    }), n = a.geometry(), o = H(s, a.model(), n), i._box.update(o, n, a.rotation()));\n    return xe(e, function(l, u) {\n        var v = l._hidable, d = u._hidable;\n        v && d || d ? u._visible = !1 : v && (l._visible = !1);\n    });\n}\nvar w = {\n    prepare: function(e) {\n        var t = [], r, a, i, n, o;\n        for(r = 0, i = e.length; r < i; ++r)for(a = 0, n = e[r].length; a < n; ++a)o = e[r][a], t.push(o), o.$layout = {\n            _box: new G(),\n            _hidable: !1,\n            _visible: !0,\n            _set: r,\n            _idx: o._index\n        };\n        return t.sort(function(s, l) {\n            var u = s.$layout, v = l.$layout;\n            return u._idx === v._idx ? v._set - u._set : v._idx - u._idx;\n        }), this.update(t), t;\n    },\n    update: function(e) {\n        var t = !1, r, a, i, n, o;\n        for(r = 0, a = e.length; r < a; ++r)i = e[r], n = i.model(), o = i.$layout, o._hidable = n && n.display === \"auto\", o._visible = i.visible(), t |= o._hidable;\n        t && _e(e);\n    },\n    lookup: function(e, t) {\n        var r, a;\n        for(r = e.length - 1; r >= 0; --r)if (a = e[r].$layout, a && a._visible && a._box.contains(t)) return e[r];\n        return null;\n    },\n    draw: function(e, t) {\n        var r, a, i, n, o, s;\n        for(r = 0, a = t.length; r < a; ++r)i = t[r], n = i.$layout, n._visible && (o = i.geometry(), s = H(i._el, i.model(), o), n._box.update(s, o, i.rotation()), i.draw(e, s));\n    }\n}, ce = function(e) {\n    if ((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.i)(e)) return null;\n    var t = e, r, a, i;\n    if ((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.b)(e)) if (!(0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.i)(e.label)) t = e.label;\n    else if (!(0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.i)(e.r)) t = e.r;\n    else for(t = \"\", r = Object.keys(e), i = 0, a = r.length; i < a; ++i)t += (i !== 0 ? \", \" : \"\") + r[i] + \": \" + e[r[i]];\n    return \"\" + t;\n}, be = {\n    align: \"center\",\n    anchor: \"center\",\n    backgroundColor: null,\n    borderColor: null,\n    borderRadius: 0,\n    borderWidth: 0,\n    clamp: !1,\n    clip: !1,\n    color: void 0,\n    display: !0,\n    font: {\n        family: void 0,\n        lineHeight: 1.2,\n        size: void 0,\n        style: void 0,\n        weight: null\n    },\n    formatter: ce,\n    labels: void 0,\n    listeners: {},\n    offset: 4,\n    opacity: 1,\n    padding: {\n        top: 4,\n        right: 4,\n        bottom: 4,\n        left: 4\n    },\n    rotation: 0,\n    textAlign: \"start\",\n    textStrokeColor: void 0,\n    textStrokeWidth: 0,\n    textShadowBlur: 0,\n    textShadowColor: void 0\n}, h = \"$datalabels\", U = \"$default\";\nfunction pe(e, t) {\n    var r = e.datalabels, a = {}, i = [], n, o;\n    return r === !1 ? null : (r === !0 && (r = {}), t = (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.m)({}, [\n        t,\n        r\n    ]), n = t.labels || {}, o = Object.keys(n), delete t.labels, o.length ? o.forEach(function(s) {\n        n[s] && i.push((0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.m)({}, [\n            t,\n            n[s],\n            {\n                _key: s\n            }\n        ]));\n    }) : i.push(t), a = i.reduce(function(s, l) {\n        return (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.e)(l.listeners || {}, function(u, v) {\n            s[v] = s[v] || {}, s[v][l._key || U] = u;\n        }), delete l.listeners, s;\n    }, {}), {\n        labels: i,\n        listeners: a\n    });\n}\nfunction R(e, t, r, a) {\n    if (t) {\n        var i = r.$context, n = r.$groups, o;\n        t[n._set] && (o = t[n._set][n._key], o && (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.c)(o, [\n            i,\n            a\n        ]) === !0 && (e[h]._dirty = !0, r.update(i)));\n    }\n}\nfunction me(e, t, r, a, i) {\n    var n, o;\n    !r && !a || (r ? a ? r !== a && (o = n = !0) : o = !0 : n = !0, o && R(e, t.leave, r, i), n && R(e, t.enter, a, i));\n}\nfunction we(e, t) {\n    var r = e[h], a = r._listeners, i, n;\n    if (!(!a.enter && !a.leave)) {\n        if (t.type === \"mousemove\") n = w.lookup(r._labels, t);\n        else if (t.type !== \"mouseout\") return;\n        i = r._hovered, r._hovered = n, me(e, a, i, n, t);\n    }\n}\nfunction ge(e, t) {\n    var r = e[h], a = r._listeners.click, i = a && w.lookup(r._labels, t);\n    i && R(e, a, i, t);\n}\nvar Me = {\n    id: \"datalabels\",\n    defaults: be,\n    beforeInit: function(e) {\n        e[h] = {\n            _actives: []\n        };\n    },\n    beforeUpdate: function(e) {\n        var t = e[h];\n        t._listened = !1, t._listeners = {}, t._datasets = [], t._labels = [];\n    },\n    afterDatasetUpdate: function(e, t, r) {\n        var a = t.index, i = e[h], n = i._datasets[a] = [], o = e.isDatasetVisible(a), s = e.data.datasets[a], l = pe(s, r), u = t.meta.data || [], v = e.ctx, d, y, $, T, S, B, c, _;\n        for(v.save(), d = 0, $ = u.length; d < $; ++d)if (c = u[d], c[h] = [], o && c && e.getDataVisibility(d) && !c.skip) for(y = 0, T = l.labels.length; y < T; ++y)S = l.labels[y], B = S._key, _ = new L(S, v, c, d), _.$groups = {\n            _set: a,\n            _key: B || U\n        }, _.$context = {\n            active: !1,\n            chart: e,\n            dataIndex: d,\n            dataset: s,\n            datasetIndex: a\n        }, _.update(_.$context), c[h].push(_), n.push(_);\n        v.restore(), (0,_chart_es_js__WEBPACK_IMPORTED_MODULE_0__.m)(i._listeners, l.listeners, {\n            merger: function(k, C, X) {\n                C[k] = C[k] || {}, C[k][t.index] = X[k], i._listened = !0;\n            }\n        });\n    },\n    afterUpdate: function(e) {\n        e[h]._labels = w.prepare(e[h]._datasets);\n    },\n    // Draw labels on top of all dataset elements\n    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/29\n    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/32\n    afterDatasetsDraw: function(e) {\n        w.draw(e, e[h]._labels);\n    },\n    beforeEvent: function(e, t) {\n        if (e[h]._listened) {\n            var r = t.event;\n            switch(r.type){\n                case \"mousemove\":\n                case \"mouseout\":\n                    we(e, r);\n                    break;\n                case \"click\":\n                    ge(e, r);\n                    break;\n            }\n        }\n    },\n    afterEvent: function(e) {\n        var t = e[h], r = t._actives, a = t._actives = e.getActiveElements(), i = m.arrayDiff(r, a), n, o, s, l, u, v, d;\n        for(n = 0, o = i.length; n < o; ++n)if (u = i[n], u[1]) for(d = u[0].element[h] || [], s = 0, l = d.length; s < l; ++s)v = d[s], v.$context.active = u[1] === 1, v.update(v.$context);\n        (t._dirty || i.length) && (w.update(t._labels), e.render()), delete t._dirty;\n    }\n};\n //# sourceMappingURL=chartjs-plugin-datalabels.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tw-elements/dist/js/chartjs-plugin-datalabels.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tw-elements/dist/js/tw-elements.es.min.js":
/*!****************************************************************!*\
  !*** ./node_modules/tw-elements/dist/js/tw-elements.es.min.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alert: () => (/* binding */ Ko),\n/* harmony export */   Animate: () => (/* binding */ wr),\n/* harmony export */   Autocomplete: () => (/* binding */ id),\n/* harmony export */   Button: () => (/* binding */ kc),\n/* harmony export */   Carousel: () => (/* binding */ Xt),\n/* harmony export */   Chart: () => (/* binding */ Lh),\n/* harmony export */   Chip: () => (/* binding */ vi),\n/* harmony export */   ChipsInput: () => (/* binding */ XA),\n/* harmony export */   Clipboard: () => (/* binding */ Uh),\n/* harmony export */   Collapse: () => (/* binding */ Qt),\n/* harmony export */   Datatable: () => (/* binding */ Hh),\n/* harmony export */   Datepicker: () => (/* binding */ og),\n/* harmony export */   Datetimepicker: () => (/* binding */ Qh),\n/* harmony export */   Dropdown: () => (/* binding */ $t),\n/* harmony export */   InfiniteScroll: () => (/* binding */ Xh),\n/* harmony export */   Input: () => (/* binding */ V),\n/* harmony export */   LazyLoad: () => (/* binding */ or),\n/* harmony export */   Lightbox: () => (/* binding */ nn),\n/* harmony export */   LoadingManagement: () => (/* binding */ Gh),\n/* harmony export */   Modal: () => (/* binding */ zo),\n/* harmony export */   MultiRangeSlider: () => (/* binding */ sd),\n/* harmony export */   Offcanvas: () => (/* binding */ js),\n/* harmony export */   PerfectScrollbar: () => (/* binding */ Bh),\n/* harmony export */   Popconfirm: () => (/* binding */ Wh),\n/* harmony export */   Popover: () => (/* binding */ nh),\n/* harmony export */   Rating: () => (/* binding */ GA),\n/* harmony export */   Ripple: () => (/* binding */ ei),\n/* harmony export */   ScrollSpy: () => (/* binding */ ah),\n/* harmony export */   Select: () => (/* binding */ kr),\n/* harmony export */   Sidenav: () => (/* binding */ Ci),\n/* harmony export */   SmoothScroll: () => (/* binding */ zh),\n/* harmony export */   Stepper: () => (/* binding */ UA),\n/* harmony export */   Sticky: () => (/* binding */ td),\n/* harmony export */   Tab: () => (/* binding */ lh),\n/* harmony export */   Timepicker: () => (/* binding */ Sg),\n/* harmony export */   Toast: () => (/* binding */ Xo),\n/* harmony export */   Tooltip: () => (/* binding */ ri),\n/* harmony export */   Touch: () => (/* binding */ Kh),\n/* harmony export */   Validation: () => (/* binding */ jh),\n/* harmony export */   initTE: () => (/* binding */ qA)\n/* harmony export */ });\n/*!\n* TW Elements 1.1.0\n* \n* TW Elements is an open-source UI kit of advanced components for TailwindCSS.\n* Copyright © 2023 MDBootstrap.com\n* \n* Unless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n* In addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\n* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\n* \n* If you would like to purchase a COMMERCIAL, non-AGPL license for TWE, please check out our pricing: https://tw-elements.com/pro/\n*/ var hd = Object.defineProperty;\nvar dd = (s, t, e)=>t in s ? hd(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e;\nvar wt = (s, t, e)=>(dd(s, typeof t != \"symbol\" ? t + \"\" : t, e), e);\nconst In = (()=>{\n    const s = {};\n    let t = 1;\n    return {\n        set (e, i, n) {\n            typeof e[i] > \"u\" && (e[i] = {\n                key: i,\n                id: t\n            }, t++), s[e[i].id] = n;\n        },\n        get (e, i) {\n            if (!e || typeof e[i] > \"u\") return null;\n            const n = e[i];\n            return n.key === i ? s[n.id] : null;\n        },\n        delete (e, i) {\n            if (typeof e[i] > \"u\") return;\n            const n = e[i];\n            n.key === i && (delete s[n.id], delete e[i]);\n        }\n    };\n})(), A = {\n    setData (s, t, e) {\n        In.set(s, t, e);\n    },\n    getData (s, t) {\n        return In.get(s, t);\n    },\n    removeData (s, t) {\n        In.delete(s, t);\n    }\n}, ud = 1e6, pd = 1e3, Ho = \"transitionend\", _d = (s)=>s == null ? `${s}` : ({}).toString.call(s).match(/\\s([a-z]+)/i)[1].toLowerCase(), et = (s)=>{\n    do s += Math.floor(Math.random() * ud);\n    while (document.getElementById(s));\n    return s;\n}, pc = (s)=>{\n    let t = s.getAttribute(\"data-te-target\");\n    if (!t || t === \"#\") {\n        let e = s.getAttribute(\"href\");\n        if (!e || !e.includes(\"#\") && !e.startsWith(\".\")) return null;\n        e.includes(\"#\") && !e.startsWith(\"#\") && (e = `#${e.split(\"#\")[1]}`), t = e && e !== \"#\" ? e.trim() : null;\n    }\n    return t;\n}, lr = (s)=>{\n    const t = pc(s);\n    return t && document.querySelector(t) ? t : null;\n}, te = (s)=>{\n    const t = pc(s);\n    return t ? document.querySelector(t) : null;\n}, cn = (s)=>{\n    if (!s) return 0;\n    let { transitionDuration: t, transitionDelay: e } = window.getComputedStyle(s);\n    const i = Number.parseFloat(t), n = Number.parseFloat(e);\n    return !i && !n ? 0 : (t = t.split(\",\")[0], e = e.split(\",\")[0], (Number.parseFloat(t) + Number.parseFloat(e)) * pd);\n}, _c = (s)=>{\n    s.dispatchEvent(new Event(Ho));\n}, Xe = (s)=>!s || typeof s != \"object\" ? !1 : (typeof s.jquery < \"u\" && (s = s[0]), typeof s.nodeType < \"u\"), ee = (s)=>Xe(s) ? s.jquery ? s[0] : s : typeof s == \"string\" && s.length > 0 ? document.querySelector(s) : null, I = (s, t, e)=>{\n    Object.keys(e).forEach((i)=>{\n        const n = e[i], o = t[i], r = o && Xe(o) ? \"element\" : _d(o);\n        if (!new RegExp(n).test(r)) throw new Error(`${s.toUpperCase()}: Option \"${i}\" provided type \"${r}\" but expected type \"${n}\".`);\n    });\n}, Mt = (s)=>{\n    if (!s || s.getClientRects().length === 0) return !1;\n    if (s.style && s.parentNode && s.parentNode.style) {\n        const t = getComputedStyle(s), e = getComputedStyle(s.parentNode);\n        return getComputedStyle(s).getPropertyValue(\"visibility\") === \"visible\" || t.display !== \"none\" && e.display !== \"none\" && t.visibility !== \"hidden\";\n    }\n    return !1;\n}, be = (s)=>!s || s.nodeType !== Node.ELEMENT_NODE || s.classList.contains(\"disabled\") ? !0 : typeof s.disabled < \"u\" ? s.disabled : s.hasAttribute(\"disabled\") && s.getAttribute(\"disabled\") !== \"false\", fc = (s)=>{\n    if (!document.documentElement.attachShadow) return null;\n    if (typeof s.getRootNode == \"function\") {\n        const t = s.getRootNode();\n        return t instanceof ShadowRoot ? t : null;\n    }\n    return s instanceof ShadowRoot ? s : s.parentNode ? fc(s.parentNode) : null;\n}, hn = ()=>function() {}, si = (s)=>{\n    s.offsetHeight;\n}, mc = ()=>{\n    const { jQuery: s } = window;\n    return s && !document.body.hasAttribute(\"data-te-no-jquery\") ? s : null;\n}, Dn = [], gc = (s)=>{\n    document.readyState === \"loading\" ? (Dn.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n        Dn.forEach((t)=>t());\n    }), Dn.push(s)) : s();\n}, W = ()=>document.documentElement.dir === \"rtl\", fd = (s)=>Array.from(s), $ = (s)=>document.createElement(s), ge = (s)=>{\n    typeof s == \"function\" && s();\n}, bc = (s, t, e = !0)=>{\n    if (!e) {\n        ge(s);\n        return;\n    }\n    const i = 5, n = cn(t) + i;\n    let o = !1;\n    const r = ({ target: a })=>{\n        a === t && (o = !0, t.removeEventListener(Ho, r), ge(s));\n    };\n    t.addEventListener(Ho, r), setTimeout(()=>{\n        o || _c(t);\n    }, n);\n}, vc = (s, t, e, i)=>{\n    let n = s.indexOf(t);\n    if (n === -1) return s[!e && i ? s.length - 1 : 0];\n    const o = s.length;\n    return n += e ? 1 : -1, i && (n = (n + o) % o), s[Math.max(0, Math.min(n, o - 1))];\n}, md = /[^.]*(?=\\..*)\\.|.*/, gd = /\\..*/, bd = /::\\d+$/, $n = {};\nlet Hr = 1;\nconst vd = {\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n}, Td = /^(mouseenter|mouseleave)/i, Tc = /* @__PURE__ */ new Set([\n    \"click\",\n    \"dblclick\",\n    \"mouseup\",\n    \"mousedown\",\n    \"contextmenu\",\n    \"mousewheel\",\n    \"DOMMouseScroll\",\n    \"mouseover\",\n    \"mouseout\",\n    \"mousemove\",\n    \"selectstart\",\n    \"selectend\",\n    \"keydown\",\n    \"keypress\",\n    \"keyup\",\n    \"orientationchange\",\n    \"touchstart\",\n    \"touchmove\",\n    \"touchend\",\n    \"touchcancel\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerup\",\n    \"pointerleave\",\n    \"pointercancel\",\n    \"gesturestart\",\n    \"gesturechange\",\n    \"gestureend\",\n    \"focus\",\n    \"blur\",\n    \"change\",\n    \"reset\",\n    \"select\",\n    \"submit\",\n    \"focusin\",\n    \"focusout\",\n    \"load\",\n    \"unload\",\n    \"beforeunload\",\n    \"resize\",\n    \"move\",\n    \"DOMContentLoaded\",\n    \"readystatechange\",\n    \"error\",\n    \"abort\",\n    \"scroll\"\n]);\nfunction Ec(s, t) {\n    return t && `${t}::${Hr++}` || s.uidEvent || Hr++;\n}\nfunction Cc(s) {\n    const t = Ec(s);\n    return s.uidEvent = t, $n[t] = $n[t] || {}, $n[t];\n}\nfunction Ed(s, t) {\n    return function e(i) {\n        return i.delegateTarget = s, e.oneOff && c.off(s, i.type, t), t.apply(s, [\n            i\n        ]);\n    };\n}\nfunction Cd(s, t, e) {\n    return function i(n) {\n        const o = s.querySelectorAll(t);\n        for(let { target: r } = n; r && r !== this; r = r.parentNode)for(let a = o.length; a--; \"\")if (o[a] === r) return n.delegateTarget = r, i.oneOff && c.off(s, n.type, e), e.apply(r, [\n            n\n        ]);\n        return null;\n    };\n}\nfunction Ac(s, t, e = null) {\n    const i = Object.keys(s);\n    for(let n = 0, o = i.length; n < o; n++){\n        const r = s[i[n]];\n        if (r.originalHandler === t && r.delegationSelector === e) return r;\n    }\n    return null;\n}\nfunction yc(s, t, e) {\n    const i = typeof t == \"string\", n = i ? e : t;\n    let o = wc(s);\n    return Tc.has(o) || (o = s), [\n        i,\n        n,\n        o\n    ];\n}\nfunction Vr(s, t, e, i, n) {\n    if (typeof t != \"string\" || !s) return;\n    if (e || (e = i, i = null), Td.test(t)) {\n        const g = (m)=>function(b) {\n                if (!b.relatedTarget || b.relatedTarget !== b.delegateTarget && !b.delegateTarget.contains(b.relatedTarget)) return m.call(this, b);\n            };\n        i ? i = g(i) : e = g(e);\n    }\n    const [o, r, a] = yc(t, e, i), l = Cc(s), p = l[a] || (l[a] = {}), u = Ac(p, r, o ? e : null);\n    if (u) {\n        u.oneOff = u.oneOff && n;\n        return;\n    }\n    const _ = Ec(r, t.replace(md, \"\")), f = o ? Cd(s, e, i) : Ed(s, e);\n    f.delegationSelector = o ? e : null, f.originalHandler = r, f.oneOff = n, f.uidEvent = _, p[_] = f, s.addEventListener(a, f, o);\n}\nfunction Vo(s, t, e, i, n) {\n    const o = Ac(t[e], i, n);\n    o && (s.removeEventListener(e, o, !!n), delete t[e][o.uidEvent]);\n}\nfunction Ad(s, t, e, i) {\n    const n = t[e] || {};\n    Object.keys(n).forEach((o)=>{\n        if (o.includes(i)) {\n            const r = n[o];\n            Vo(s, t, e, r.originalHandler, r.delegationSelector);\n        }\n    });\n}\nfunction wc(s) {\n    return s = s.replace(gd, \"\"), vd[s] || s;\n}\nconst c = {\n    on (s, t, e, i) {\n        Vr(s, t, e, i, !1);\n    },\n    one (s, t, e, i) {\n        Vr(s, t, e, i, !0);\n    },\n    off (s, t, e, i) {\n        if (typeof t != \"string\" || !s) return;\n        const [n, o, r] = yc(t, e, i), a = r !== t, l = Cc(s), p = t.startsWith(\".\");\n        if (typeof o < \"u\") {\n            if (!l || !l[r]) return;\n            Vo(s, l, r, o, n ? e : null);\n            return;\n        }\n        p && Object.keys(l).forEach((_)=>{\n            Ad(s, l, _, t.slice(1));\n        });\n        const u = l[r] || {};\n        Object.keys(u).forEach((_)=>{\n            const f = _.replace(bd, \"\");\n            if (!a || t.includes(f)) {\n                const g = u[_];\n                Vo(s, l, r, g.originalHandler, g.delegationSelector);\n            }\n        });\n    },\n    trigger (s, t, e) {\n        if (typeof t != \"string\" || !s) return null;\n        const i = mc(), n = wc(t), o = t !== n, r = Tc.has(n);\n        let a, l = !0, p = !0, u = !1, _ = null;\n        return o && i && (a = i.Event(t, e), i(s).trigger(a), l = !a.isPropagationStopped(), p = !a.isImmediatePropagationStopped(), u = a.isDefaultPrevented()), r ? (_ = document.createEvent(\"HTMLEvents\"), _.initEvent(n, l, !0)) : _ = new CustomEvent(t, {\n            bubbles: l,\n            cancelable: !0\n        }), typeof e < \"u\" && Object.keys(e).forEach((f)=>{\n            Object.defineProperty(_, f, {\n                get () {\n                    return e[f];\n                }\n            });\n        }), u && _.preventDefault(), p && s.dispatchEvent(_), _.defaultPrevented && typeof a < \"u\" && a.preventDefault(), _;\n    }\n}, K = {\n    on (s, t, e, i) {\n        const n = t.split(\" \");\n        for(let o = 0; o < n.length; o++)c.on(s, n[o], e, i);\n    },\n    off (s, t, e, i) {\n        const n = t.split(\" \");\n        for(let o = 0; o < n.length; o++)c.off(s, n[o], e, i);\n    }\n}, yd = \"5.1.3\";\nclass ft {\n    constructor(t){\n        t = ee(t), t && (this._element = t, A.setData(this._element, this.constructor.DATA_KEY, this));\n    }\n    dispose() {\n        A.removeData(this._element, this.constructor.DATA_KEY), c.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t)=>{\n            this[t] = null;\n        });\n    }\n    _queueCallback(t, e, i = !0) {\n        bc(t, e, i);\n    }\n    /** Static */ static getInstance(t) {\n        return A.getData(ee(t), this.DATA_KEY);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static get VERSION() {\n        return yd;\n    }\n    static get NAME() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n    static get DATA_KEY() {\n        return `te.${this.NAME}`;\n    }\n    static get EVENT_KEY() {\n        return `.${this.DATA_KEY}`;\n    }\n}\nconst wd = \"button\", kd = \"active\";\nclass kc extends ft {\n    // Getters\n    static get NAME() {\n        return wd;\n    }\n    // Public\n    toggle() {\n        this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(kd));\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = kc.getOrCreateInstance(this);\n            t === \"toggle\" && e[t]();\n        });\n    }\n}\nvar st = \"top\", ut = \"bottom\", pt = \"right\", nt = \"left\", ji = \"auto\", ni = [\n    st,\n    ut,\n    pt,\n    nt\n], Ae = \"start\", Ge = \"end\", xc = \"clippingParents\", cr = \"viewport\", Be = \"popper\", Oc = \"reference\", Wo = /* @__PURE__ */ ni.reduce(function(s, t) {\n    return s.concat([\n        t + \"-\" + Ae,\n        t + \"-\" + Ge\n    ]);\n}, []), hr = /* @__PURE__ */ [].concat(ni, [\n    ji\n]).reduce(function(s, t) {\n    return s.concat([\n        t,\n        t + \"-\" + Ae,\n        t + \"-\" + Ge\n    ]);\n}, []), Sc = \"beforeRead\", Ic = \"read\", Dc = \"afterRead\", $c = \"beforeMain\", Lc = \"main\", Nc = \"afterMain\", Mc = \"beforeWrite\", Rc = \"write\", Pc = \"afterWrite\", dn = [\n    Sc,\n    Ic,\n    Dc,\n    $c,\n    Lc,\n    Nc,\n    Mc,\n    Rc,\n    Pc\n];\nfunction Rt(s) {\n    return s ? (s.nodeName || \"\").toLowerCase() : null;\n}\nfunction _t(s) {\n    if (s == null) return window;\n    if (s.toString() !== \"[object Window]\") {\n        var t = s.ownerDocument;\n        return t && t.defaultView || window;\n    }\n    return s;\n}\nfunction ye(s) {\n    var t = _t(s).Element;\n    return s instanceof t || s instanceof Element;\n}\nfunction dt(s) {\n    var t = _t(s).HTMLElement;\n    return s instanceof t || s instanceof HTMLElement;\n}\nfunction dr(s) {\n    if (typeof ShadowRoot > \"u\") return !1;\n    var t = _t(s).ShadowRoot;\n    return s instanceof t || s instanceof ShadowRoot;\n}\nfunction xd(s) {\n    var t = s.state;\n    Object.keys(t.elements).forEach(function(e) {\n        var i = t.styles[e] || {}, n = t.attributes[e] || {}, o = t.elements[e];\n        !dt(o) || !Rt(o) || (Object.assign(o.style, i), Object.keys(n).forEach(function(r) {\n            var a = n[r];\n            a === !1 ? o.removeAttribute(r) : o.setAttribute(r, a === !0 ? \"\" : a);\n        }));\n    });\n}\nfunction Od(s) {\n    var t = s.state, e = {\n        popper: {\n            position: t.options.strategy,\n            left: \"0\",\n            top: \"0\",\n            margin: \"0\"\n        },\n        arrow: {\n            position: \"absolute\"\n        },\n        reference: {}\n    };\n    return Object.assign(t.elements.popper.style, e.popper), t.styles = e, t.elements.arrow && Object.assign(t.elements.arrow.style, e.arrow), function() {\n        Object.keys(t.elements).forEach(function(i) {\n            var n = t.elements[i], o = t.attributes[i] || {}, r = Object.keys(t.styles.hasOwnProperty(i) ? t.styles[i] : e[i]), a = r.reduce(function(l, p) {\n                return l[p] = \"\", l;\n            }, {});\n            !dt(n) || !Rt(n) || (Object.assign(n.style, a), Object.keys(o).forEach(function(l) {\n                n.removeAttribute(l);\n            }));\n        });\n    };\n}\nconst ur = {\n    name: \"applyStyles\",\n    enabled: !0,\n    phase: \"write\",\n    fn: xd,\n    effect: Od,\n    requires: [\n        \"computeStyles\"\n    ]\n};\nfunction Et(s) {\n    return s.split(\"-\")[0];\n}\nvar ve = Math.max, un = Math.min, qe = Math.round;\nfunction Fo() {\n    var s = navigator.userAgentData;\n    return s != null && s.brands && Array.isArray(s.brands) ? s.brands.map(function(t) {\n        return t.brand + \"/\" + t.version;\n    }).join(\" \") : navigator.userAgent;\n}\nfunction Bc() {\n    return !/^((?!chrome|android).)*safari/i.test(Fo());\n}\nfunction Ze(s, t, e) {\n    t === void 0 && (t = !1), e === void 0 && (e = !1);\n    var i = s.getBoundingClientRect(), n = 1, o = 1;\n    t && dt(s) && (n = s.offsetWidth > 0 && qe(i.width) / s.offsetWidth || 1, o = s.offsetHeight > 0 && qe(i.height) / s.offsetHeight || 1);\n    var r = ye(s) ? _t(s) : window, a = r.visualViewport, l = !Bc() && e, p = (i.left + (l && a ? a.offsetLeft : 0)) / n, u = (i.top + (l && a ? a.offsetTop : 0)) / o, _ = i.width / n, f = i.height / o;\n    return {\n        width: _,\n        height: f,\n        top: u,\n        right: p + _,\n        bottom: u + f,\n        left: p,\n        x: p,\n        y: u\n    };\n}\nfunction pr(s) {\n    var t = Ze(s), e = s.offsetWidth, i = s.offsetHeight;\n    return Math.abs(t.width - e) <= 1 && (e = t.width), Math.abs(t.height - i) <= 1 && (i = t.height), {\n        x: s.offsetLeft,\n        y: s.offsetTop,\n        width: e,\n        height: i\n    };\n}\nfunction Hc(s, t) {\n    var e = t.getRootNode && t.getRootNode();\n    if (s.contains(t)) return !0;\n    if (e && dr(e)) {\n        var i = t;\n        do {\n            if (i && s.isSameNode(i)) return !0;\n            i = i.parentNode || i.host;\n        }while (i);\n    }\n    return !1;\n}\nfunction At(s) {\n    return _t(s).getComputedStyle(s);\n}\nfunction Sd(s) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(Rt(s)) >= 0;\n}\nfunction ie(s) {\n    return ((ye(s) ? s.ownerDocument : // $FlowFixMe[prop-missing]\n    s.document) || window.document).documentElement;\n}\nfunction mn(s) {\n    return Rt(s) === \"html\" ? s : // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    s.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    s.parentNode || // DOM Element detected\n    (dr(s) ? s.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    ie(s);\n}\nfunction Wr(s) {\n    return !dt(s) || // https://github.com/popperjs/popper-core/issues/837\n    At(s).position === \"fixed\" ? null : s.offsetParent;\n}\nfunction Id(s) {\n    var t = /firefox/i.test(Fo()), e = /Trident/i.test(Fo());\n    if (e && dt(s)) {\n        var i = At(s);\n        if (i.position === \"fixed\") return null;\n    }\n    var n = mn(s);\n    for(dr(n) && (n = n.host); dt(n) && [\n        \"html\",\n        \"body\"\n    ].indexOf(Rt(n)) < 0;){\n        var o = At(n);\n        if (o.transform !== \"none\" || o.perspective !== \"none\" || o.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(o.willChange) !== -1 || t && o.willChange === \"filter\" || t && o.filter && o.filter !== \"none\") return n;\n        n = n.parentNode;\n    }\n    return null;\n}\nfunction Ki(s) {\n    for(var t = _t(s), e = Wr(s); e && Sd(e) && At(e).position === \"static\";)e = Wr(e);\n    return e && (Rt(e) === \"html\" || Rt(e) === \"body\" && At(e).position === \"static\") ? t : e || Id(s) || t;\n}\nfunction _r(s) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(s) >= 0 ? \"x\" : \"y\";\n}\nfunction Mi(s, t, e) {\n    return ve(s, un(t, e));\n}\nfunction Dd(s, t, e) {\n    var i = Mi(s, t, e);\n    return i > e ? e : i;\n}\nfunction Vc() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction Wc(s) {\n    return Object.assign({}, Vc(), s);\n}\nfunction Fc(s, t) {\n    return t.reduce(function(e, i) {\n        return e[i] = s, e;\n    }, {});\n}\nvar $d = function(t, e) {\n    return t = typeof t == \"function\" ? t(Object.assign({}, e.rects, {\n        placement: e.placement\n    })) : t, Wc(typeof t != \"number\" ? t : Fc(t, ni));\n};\nfunction Ld(s) {\n    var t, e = s.state, i = s.name, n = s.options, o = e.elements.arrow, r = e.modifiersData.popperOffsets, a = Et(e.placement), l = _r(a), p = [\n        nt,\n        pt\n    ].indexOf(a) >= 0, u = p ? \"height\" : \"width\";\n    if (!(!o || !r)) {\n        var _ = $d(n.padding, e), f = pr(o), g = l === \"y\" ? st : nt, m = l === \"y\" ? ut : pt, b = e.rects.reference[u] + e.rects.reference[l] - r[l] - e.rects.popper[u], v = r[l] - e.rects.reference[l], T = Ki(o), y = T ? l === \"y\" ? T.clientHeight || 0 : T.clientWidth || 0 : 0, C = b / 2 - v / 2, E = _[g], w = y - f[u] - _[m], k = y / 2 - f[u] / 2 + C, D = Mi(E, k, w), O = l;\n        e.modifiersData[i] = (t = {}, t[O] = D, t.centerOffset = D - k, t);\n    }\n}\nfunction Nd(s) {\n    var t = s.state, e = s.options, i = e.element, n = i === void 0 ? \"[data-popper-arrow]\" : i;\n    if (n != null && !(typeof n == \"string\" && (n = t.elements.popper.querySelector(n), !n))) {\n        if (({}).NODE_ENV !== \"production\" && (dt(n) || console.error([\n            'Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).',\n            \"To use an SVG arrow, wrap it in an HTMLElement that will be used as\",\n            \"the arrow.\"\n        ].join(\" \"))), !Hc(t.elements.popper, n)) {\n            ({}).NODE_ENV !== \"production\" && console.error([\n                'Popper: \"arrow\" modifier\\'s `element` must be a child of the popper',\n                \"element.\"\n            ].join(\" \"));\n            return;\n        }\n        t.elements.arrow = n;\n    }\n}\nconst Yc = {\n    name: \"arrow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: Ld,\n    effect: Nd,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction Qe(s) {\n    return s.split(\"-\")[1];\n}\nvar Md = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n};\nfunction Rd(s, t) {\n    var e = s.x, i = s.y, n = t.devicePixelRatio || 1;\n    return {\n        x: qe(e * n) / n || 0,\n        y: qe(i * n) / n || 0\n    };\n}\nfunction Fr(s) {\n    var t, e = s.popper, i = s.popperRect, n = s.placement, o = s.variation, r = s.offsets, a = s.position, l = s.gpuAcceleration, p = s.adaptive, u = s.roundOffsets, _ = s.isFixed, f = r.x, g = f === void 0 ? 0 : f, m = r.y, b = m === void 0 ? 0 : m, v = typeof u == \"function\" ? u({\n        x: g,\n        y: b\n    }) : {\n        x: g,\n        y: b\n    };\n    g = v.x, b = v.y;\n    var T = r.hasOwnProperty(\"x\"), y = r.hasOwnProperty(\"y\"), C = nt, E = st, w = window;\n    if (p) {\n        var k = Ki(e), D = \"clientHeight\", O = \"clientWidth\";\n        if (k === _t(e) && (k = ie(e), At(k).position !== \"static\" && a === \"absolute\" && (D = \"scrollHeight\", O = \"scrollWidth\")), k = k, n === st || (n === nt || n === pt) && o === Ge) {\n            E = ut;\n            var x = _ && k === w && w.visualViewport ? w.visualViewport.height : // $FlowFixMe[prop-missing]\n            k[D];\n            b -= x - i.height, b *= l ? 1 : -1;\n        }\n        if (n === nt || (n === st || n === ut) && o === Ge) {\n            C = pt;\n            var L = _ && k === w && w.visualViewport ? w.visualViewport.width : // $FlowFixMe[prop-missing]\n            k[O];\n            g -= L - i.width, g *= l ? 1 : -1;\n        }\n    }\n    var S = Object.assign({\n        position: a\n    }, p && Md), N = u === !0 ? Rd({\n        x: g,\n        y: b\n    }, _t(e)) : {\n        x: g,\n        y: b\n    };\n    if (g = N.x, b = N.y, l) {\n        var P;\n        return Object.assign({}, S, (P = {}, P[E] = y ? \"0\" : \"\", P[C] = T ? \"0\" : \"\", P.transform = (w.devicePixelRatio || 1) <= 1 ? \"translate(\" + g + \"px, \" + b + \"px)\" : \"translate3d(\" + g + \"px, \" + b + \"px, 0)\", P));\n    }\n    return Object.assign({}, S, (t = {}, t[E] = y ? b + \"px\" : \"\", t[C] = T ? g + \"px\" : \"\", t.transform = \"\", t));\n}\nfunction Pd(s) {\n    var t = s.state, e = s.options, i = e.gpuAcceleration, n = i === void 0 ? !0 : i, o = e.adaptive, r = o === void 0 ? !0 : o, a = e.roundOffsets, l = a === void 0 ? !0 : a;\n    if (({}).NODE_ENV !== \"production\") {\n        var p = At(t.elements.popper).transitionProperty || \"\";\n        r && [\n            \"transform\",\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ].some(function(_) {\n            return p.indexOf(_) >= 0;\n        }) && console.warn([\n            \"Popper: Detected CSS transitions on at least one of the following\",\n            'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".',\n            `\n\n`,\n            'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow',\n            \"for smooth transitions, or remove these properties from the CSS\",\n            \"transition declaration on the popper element if only transitioning\",\n            \"opacity or background-color for example.\",\n            `\n\n`,\n            \"We recommend using the popper element as a wrapper around an inner\",\n            \"element that can have any CSS property transitioned for animations.\"\n        ].join(\" \"));\n    }\n    var u = {\n        placement: Et(t.placement),\n        variation: Qe(t.placement),\n        popper: t.elements.popper,\n        popperRect: t.rects.popper,\n        gpuAcceleration: n,\n        isFixed: t.options.strategy === \"fixed\"\n    };\n    t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, Fr(Object.assign({}, u, {\n        offsets: t.modifiersData.popperOffsets,\n        position: t.options.strategy,\n        adaptive: r,\n        roundOffsets: l\n    })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, Fr(Object.assign({}, u, {\n        offsets: t.modifiersData.arrow,\n        position: \"absolute\",\n        adaptive: !1,\n        roundOffsets: l\n    })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-placement\": t.placement\n    });\n}\nconst fr = {\n    name: \"computeStyles\",\n    enabled: !0,\n    phase: \"beforeWrite\",\n    fn: Pd,\n    data: {}\n};\nvar ns = {\n    passive: !0\n};\nfunction Bd(s) {\n    var t = s.state, e = s.instance, i = s.options, n = i.scroll, o = n === void 0 ? !0 : n, r = i.resize, a = r === void 0 ? !0 : r, l = _t(t.elements.popper), p = [].concat(t.scrollParents.reference, t.scrollParents.popper);\n    return o && p.forEach(function(u) {\n        u.addEventListener(\"scroll\", e.update, ns);\n    }), a && l.addEventListener(\"resize\", e.update, ns), function() {\n        o && p.forEach(function(u) {\n            u.removeEventListener(\"scroll\", e.update, ns);\n        }), a && l.removeEventListener(\"resize\", e.update, ns);\n    };\n}\nconst mr = {\n    name: \"eventListeners\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function() {},\n    effect: Bd,\n    data: {}\n};\nvar Hd = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction Ws(s) {\n    return s.replace(/left|right|bottom|top/g, function(t) {\n        return Hd[t];\n    });\n}\nvar Vd = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction Yr(s) {\n    return s.replace(/start|end/g, function(t) {\n        return Vd[t];\n    });\n}\nfunction gr(s) {\n    var t = _t(s), e = t.pageXOffset, i = t.pageYOffset;\n    return {\n        scrollLeft: e,\n        scrollTop: i\n    };\n}\nfunction br(s) {\n    return Ze(ie(s)).left + gr(s).scrollLeft;\n}\nfunction Wd(s, t) {\n    var e = _t(s), i = ie(s), n = e.visualViewport, o = i.clientWidth, r = i.clientHeight, a = 0, l = 0;\n    if (n) {\n        o = n.width, r = n.height;\n        var p = Bc();\n        (p || !p && t === \"fixed\") && (a = n.offsetLeft, l = n.offsetTop);\n    }\n    return {\n        width: o,\n        height: r,\n        x: a + br(s),\n        y: l\n    };\n}\nfunction Fd(s) {\n    var t, e = ie(s), i = gr(s), n = (t = s.ownerDocument) == null ? void 0 : t.body, o = ve(e.scrollWidth, e.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), r = ve(e.scrollHeight, e.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), a = -i.scrollLeft + br(s), l = -i.scrollTop;\n    return At(n || e).direction === \"rtl\" && (a += ve(e.clientWidth, n ? n.clientWidth : 0) - o), {\n        width: o,\n        height: r,\n        x: a,\n        y: l\n    };\n}\nfunction vr(s) {\n    var t = At(s), e = t.overflow, i = t.overflowX, n = t.overflowY;\n    return /auto|scroll|overlay|hidden/.test(e + n + i);\n}\nfunction jc(s) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(Rt(s)) >= 0 ? s.ownerDocument.body : dt(s) && vr(s) ? s : jc(mn(s));\n}\nfunction Ri(s, t) {\n    var e;\n    t === void 0 && (t = []);\n    var i = jc(s), n = i === ((e = s.ownerDocument) == null ? void 0 : e.body), o = _t(i), r = n ? [\n        o\n    ].concat(o.visualViewport || [], vr(i) ? i : []) : i, a = t.concat(r);\n    return n ? a : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    a.concat(Ri(mn(r)));\n}\nfunction Yo(s) {\n    return Object.assign({}, s, {\n        left: s.x,\n        top: s.y,\n        right: s.x + s.width,\n        bottom: s.y + s.height\n    });\n}\nfunction Yd(s, t) {\n    var e = Ze(s, !1, t === \"fixed\");\n    return e.top = e.top + s.clientTop, e.left = e.left + s.clientLeft, e.bottom = e.top + s.clientHeight, e.right = e.left + s.clientWidth, e.width = s.clientWidth, e.height = s.clientHeight, e.x = e.left, e.y = e.top, e;\n}\nfunction jr(s, t, e) {\n    return t === cr ? Yo(Wd(s, e)) : ye(t) ? Yd(t, e) : Yo(Fd(ie(s)));\n}\nfunction jd(s) {\n    var t = Ri(mn(s)), e = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(At(s).position) >= 0, i = e && dt(s) ? Ki(s) : s;\n    return ye(i) ? t.filter(function(n) {\n        return ye(n) && Hc(n, i) && Rt(n) !== \"body\";\n    }) : [];\n}\nfunction Kd(s, t, e, i) {\n    var n = t === \"clippingParents\" ? jd(s) : [].concat(t), o = [].concat(n, [\n        e\n    ]), r = o[0], a = o.reduce(function(l, p) {\n        var u = jr(s, p, i);\n        return l.top = ve(u.top, l.top), l.right = un(u.right, l.right), l.bottom = un(u.bottom, l.bottom), l.left = ve(u.left, l.left), l;\n    }, jr(s, r, i));\n    return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;\n}\nfunction Kc(s) {\n    var t = s.reference, e = s.element, i = s.placement, n = i ? Et(i) : null, o = i ? Qe(i) : null, r = t.x + t.width / 2 - e.width / 2, a = t.y + t.height / 2 - e.height / 2, l;\n    switch(n){\n        case st:\n            l = {\n                x: r,\n                y: t.y - e.height\n            };\n            break;\n        case ut:\n            l = {\n                x: r,\n                y: t.y + t.height\n            };\n            break;\n        case pt:\n            l = {\n                x: t.x + t.width,\n                y: a\n            };\n            break;\n        case nt:\n            l = {\n                x: t.x - e.width,\n                y: a\n            };\n            break;\n        default:\n            l = {\n                x: t.x,\n                y: t.y\n            };\n    }\n    var p = n ? _r(n) : null;\n    if (p != null) {\n        var u = p === \"y\" ? \"height\" : \"width\";\n        switch(o){\n            case Ae:\n                l[p] = l[p] - (t[u] / 2 - e[u] / 2);\n                break;\n            case Ge:\n                l[p] = l[p] + (t[u] / 2 - e[u] / 2);\n                break;\n        }\n    }\n    return l;\n}\nfunction Je(s, t) {\n    t === void 0 && (t = {});\n    var e = t, i = e.placement, n = i === void 0 ? s.placement : i, o = e.strategy, r = o === void 0 ? s.strategy : o, a = e.boundary, l = a === void 0 ? xc : a, p = e.rootBoundary, u = p === void 0 ? cr : p, _ = e.elementContext, f = _ === void 0 ? Be : _, g = e.altBoundary, m = g === void 0 ? !1 : g, b = e.padding, v = b === void 0 ? 0 : b, T = Wc(typeof v != \"number\" ? v : Fc(v, ni)), y = f === Be ? Oc : Be, C = s.rects.popper, E = s.elements[m ? y : f], w = Kd(ye(E) ? E : E.contextElement || ie(s.elements.popper), l, u, r), k = Ze(s.elements.reference), D = Kc({\n        reference: k,\n        element: C,\n        strategy: \"absolute\",\n        placement: n\n    }), O = Yo(Object.assign({}, C, D)), x = f === Be ? O : k, L = {\n        top: w.top - x.top + T.top,\n        bottom: x.bottom - w.bottom + T.bottom,\n        left: w.left - x.left + T.left,\n        right: x.right - w.right + T.right\n    }, S = s.modifiersData.offset;\n    if (f === Be && S) {\n        var N = S[n];\n        Object.keys(L).forEach(function(P) {\n            var ot = [\n                pt,\n                ut\n            ].indexOf(P) >= 0 ? 1 : -1, rt = [\n                st,\n                ut\n            ].indexOf(P) >= 0 ? \"y\" : \"x\";\n            L[P] += N[rt] * ot;\n        });\n    }\n    return L;\n}\nfunction zd(s, t) {\n    t === void 0 && (t = {});\n    var e = t, i = e.placement, n = e.boundary, o = e.rootBoundary, r = e.padding, a = e.flipVariations, l = e.allowedAutoPlacements, p = l === void 0 ? hr : l, u = Qe(i), _ = u ? a ? Wo : Wo.filter(function(m) {\n        return Qe(m) === u;\n    }) : ni, f = _.filter(function(m) {\n        return p.indexOf(m) >= 0;\n    });\n    f.length === 0 && (f = _, ({}).NODE_ENV !== \"production\" && console.error([\n        \"Popper: The `allowedAutoPlacements` option did not allow any\",\n        \"placements. Ensure the `placement` option matches the variation\",\n        \"of the allowed placements.\",\n        'For example, \"auto\" cannot be used to allow \"bottom-start\".',\n        'Use \"auto-start\" instead.'\n    ].join(\" \")));\n    var g = f.reduce(function(m, b) {\n        return m[b] = Je(s, {\n            placement: b,\n            boundary: n,\n            rootBoundary: o,\n            padding: r\n        })[Et(b)], m;\n    }, {});\n    return Object.keys(g).sort(function(m, b) {\n        return g[m] - g[b];\n    });\n}\nfunction Ud(s) {\n    if (Et(s) === ji) return [];\n    var t = Ws(s);\n    return [\n        Yr(s),\n        t,\n        Yr(t)\n    ];\n}\nfunction Xd(s) {\n    var t = s.state, e = s.options, i = s.name;\n    if (!t.modifiersData[i]._skip) {\n        for(var n = e.mainAxis, o = n === void 0 ? !0 : n, r = e.altAxis, a = r === void 0 ? !0 : r, l = e.fallbackPlacements, p = e.padding, u = e.boundary, _ = e.rootBoundary, f = e.altBoundary, g = e.flipVariations, m = g === void 0 ? !0 : g, b = e.allowedAutoPlacements, v = t.options.placement, T = Et(v), y = T === v, C = l || (y || !m ? [\n            Ws(v)\n        ] : Ud(v)), E = [\n            v\n        ].concat(C).reduce(function(Oe, Vt) {\n            return Oe.concat(Et(Vt) === ji ? zd(t, {\n                placement: Vt,\n                boundary: u,\n                rootBoundary: _,\n                padding: p,\n                flipVariations: m,\n                allowedAutoPlacements: b\n            }) : Vt);\n        }, []), w = t.rects.reference, k = t.rects.popper, D = /* @__PURE__ */ new Map(), O = !0, x = E[0], L = 0; L < E.length; L++){\n            var S = E[L], N = Et(S), P = Qe(S) === Ae, ot = [\n                st,\n                ut\n            ].indexOf(N) >= 0, rt = ot ? \"width\" : \"height\", G = Je(t, {\n                placement: S,\n                boundary: u,\n                rootBoundary: _,\n                altBoundary: f,\n                padding: p\n            }), vt = ot ? P ? pt : nt : P ? ut : st;\n            w[rt] > k[rt] && (vt = Ws(vt));\n            var Ji = Ws(vt), oe = [];\n            if (o && oe.push(G[N] <= 0), a && oe.push(G[vt] <= 0, G[Ji] <= 0), oe.every(function(Oe) {\n                return Oe;\n            })) {\n                x = S, O = !1;\n                break;\n            }\n            D.set(S, oe);\n        }\n        if (O) for(var ts = m ? 3 : 1, kn = function(Vt) {\n            var di = E.find(function(is) {\n                var re = D.get(is);\n                if (re) return re.slice(0, Vt).every(function(xn) {\n                    return xn;\n                });\n            });\n            if (di) return x = di, \"break\";\n        }, hi = ts; hi > 0; hi--){\n            var es = kn(hi);\n            if (es === \"break\") break;\n        }\n        t.placement !== x && (t.modifiersData[i]._skip = !0, t.placement = x, t.reset = !0);\n    }\n}\nconst zc = {\n    name: \"flip\",\n    enabled: !0,\n    phase: \"main\",\n    fn: Xd,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: !1\n    }\n};\nfunction Kr(s, t, e) {\n    return e === void 0 && (e = {\n        x: 0,\n        y: 0\n    }), {\n        top: s.top - t.height - e.y,\n        right: s.right - t.width + e.x,\n        bottom: s.bottom - t.height + e.y,\n        left: s.left - t.width - e.x\n    };\n}\nfunction zr(s) {\n    return [\n        st,\n        pt,\n        ut,\n        nt\n    ].some(function(t) {\n        return s[t] >= 0;\n    });\n}\nfunction Gd(s) {\n    var t = s.state, e = s.name, i = t.rects.reference, n = t.rects.popper, o = t.modifiersData.preventOverflow, r = Je(t, {\n        elementContext: \"reference\"\n    }), a = Je(t, {\n        altBoundary: !0\n    }), l = Kr(r, i), p = Kr(a, n, o), u = zr(l), _ = zr(p);\n    t.modifiersData[e] = {\n        referenceClippingOffsets: l,\n        popperEscapeOffsets: p,\n        isReferenceHidden: u,\n        hasPopperEscaped: _\n    }, t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-reference-hidden\": u,\n        \"data-popper-escaped\": _\n    });\n}\nconst Uc = {\n    name: \"hide\",\n    enabled: !0,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: Gd\n};\nfunction qd(s, t, e) {\n    var i = Et(s), n = [\n        nt,\n        st\n    ].indexOf(i) >= 0 ? -1 : 1, o = typeof e == \"function\" ? e(Object.assign({}, t, {\n        placement: s\n    })) : e, r = o[0], a = o[1];\n    return r = r || 0, a = (a || 0) * n, [\n        nt,\n        pt\n    ].indexOf(i) >= 0 ? {\n        x: a,\n        y: r\n    } : {\n        x: r,\n        y: a\n    };\n}\nfunction Zd(s) {\n    var t = s.state, e = s.options, i = s.name, n = e.offset, o = n === void 0 ? [\n        0,\n        0\n    ] : n, r = hr.reduce(function(u, _) {\n        return u[_] = qd(_, t.rects, o), u;\n    }, {}), a = r[t.placement], l = a.x, p = a.y;\n    t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += l, t.modifiersData.popperOffsets.y += p), t.modifiersData[i] = r;\n}\nconst Xc = {\n    name: \"offset\",\n    enabled: !0,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: Zd\n};\nfunction Qd(s) {\n    var t = s.state, e = s.name;\n    t.modifiersData[e] = Kc({\n        reference: t.rects.reference,\n        element: t.rects.popper,\n        strategy: \"absolute\",\n        placement: t.placement\n    });\n}\nconst Tr = {\n    name: \"popperOffsets\",\n    enabled: !0,\n    phase: \"read\",\n    fn: Qd,\n    data: {}\n};\nfunction Jd(s) {\n    return s === \"x\" ? \"y\" : \"x\";\n}\nfunction tu(s) {\n    var t = s.state, e = s.options, i = s.name, n = e.mainAxis, o = n === void 0 ? !0 : n, r = e.altAxis, a = r === void 0 ? !1 : r, l = e.boundary, p = e.rootBoundary, u = e.altBoundary, _ = e.padding, f = e.tether, g = f === void 0 ? !0 : f, m = e.tetherOffset, b = m === void 0 ? 0 : m, v = Je(t, {\n        boundary: l,\n        rootBoundary: p,\n        padding: _,\n        altBoundary: u\n    }), T = Et(t.placement), y = Qe(t.placement), C = !y, E = _r(T), w = Jd(E), k = t.modifiersData.popperOffsets, D = t.rects.reference, O = t.rects.popper, x = typeof b == \"function\" ? b(Object.assign({}, t.rects, {\n        placement: t.placement\n    })) : b, L = typeof x == \"number\" ? {\n        mainAxis: x,\n        altAxis: x\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, x), S = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, N = {\n        x: 0,\n        y: 0\n    };\n    if (k) {\n        if (o) {\n            var P, ot = E === \"y\" ? st : nt, rt = E === \"y\" ? ut : pt, G = E === \"y\" ? \"height\" : \"width\", vt = k[E], Ji = vt + v[ot], oe = vt - v[rt], ts = g ? -O[G] / 2 : 0, kn = y === Ae ? D[G] : O[G], hi = y === Ae ? -O[G] : -D[G], es = t.elements.arrow, Oe = g && es ? pr(es) : {\n                width: 0,\n                height: 0\n            }, Vt = t.modifiersData[\"arrow#persistent\"] ? t.modifiersData[\"arrow#persistent\"].padding : Vc(), di = Vt[ot], is = Vt[rt], re = Mi(0, D[G], Oe[G]), xn = C ? D[G] / 2 - ts - re - di - L.mainAxis : kn - re - di - L.mainAxis, nd = C ? -D[G] / 2 + ts + re + is + L.mainAxis : hi + re + is + L.mainAxis, On = t.elements.arrow && Ki(t.elements.arrow), od = On ? E === \"y\" ? On.clientTop || 0 : On.clientLeft || 0 : 0, Ir = (P = S == null ? void 0 : S[E]) != null ? P : 0, rd = vt + xn - Ir - od, ad = vt + nd - Ir, Dr = Mi(g ? un(Ji, rd) : Ji, vt, g ? ve(oe, ad) : oe);\n            k[E] = Dr, N[E] = Dr - vt;\n        }\n        if (a) {\n            var $r, ld = E === \"x\" ? st : nt, cd = E === \"x\" ? ut : pt, ae = k[w], ss = w === \"y\" ? \"height\" : \"width\", Lr = ae + v[ld], Nr = ae - v[cd], Sn = [\n                st,\n                nt\n            ].indexOf(T) !== -1, Mr = ($r = S == null ? void 0 : S[w]) != null ? $r : 0, Rr = Sn ? Lr : ae - D[ss] - O[ss] - Mr + L.altAxis, Pr = Sn ? ae + D[ss] + O[ss] - Mr - L.altAxis : Nr, Br = g && Sn ? Dd(Rr, ae, Pr) : Mi(g ? Rr : Lr, ae, g ? Pr : Nr);\n            k[w] = Br, N[w] = Br - ae;\n        }\n        t.modifiersData[i] = N;\n    }\n}\nconst Gc = {\n    name: \"preventOverflow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: tu,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction eu(s) {\n    return {\n        scrollLeft: s.scrollLeft,\n        scrollTop: s.scrollTop\n    };\n}\nfunction iu(s) {\n    return s === _t(s) || !dt(s) ? gr(s) : eu(s);\n}\nfunction su(s) {\n    var t = s.getBoundingClientRect(), e = qe(t.width) / s.offsetWidth || 1, i = qe(t.height) / s.offsetHeight || 1;\n    return e !== 1 || i !== 1;\n}\nfunction nu(s, t, e) {\n    e === void 0 && (e = !1);\n    var i = dt(t), n = dt(t) && su(t), o = ie(t), r = Ze(s, n, e), a = {\n        scrollLeft: 0,\n        scrollTop: 0\n    }, l = {\n        x: 0,\n        y: 0\n    };\n    return (i || !i && !e) && ((Rt(t) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n    vr(o)) && (a = iu(t)), dt(t) ? (l = Ze(t, !0), l.x += t.clientLeft, l.y += t.clientTop) : o && (l.x = br(o))), {\n        x: r.left + a.scrollLeft - l.x,\n        y: r.top + a.scrollTop - l.y,\n        width: r.width,\n        height: r.height\n    };\n}\nfunction ou(s) {\n    var t = /* @__PURE__ */ new Map(), e = /* @__PURE__ */ new Set(), i = [];\n    s.forEach(function(o) {\n        t.set(o.name, o);\n    });\n    function n(o) {\n        e.add(o.name);\n        var r = [].concat(o.requires || [], o.requiresIfExists || []);\n        r.forEach(function(a) {\n            if (!e.has(a)) {\n                var l = t.get(a);\n                l && n(l);\n            }\n        }), i.push(o);\n    }\n    return s.forEach(function(o) {\n        e.has(o.name) || n(o);\n    }), i;\n}\nfunction ru(s) {\n    var t = ou(s);\n    return dn.reduce(function(e, i) {\n        return e.concat(t.filter(function(n) {\n            return n.phase === i;\n        }));\n    }, []);\n}\nfunction au(s) {\n    var t;\n    return function() {\n        return t || (t = new Promise(function(e) {\n            Promise.resolve().then(function() {\n                t = void 0, e(s());\n            });\n        })), t;\n    };\n}\nfunction Wt(s) {\n    for(var t = arguments.length, e = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)e[i - 1] = arguments[i];\n    return [].concat(e).reduce(function(n, o) {\n        return n.replace(/%s/, o);\n    }, s);\n}\nvar le = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s', lu = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available', Ur = [\n    \"name\",\n    \"enabled\",\n    \"phase\",\n    \"fn\",\n    \"effect\",\n    \"requires\",\n    \"options\"\n];\nfunction cu(s) {\n    s.forEach(function(t) {\n        [].concat(Object.keys(t), Ur).filter(function(e, i, n) {\n            return n.indexOf(e) === i;\n        }).forEach(function(e) {\n            switch(e){\n                case \"name\":\n                    typeof t.name != \"string\" && console.error(Wt(le, String(t.name), '\"name\"', '\"string\"', '\"' + String(t.name) + '\"'));\n                    break;\n                case \"enabled\":\n                    typeof t.enabled != \"boolean\" && console.error(Wt(le, t.name, '\"enabled\"', '\"boolean\"', '\"' + String(t.enabled) + '\"'));\n                    break;\n                case \"phase\":\n                    dn.indexOf(t.phase) < 0 && console.error(Wt(le, t.name, '\"phase\"', \"either \" + dn.join(\", \"), '\"' + String(t.phase) + '\"'));\n                    break;\n                case \"fn\":\n                    typeof t.fn != \"function\" && console.error(Wt(le, t.name, '\"fn\"', '\"function\"', '\"' + String(t.fn) + '\"'));\n                    break;\n                case \"effect\":\n                    t.effect != null && typeof t.effect != \"function\" && console.error(Wt(le, t.name, '\"effect\"', '\"function\"', '\"' + String(t.fn) + '\"'));\n                    break;\n                case \"requires\":\n                    t.requires != null && !Array.isArray(t.requires) && console.error(Wt(le, t.name, '\"requires\"', '\"array\"', '\"' + String(t.requires) + '\"'));\n                    break;\n                case \"requiresIfExists\":\n                    Array.isArray(t.requiresIfExists) || console.error(Wt(le, t.name, '\"requiresIfExists\"', '\"array\"', '\"' + String(t.requiresIfExists) + '\"'));\n                    break;\n                case \"options\":\n                case \"data\":\n                    break;\n                default:\n                    console.error('PopperJS: an invalid property has been provided to the \"' + t.name + '\" modifier, valid properties are ' + Ur.map(function(i) {\n                        return '\"' + i + '\"';\n                    }).join(\", \") + '; but \"' + e + '\" was provided.');\n            }\n            t.requires && t.requires.forEach(function(i) {\n                s.find(function(n) {\n                    return n.name === i;\n                }) == null && console.error(Wt(lu, String(t.name), i, i));\n            });\n        });\n    });\n}\nfunction hu(s, t) {\n    var e = /* @__PURE__ */ new Set();\n    return s.filter(function(i) {\n        var n = t(i);\n        if (!e.has(n)) return e.add(n), !0;\n    });\n}\nfunction du(s) {\n    var t = s.reduce(function(e, i) {\n        var n = e[i.name];\n        return e[i.name] = n ? Object.assign({}, n, i, {\n            options: Object.assign({}, n.options, i.options),\n            data: Object.assign({}, n.data, i.data)\n        }) : i, e;\n    }, {});\n    return Object.keys(t).map(function(e) {\n        return t[e];\n    });\n}\nvar Xr = \"Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.\", uu = \"Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.\", Gr = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction qr() {\n    for(var s = arguments.length, t = new Array(s), e = 0; e < s; e++)t[e] = arguments[e];\n    return !t.some(function(i) {\n        return !(i && typeof i.getBoundingClientRect == \"function\");\n    });\n}\nfunction gn(s) {\n    s === void 0 && (s = {});\n    var t = s, e = t.defaultModifiers, i = e === void 0 ? [] : e, n = t.defaultOptions, o = n === void 0 ? Gr : n;\n    return function(a, l, p) {\n        p === void 0 && (p = o);\n        var u = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, Gr, o),\n            modifiersData: {},\n            elements: {\n                reference: a,\n                popper: l\n            },\n            attributes: {},\n            styles: {}\n        }, _ = [], f = !1, g = {\n            state: u,\n            setOptions: function(T) {\n                var y = typeof T == \"function\" ? T(u.options) : T;\n                b(), u.options = Object.assign({}, o, u.options, y), u.scrollParents = {\n                    reference: ye(a) ? Ri(a) : a.contextElement ? Ri(a.contextElement) : [],\n                    popper: Ri(l)\n                };\n                var C = ru(du([].concat(i, u.options.modifiers)));\n                if (u.orderedModifiers = C.filter(function(S) {\n                    return S.enabled;\n                }), ({}).NODE_ENV !== \"production\") {\n                    var E = hu([].concat(C, u.options.modifiers), function(S) {\n                        var N = S.name;\n                        return N;\n                    });\n                    if (cu(E), Et(u.options.placement) === ji) {\n                        var w = u.orderedModifiers.find(function(S) {\n                            var N = S.name;\n                            return N === \"flip\";\n                        });\n                        w || console.error([\n                            'Popper: \"auto\" placements require the \"flip\" modifier be',\n                            \"present and enabled to work.\"\n                        ].join(\" \"));\n                    }\n                    var k = At(l), D = k.marginTop, O = k.marginRight, x = k.marginBottom, L = k.marginLeft;\n                    [\n                        D,\n                        O,\n                        x,\n                        L\n                    ].some(function(S) {\n                        return parseFloat(S);\n                    }) && console.warn([\n                        'Popper: CSS \"margin\" styles cannot be used to apply padding',\n                        \"between the popper and its reference element or boundary.\",\n                        \"To replicate margin, use the `offset` modifier, as well as\",\n                        \"the `padding` option in the `preventOverflow` and `flip`\",\n                        \"modifiers.\"\n                    ].join(\" \"));\n                }\n                return m(), g.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function() {\n                if (!f) {\n                    var T = u.elements, y = T.reference, C = T.popper;\n                    if (!qr(y, C)) {\n                        ({}).NODE_ENV !== \"production\" && console.error(Xr);\n                        return;\n                    }\n                    u.rects = {\n                        reference: nu(y, Ki(C), u.options.strategy === \"fixed\"),\n                        popper: pr(C)\n                    }, u.reset = !1, u.placement = u.options.placement, u.orderedModifiers.forEach(function(S) {\n                        return u.modifiersData[S.name] = Object.assign({}, S.data);\n                    });\n                    for(var E = 0, w = 0; w < u.orderedModifiers.length; w++){\n                        if (({}).NODE_ENV !== \"production\" && (E += 1, E > 100)) {\n                            console.error(uu);\n                            break;\n                        }\n                        if (u.reset === !0) {\n                            u.reset = !1, w = -1;\n                            continue;\n                        }\n                        var k = u.orderedModifiers[w], D = k.fn, O = k.options, x = O === void 0 ? {} : O, L = k.name;\n                        typeof D == \"function\" && (u = D({\n                            state: u,\n                            options: x,\n                            name: L,\n                            instance: g\n                        }) || u);\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: au(function() {\n                return new Promise(function(v) {\n                    g.forceUpdate(), v(u);\n                });\n            }),\n            destroy: function() {\n                b(), f = !0;\n            }\n        };\n        if (!qr(a, l)) return ({}).NODE_ENV !== \"production\" && console.error(Xr), g;\n        g.setOptions(p).then(function(v) {\n            !f && p.onFirstUpdate && p.onFirstUpdate(v);\n        });\n        function m() {\n            u.orderedModifiers.forEach(function(v) {\n                var T = v.name, y = v.options, C = y === void 0 ? {} : y, E = v.effect;\n                if (typeof E == \"function\") {\n                    var w = E({\n                        state: u,\n                        name: T,\n                        instance: g,\n                        options: C\n                    }), k = function() {};\n                    _.push(w || k);\n                }\n            });\n        }\n        function b() {\n            _.forEach(function(v) {\n                return v();\n            }), _ = [];\n        }\n        return g;\n    };\n}\nvar pu = /* @__PURE__ */ gn(), _u = [\n    mr,\n    Tr,\n    fr,\n    ur\n], fu = /* @__PURE__ */ gn({\n    defaultModifiers: _u\n}), mu = [\n    mr,\n    Tr,\n    fr,\n    ur,\n    Xc,\n    zc,\n    Gc,\n    Yc,\n    Uc\n], se = /* @__PURE__ */ gn({\n    defaultModifiers: mu\n});\nconst qc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    afterMain: Nc,\n    afterRead: Dc,\n    afterWrite: Pc,\n    applyStyles: ur,\n    arrow: Yc,\n    auto: ji,\n    basePlacements: ni,\n    beforeMain: $c,\n    beforeRead: Sc,\n    beforeWrite: Mc,\n    bottom: ut,\n    clippingParents: xc,\n    computeStyles: fr,\n    createPopper: se,\n    createPopperBase: pu,\n    createPopperLite: fu,\n    detectOverflow: Je,\n    end: Ge,\n    eventListeners: mr,\n    flip: zc,\n    hide: Uc,\n    left: nt,\n    main: Lc,\n    modifierPhases: dn,\n    offset: Xc,\n    placements: hr,\n    popper: Be,\n    popperGenerator: gn,\n    popperOffsets: Tr,\n    preventOverflow: Gc,\n    read: Ic,\n    reference: Oc,\n    right: pt,\n    start: Ae,\n    top: st,\n    variationPlacements: Wo,\n    viewport: cr,\n    write: Rc\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nfunction Ln(s) {\n    return s === \"true\" ? !0 : s === \"false\" ? !1 : s === Number(s).toString() ? Number(s) : s === \"\" || s === \"null\" ? null : s;\n}\nfunction Nn(s) {\n    return s.replace(/[A-Z]/g, (t)=>`-${t.toLowerCase()}`);\n}\nconst h = {\n    setDataAttribute (s, t, e) {\n        s.setAttribute(`data-te-${Nn(t)}`, e);\n    },\n    removeDataAttribute (s, t) {\n        s.removeAttribute(`data-te-${Nn(t)}`);\n    },\n    getDataAttributes (s) {\n        if (!s) return {};\n        const t = {};\n        return Object.keys(s.dataset).filter((e)=>e.startsWith(\"te\")).forEach((e)=>{\n            if (e.startsWith(\"teClass\")) return;\n            let i = e.replace(/^te/, \"\");\n            i = i.charAt(0).toLowerCase() + i.slice(1, i.length), t[i] = Ln(s.dataset[e]);\n        }), t;\n    },\n    getDataClassAttributes (s) {\n        if (!s) return {};\n        const t = {\n            ...s.dataset\n        };\n        return Object.keys(t).filter((e)=>e.startsWith(\"teClass\")).forEach((e)=>{\n            let i = e.replace(/^teClass/, \"\");\n            i = i.charAt(0).toLowerCase() + i.slice(1, i.length), t[i] = Ln(t[e]);\n        }), t;\n    },\n    getDataAttribute (s, t) {\n        return Ln(s.getAttribute(`data-te-${Nn(t)}`));\n    },\n    offset (s) {\n        const t = s.getBoundingClientRect();\n        return {\n            top: t.top + document.body.scrollTop,\n            left: t.left + document.body.scrollLeft\n        };\n    },\n    position (s) {\n        return {\n            top: s.offsetTop,\n            left: s.offsetLeft\n        };\n    },\n    style (s, t) {\n        Object.assign(s.style, t);\n    },\n    toggleClass (s, t) {\n        s && Mn(t).forEach((e)=>{\n            s.classList.contains(e) ? s.classList.remove(e) : s.classList.add(e);\n        });\n    },\n    addClass (s, t) {\n        Mn(t).forEach((e)=>!s.classList.contains(e) && s.classList.add(e));\n    },\n    addStyle (s, t) {\n        Object.keys(t).forEach((e)=>{\n            s.style[e] = t[e];\n        });\n    },\n    removeClass (s, t) {\n        Mn(t).forEach((e)=>s.classList.contains(e) && s.classList.remove(e));\n    },\n    hasClass (s, t) {\n        return s.classList.contains(t);\n    },\n    maxOffset (s) {\n        const t = s.getBoundingClientRect();\n        return {\n            top: t.top + Math.max(document.body.scrollTop, document.documentElement.scrollTop, window.scrollY),\n            left: t.left + Math.max(document.body.scrollLeft, document.documentElement.scrollLeft, window.scrollX)\n        };\n    }\n};\nfunction Mn(s) {\n    return typeof s == \"string\" ? s.split(\" \") : Array.isArray(s) ? s : !1;\n}\nconst gu = 3, d = {\n    closest (s, t) {\n        return s.closest(t);\n    },\n    matches (s, t) {\n        return s.matches(t);\n    },\n    find (s, t = document.documentElement) {\n        return [].concat(...Element.prototype.querySelectorAll.call(t, s));\n    },\n    findOne (s, t = document.documentElement) {\n        return Element.prototype.querySelector.call(t, s);\n    },\n    children (s, t) {\n        return [].concat(...s.children).filter((i)=>i.matches(t));\n    },\n    parents (s, t) {\n        const e = [];\n        let i = s.parentNode;\n        for(; i && i.nodeType === Node.ELEMENT_NODE && i.nodeType !== gu;)this.matches(i, t) && e.push(i), i = i.parentNode;\n        return e;\n    },\n    prev (s, t) {\n        let e = s.previousElementSibling;\n        for(; e;){\n            if (e.matches(t)) return [\n                e\n            ];\n            e = e.previousElementSibling;\n        }\n        return [];\n    },\n    next (s, t) {\n        let e = s.nextElementSibling;\n        for(; e;){\n            if (this.matches(e, t)) return [\n                e\n            ];\n            e = e.nextElementSibling;\n        }\n        return [];\n    },\n    focusableChildren (s) {\n        const t = [\n            \"a\",\n            \"button\",\n            \"input\",\n            \"textarea\",\n            \"select\",\n            \"details\",\n            \"[tabindex]\",\n            '[contenteditable=\"true\"]'\n        ].map((e)=>`${e}:not([tabindex^=\"-\"])`).join(\", \");\n        return this.find(t, s).filter((e)=>!be(e) && Mt(e));\n    }\n}, Rn = \"dropdown\", bu = \"te.dropdown\", xe = `.${bu}`, Er = \".data-api\", Fs = \"Escape\", Zr = \"Space\", Qr = \"Tab\", jo = \"ArrowUp\", Ys = \"ArrowDown\", vu = 2, Tu = new RegExp(`${jo}|${Ys}|${Fs}`), Eu = `hide${xe}`, Cu = `hidden${xe}`, Au = `show${xe}`, yu = `shown${xe}`, wu = `click${xe}${Er}`, Jr = `keydown${xe}${Er}`, ku = `keyup${xe}${Er}`, Ft = \"show\", xu = \"dropup\", Ou = \"dropend\", Su = \"dropstart\", Iu = \"[data-te-navbar-ref]\", os = \"[data-te-dropdown-toggle-ref]\", Pn = \"[data-te-dropdown-menu-ref]\", Du = \"[data-te-navbar-nav-ref]\", $u = \"[data-te-dropdown-menu-ref] [data-te-dropdown-item-ref]:not(.disabled):not(:disabled)\", Lu = W() ? \"top-end\" : \"top-start\", Nu = W() ? \"top-start\" : \"top-end\", Mu = W() ? \"bottom-end\" : \"bottom-start\", Ru = W() ? \"bottom-start\" : \"bottom-end\", Pu = W() ? \"left-start\" : \"right-start\", Bu = W() ? \"right-start\" : \"left-start\", Hu = [\n    {\n        opacity: \"0\"\n    },\n    {\n        opacity: \"1\"\n    }\n], Vu = [\n    {\n        opacity: \"1\"\n    },\n    {\n        opacity: \"0\"\n    }\n], ta = {\n    iterations: 1,\n    easing: \"ease\",\n    fill: \"both\"\n}, Wu = {\n    offset: [\n        0,\n        2\n    ],\n    boundary: \"clippingParents\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null,\n    autoClose: !0,\n    dropdownAnimation: \"on\",\n    animationDuration: 550\n}, Fu = {\n    offset: \"(array|string|function)\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element|object)\",\n    display: \"string\",\n    popperConfig: \"(null|object|function)\",\n    autoClose: \"(boolean|string)\",\n    dropdownAnimation: \"string\",\n    animationDuration: \"number\"\n};\nclass $t extends ft {\n    constructor(t, e){\n        super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._fadeOutAnimate = null;\n        const i = window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        this._animationCanPlay = this._config.dropdownAnimation === \"on\" && !i, this._didInit = !1, this._init();\n    }\n    // Getters\n    static get Default() {\n        return Wu;\n    }\n    static get DefaultType() {\n        return Fu;\n    }\n    static get NAME() {\n        return Rn;\n    }\n    // Public\n    toggle() {\n        return this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (be(this._element) || this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        if (c.trigger(this._element, Au, t).defaultPrevented) return;\n        const i = $t.getParentFromElement(this._element);\n        this._inNavbar ? h.setDataAttribute(this._menu, \"popper\", \"none\") : this._createPopper(i), \"ontouchstart\" in document.documentElement && !i.closest(Du) && [].concat(...document.body.children).forEach((n)=>c.on(n, \"mouseover\", hn)), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.setAttribute(`data-te-dropdown-${Ft}`, \"\"), this._animationCanPlay && this._menu.animate(Hu, {\n            ...ta,\n            duration: this._config.animationDuration\n        }), this._element.setAttribute(`data-te-dropdown-${Ft}`, \"\"), setTimeout(()=>{\n            c.trigger(this._element, yu, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0);\n    }\n    hide() {\n        if (be(this._element) || !this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        this._completeHide(t);\n    }\n    dispose() {\n        this._popper && this._popper.destroy(), super.dispose();\n    }\n    update() {\n        this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n    }\n    // Private\n    _init() {\n        this._didInit || (c.on(document, Jr, os, $t.dataApiKeydownHandler), c.on(document, Jr, Pn, $t.dataApiKeydownHandler), c.on(document, wu, $t.clearMenus), c.on(document, ku, $t.clearMenus), this._didInit = !0);\n    }\n    _completeHide(t) {\n        this._fadeOutAnimate && this._fadeOutAnimate.playState === \"running\" || c.trigger(this._element, Eu, t).defaultPrevented || (\"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((i)=>c.off(i, \"mouseover\", hn)), this._animationCanPlay && (this._fadeOutAnimate = this._menu.animate(Vu, {\n            ...ta,\n            duration: this._config.animationDuration\n        })), setTimeout(()=>{\n            this._popper && this._popper.destroy(), this._menu.removeAttribute(`data-te-dropdown-${Ft}`), this._element.removeAttribute(`data-te-dropdown-${Ft}`), this._element.setAttribute(\"aria-expanded\", \"false\"), h.removeDataAttribute(this._menu, \"popper\"), c.trigger(this._element, Cu, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0));\n    }\n    _getConfig(t) {\n        if (t = {\n            ...this.constructor.Default,\n            ...h.getDataAttributes(this._element),\n            ...t\n        }, I(Rn, t, this.constructor.DefaultType), typeof t.reference == \"object\" && !Xe(t.reference) && typeof t.reference.getBoundingClientRect != \"function\") throw new TypeError(`${Rn.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n        return t;\n    }\n    _createPopper(t) {\n        if (typeof qc > \"u\") throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n        let e = this._element;\n        this._config.reference === \"parent\" ? e = t : Xe(this._config.reference) ? e = ee(this._config.reference) : typeof this._config.reference == \"object\" && (e = this._config.reference);\n        const i = this._getPopperConfig(), n = i.modifiers.find((o)=>o.name === \"applyStyles\" && o.enabled === !1);\n        this._popper = se(e, this._menu, i), n && h.setDataAttribute(this._menu, \"popper\", \"static\");\n    }\n    _isShown(t = this._element) {\n        return t.dataset[`teDropdown${Ft.charAt(0).toUpperCase() + Ft.slice(1)}`] === \"\";\n    }\n    _getMenuElement() {\n        return d.next(this._element, Pn)[0];\n    }\n    _getPlacement() {\n        const t = this._element.parentNode;\n        if (t.dataset.teDropdownPosition === Ou) return Pu;\n        if (t.dataset.teDropdownPosition === Su) return Bu;\n        const e = t.dataset.teDropdownAlignment === \"end\";\n        return t.dataset.teDropdownPosition === xu ? e ? Nu : Lu : e ? Ru : Mu;\n    }\n    _detectNavbar() {\n        return this._element.closest(Iu) !== null;\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _getPopperConfig() {\n        const t = {\n            placement: this._getPlacement(),\n            modifiers: [\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                }\n            ]\n        };\n        return this._config.display === \"static\" && (t.modifiers = [\n            {\n                name: \"applyStyles\",\n                enabled: !1\n            }\n        ]), {\n            ...t,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(t) : this._config.popperConfig\n        };\n    }\n    _selectMenuItem({ key: t, target: e }) {\n        const i = d.find($u, this._menu).filter(Mt);\n        i.length && vc(i, e, t === Ys, !i.includes(e)).focus();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = $t.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static clearMenus(t) {\n        if (t && (t.button === vu || t.type === \"keyup\" && t.key !== Qr)) return;\n        const e = d.find(os);\n        for(let i = 0, n = e.length; i < n; i++){\n            const o = $t.getInstance(e[i]);\n            if (!o || o._config.autoClose === !1 || !o._isShown()) continue;\n            const r = {\n                relatedTarget: o._element\n            };\n            if (t) {\n                const a = t.composedPath(), l = a.includes(o._menu);\n                if (a.includes(o._element) || o._config.autoClose === \"inside\" && !l || o._config.autoClose === \"outside\" && l || o._menu.contains(t.target) && (t.type === \"keyup\" && t.key === Qr || /input|select|option|textarea|form/i.test(t.target.tagName))) continue;\n                t.type === \"click\" && (r.clickEvent = t);\n            }\n            o._completeHide(r);\n        }\n    }\n    static getParentFromElement(t) {\n        return te(t) || t.parentNode;\n    }\n    static dataApiKeydownHandler(t) {\n        if (/input|textarea/i.test(t.target.tagName) ? t.key === Zr || t.key !== Fs && (t.key !== Ys && t.key !== jo || t.target.closest(Pn)) : !Tu.test(t.key)) return;\n        const e = this.dataset[`teDropdown${Ft.charAt(0).toUpperCase() + Ft.slice(1)}`] === \"\";\n        if (!e && t.key === Fs || (t.preventDefault(), t.stopPropagation(), be(this))) return;\n        const i = this.matches(os) ? this : d.prev(this, os)[0], n = $t.getOrCreateInstance(i);\n        if (t.key === Fs) {\n            n.hide();\n            return;\n        }\n        if (t.key === jo || t.key === Ys) {\n            e || n.show(), n._selectMenuItem(t);\n            return;\n        }\n        (!e || t.key === Zr) && $t.clearMenus();\n    }\n}\nconst Bn = \"collapse\", Zc = \"te.collapse\", bn = `.${Zc}`, ea = {\n    toggle: !0,\n    parent: null\n}, Yu = {\n    toggle: \"boolean\",\n    parent: \"(null|element)\"\n}, ju = `show${bn}`, Ku = `shown${bn}`, zu = `hide${bn}`, Uu = `hidden${bn}`, Hn = \"data-te-collapse-show\", ia = \"data-te-collapse-collapsed\", rs = \"data-te-collapse-collapsing\", Xu = \"data-te-collapse-horizontal\", We = \"data-te-collapse-item\", sa = `:scope [${We}] [${We}]`, Gu = \"width\", qu = \"height\", Zu = \"[data-te-collapse-item][data-te-collapse-show], [data-te-collapse-item][data-te-collapse-collapsing]\", na = \"[data-te-collapse-init]\", Qu = {\n    visible: \"!visible\",\n    hidden: \"hidden\",\n    baseTransition: \"overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsing: \"h-0 transition-[height] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsingHorizontal: \"w-0 h-auto transition-[width] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\"\n}, Ju = {\n    visible: \"string\",\n    hidden: \"string\",\n    baseTransition: \"string\",\n    collapsing: \"string\",\n    collapsingHorizontal: \"string\"\n};\nclass Qt extends ft {\n    constructor(t, e, i){\n        super(t), this._isTransitioning = !1, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._triggerArray = [];\n        const n = d.find(na);\n        for(let o = 0, r = n.length; o < r; o++){\n            const a = n[o], l = lr(a), p = d.find(l).filter((u)=>u === this._element);\n            l !== null && p.length && (this._selector = l, this._triggerArray.push(a));\n        }\n        this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();\n    }\n    // Getters\n    static get Default() {\n        return ea;\n    }\n    static get NAME() {\n        return Bn;\n    }\n    // Public\n    toggle() {\n        this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (this._isTransitioning || this._isShown()) return;\n        let t = [], e;\n        if (this._config.parent) {\n            const u = d.find(sa, this._config.parent);\n            t = d.find(Zu, this._config.parent).filter((_)=>!u.includes(_));\n        }\n        const i = d.findOne(this._selector);\n        if (t.length) {\n            const u = t.find((_)=>i !== _);\n            if (e = u ? Qt.getInstance(u) : null, e && e._isTransitioning) return;\n        }\n        if (c.trigger(this._element, ju).defaultPrevented) return;\n        t.forEach((u)=>{\n            i !== u && Qt.getOrCreateInstance(u, {\n                toggle: !1\n            }).hide(), e || A.setData(u, Zc, null);\n        });\n        const o = this._getDimension(), r = o === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        h.removeClass(this._element, this._classes.visible), h.removeClass(this._element, this._classes.hidden), h.addClass(this._element, r), this._element.removeAttribute(We), this._element.setAttribute(rs, \"\"), this._element.style[o] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;\n        const a = ()=>{\n            this._isTransitioning = !1, h.removeClass(this._element, this._classes.hidden), h.removeClass(this._element, r), h.addClass(this._element, this._classes.visible), this._element.removeAttribute(rs), this._element.setAttribute(We, \"\"), this._element.setAttribute(Hn, \"\"), this._element.style[o] = \"\", c.trigger(this._element, Ku);\n        }, p = `scroll${o[0].toUpperCase() + o.slice(1)}`;\n        this._queueCallback(a, this._element, !0), this._element.style[o] = `${this._element[p]}px`;\n    }\n    hide() {\n        if (this._isTransitioning || !this._isShown() || c.trigger(this._element, zu).defaultPrevented) return;\n        const e = this._getDimension(), i = e === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        this._element.style[e] = `${this._element.getBoundingClientRect()[e]}px`, si(this._element), h.addClass(this._element, i), h.removeClass(this._element, this._classes.visible), h.removeClass(this._element, this._classes.hidden), this._element.setAttribute(rs, \"\"), this._element.removeAttribute(We), this._element.removeAttribute(Hn);\n        const n = this._triggerArray.length;\n        for(let r = 0; r < n; r++){\n            const a = this._triggerArray[r], l = te(a);\n            l && !this._isShown(l) && this._addAriaAndCollapsedClass([\n                a\n            ], !1);\n        }\n        this._isTransitioning = !0;\n        const o = ()=>{\n            this._isTransitioning = !1, h.removeClass(this._element, i), h.addClass(this._element, this._classes.visible), h.addClass(this._element, this._classes.hidden), this._element.removeAttribute(rs), this._element.setAttribute(We, \"\"), c.trigger(this._element, Uu);\n        };\n        this._element.style[e] = \"\", this._queueCallback(o, this._element, !0);\n    }\n    _isShown(t = this._element) {\n        return t.hasAttribute(Hn);\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ...ea,\n            ...h.getDataAttributes(this._element),\n            ...t\n        }, t.toggle = !!t.toggle, t.parent = ee(t.parent), I(Bn, t, Yu), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...Qu,\n            ...e,\n            ...t\n        }, I(Bn, t, Ju), t;\n    }\n    _getDimension() {\n        return this._element.hasAttribute(Xu) ? Gu : qu;\n    }\n    _initializeChildren() {\n        if (!this._config.parent) return;\n        const t = d.find(sa, this._config.parent);\n        d.find(na, this._config.parent).filter((e)=>!t.includes(e)).forEach((e)=>{\n            const i = te(e);\n            i && this._addAriaAndCollapsedClass([\n                e\n            ], this._isShown(i));\n        });\n    }\n    _addAriaAndCollapsedClass(t, e) {\n        t.length && t.forEach((i)=>{\n            e ? i.removeAttribute(ia) : i.setAttribute(`${ia}`, \"\"), i.setAttribute(\"aria-expanded\", e);\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = {};\n            typeof t == \"string\" && /show|hide/.test(t) && (e.toggle = !1);\n            const i = Qt.getOrCreateInstance(this, e);\n            if (typeof t == \"string\") {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t]();\n            }\n        });\n    }\n}\nconst oa = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", ra = \".sticky-top\";\nclass ti {\n    constructor(){\n        this._element = document.body;\n    }\n    getWidth() {\n        const t = document.documentElement.clientWidth;\n        return Math.abs(window.innerWidth - t);\n    }\n    hide() {\n        const t = this.getWidth();\n        this._disableOverFlow(), this._setElementAttributes(this._element, \"paddingRight\", (e)=>e + t), this._setElementAttributes(oa, \"paddingRight\", (e)=>e + t), this._setElementAttributes(ra, \"marginRight\", (e)=>e - t);\n    }\n    _disableOverFlow() {\n        this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n    }\n    _setElementAttributes(t, e, i) {\n        const n = this.getWidth(), o = (r)=>{\n            if (r !== this._element && window.innerWidth > r.clientWidth + n) return;\n            this._saveInitialAttribute(r, e);\n            const a = window.getComputedStyle(r)[e];\n            r.style[e] = `${i(Number.parseFloat(a))}px`;\n        };\n        this._applyManipulationCallback(t, o);\n    }\n    reset() {\n        this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, \"paddingRight\"), this._resetElementAttributes(oa, \"paddingRight\"), this._resetElementAttributes(ra, \"marginRight\");\n    }\n    _saveInitialAttribute(t, e) {\n        const i = t.style[e];\n        i && h.setDataAttribute(t, e, i);\n    }\n    _resetElementAttributes(t, e) {\n        const i = (n)=>{\n            const o = h.getDataAttribute(n, e);\n            typeof o > \"u\" ? n.style.removeProperty(e) : (h.removeDataAttribute(n, e), n.style[e] = o);\n        };\n        this._applyManipulationCallback(t, i);\n    }\n    _applyManipulationCallback(t, e) {\n        Xe(t) ? e(t) : d.find(t, this._element).forEach(e);\n    }\n    isOverflowing() {\n        return this.getWidth() > 0;\n    }\n}\nconst tp = {\n    isVisible: !0,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: !1,\n    rootElement: \"body\",\n    // give the choice to place backdrop under different elements\n    clickCallback: null,\n    backdropClasses: null\n}, ep = {\n    isVisible: \"boolean\",\n    isAnimated: \"boolean\",\n    rootElement: \"(element|string)\",\n    clickCallback: \"(function|null)\",\n    backdropClasses: \"(array|string|null)\"\n}, Qc = \"backdrop\", aa = `mousedown.te.${Qc}`;\nclass Cr {\n    constructor(t){\n        this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n    }\n    show(t) {\n        if (!this._config.isVisible) {\n            ge(t);\n            return;\n        }\n        this._append(), this._config.isAnimated && si(this._getElement());\n        const e = this._config.backdropClasses || [\n            \"opacity-50\",\n            \"transition-all\",\n            \"duration-300\",\n            \"ease-in-out\",\n            \"fixed\",\n            \"top-0\",\n            \"left-0\",\n            \"z-[1040]\",\n            \"bg-black\",\n            \"w-screen\",\n            \"h-screen\"\n        ];\n        h.removeClass(this._getElement(), \"opacity-0\"), h.addClass(this._getElement(), e), this._element.setAttribute(\"data-te-backdrop-show\", \"\"), this._emulateAnimation(()=>{\n            ge(t);\n        });\n    }\n    hide(t) {\n        if (!this._config.isVisible) {\n            ge(t);\n            return;\n        }\n        this._element.removeAttribute(\"data-te-backdrop-show\"), this._getElement().classList.add(\"opacity-0\"), this._getElement().classList.remove(\"opacity-50\"), this._emulateAnimation(()=>{\n            this.dispose(), ge(t);\n        });\n    }\n    // Private\n    _getElement() {\n        if (!this._element) {\n            const t = document.createElement(\"div\");\n            t.className = this._config.className, this._config.isAnimated && t.classList.add(\"opacity-50\"), this._element = t;\n        }\n        return this._element;\n    }\n    _getConfig(t) {\n        return t = {\n            ...tp,\n            ...typeof t == \"object\" ? t : {}\n        }, t.rootElement = ee(t.rootElement), I(Qc, t, ep), t;\n    }\n    _append() {\n        this._isAppended || (this._config.rootElement.append(this._getElement()), c.on(this._getElement(), aa, ()=>{\n            ge(this._config.clickCallback);\n        }), this._isAppended = !0);\n    }\n    dispose() {\n        this._isAppended && (c.off(this._element, aa), this._element.remove(), this._isAppended = !1);\n    }\n    _emulateAnimation(t) {\n        bc(t, this._getElement(), this._config.isAnimated);\n    }\n}\nclass zi {\n    constructor(t, e = {}, i){\n        this._element = t, this._toggler = i, this._event = e.event || \"blur\", this._condition = e.condition || (()=>!0), this._selector = e.selector || 'button, a, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])', this._onlyVisible = e.onlyVisible || !1, this._focusableElements = [], this._firstElement = null, this._lastElement = null, this.handler = (n)=>{\n            this._condition(n) && !n.shiftKey && n.target === this._lastElement ? (n.preventDefault(), this._firstElement.focus()) : this._condition(n) && n.shiftKey && n.target === this._firstElement && (n.preventDefault(), this._lastElement.focus());\n        };\n    }\n    trap() {\n        this._setElements(), this._init(), this._setFocusTrap();\n    }\n    disable() {\n        this._focusableElements.forEach((t)=>{\n            t.removeEventListener(this._event, this.handler);\n        }), this._toggler && this._toggler.focus();\n    }\n    update() {\n        this._setElements(), this._setFocusTrap();\n    }\n    _init() {\n        const t = (e)=>{\n            !this._firstElement || e.key !== \"Tab\" || this._focusableElements.includes(e.target) || (e.preventDefault(), this._firstElement.focus(), window.removeEventListener(\"keydown\", t));\n        };\n        window.addEventListener(\"keydown\", t);\n    }\n    _filterVisible(t) {\n        return t.filter((e)=>{\n            if (!Mt(e)) return !1;\n            const i = d.parents(e, \"*\");\n            for(let n = 0; n < i.length; n++){\n                const o = window.getComputedStyle(i[n]);\n                if (o && (o.display === \"none\" || o.visibility === \"hidden\")) return !1;\n            }\n            return !0;\n        });\n    }\n    _setElements() {\n        this._focusableElements = d.focusableChildren(this._element), this._onlyVisible && (this._focusableElements = this._filterVisible(this._focusableElements)), this._firstElement = this._focusableElements[0], this._lastElement = this._focusableElements[this._focusableElements.length - 1];\n    }\n    _setFocusTrap() {\n        this._focusableElements.forEach((t, e)=>{\n            e === this._focusableElements.length - 1 || e === 0 ? t.addEventListener(this._event, this.handler) : t.removeEventListener(this._event, this.handler);\n        });\n    }\n}\nlet la = [];\nconst vn = (s, t = \"hide\")=>{\n    const e = `click.dismiss${s.EVENT_KEY}`, i = s.NAME;\n    la.includes(i) || (la.push(i), c.on(document, e, `[data-te-${i}-dismiss]`, function(n) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && n.preventDefault(), be(this)) return;\n        const o = te(this) || this.closest(`.${i}`) || this.closest(`[data-te-${i}-init]`);\n        if (!o) return;\n        s.getOrCreateInstance(o)[t]();\n    }));\n}, ca = \"offcanvas\", ip = \"te.offcanvas\", oi = `.${ip}`, sp = \".data-api\", np = `load${oi}${sp}`, op = \"Escape\", ha = {\n    backdrop: !0,\n    keyboard: !0,\n    scroll: !1\n}, rp = {\n    backdrop: \"boolean\",\n    keyboard: \"boolean\",\n    scroll: \"boolean\"\n}, da = \"show\", ap = \"[data-te-offcanvas-init][data-te-offcanvas-show]\", lp = `show${oi}`, cp = `shown${oi}`, hp = `hide${oi}`, dp = `hidden${oi}`, up = `keydown.dismiss${oi}`;\nclass js extends ft {\n    constructor(t, e){\n        super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners(), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return ca;\n    }\n    static get Default() {\n        return ha;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        if (this._isShown || c.trigger(this._element, lp, {\n            relatedTarget: t\n        }).defaultPrevented) return;\n        this._isShown = !0, this._element.style.visibility = \"visible\", this._backdrop.show(), this._config.scroll || new ti().hide(), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`data-te-offcanvas-${da}`, \"\");\n        const i = ()=>{\n            this._config.scroll || this._focustrap.trap(), c.trigger(this._element, cp, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(i, this._element, !0);\n    }\n    hide() {\n        if (!this._isShown || c.trigger(this._element, hp).defaultPrevented) return;\n        this._focustrap.disable(), this._element.blur(), this._isShown = !1, this._element.removeAttribute(`data-te-offcanvas-${da}`), this._backdrop.hide();\n        const e = ()=>{\n            this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._element.style.visibility = \"hidden\", this._config.scroll || new ti().reset(), c.trigger(this._element, dp);\n        };\n        this._queueCallback(e, this._element, !0);\n    }\n    dispose() {\n        this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (c.on(window, np, ()=>d.find(ap).forEach((t)=>js.getOrCreateInstance(t).show())), this._didInit = !0, vn(js));\n    }\n    _getConfig(t) {\n        return t = {\n            ...ha,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, I(ca, t, rp), t;\n    }\n    _initializeBackDrop() {\n        return new Cr({\n            isVisible: this._config.backdrop,\n            isAnimated: !0,\n            rootElement: this._element.parentNode,\n            clickCallback: ()=>this.hide()\n        });\n    }\n    _initializeFocusTrap() {\n        return new zi(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.key === \"Tab\"\n        });\n    }\n    _addEventListeners() {\n        c.on(this._element, up, (t)=>{\n            this._config.keyboard && t.key === op && this.hide();\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = js.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (e[t] === void 0 || t.startsWith(\"_\") || t === \"constructor\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst Vn = \"alert\", pp = \"te.alert\", Jc = `.${pp}`, _p = `close${Jc}`, fp = `closed${Jc}`, ui = \"data-te-alert-show\", mp = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    autoclose: \"boolean\",\n    delay: \"number\"\n}, ua = {\n    animation: !0,\n    autohide: !0,\n    autoclose: !1,\n    delay: 1e3\n}, gp = {\n    fadeIn: \"animate-[fade-in_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none\",\n    fadeOut: \"animate-[fade-out_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none\"\n}, bp = {\n    fadeIn: \"string\",\n    fadeOut: \"string\"\n};\nclass Ko extends ft {\n    constructor(t, e, i){\n        super(t), this._element = t, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get DefaultType() {\n        return mp;\n    }\n    static get Default() {\n        return ua;\n    }\n    static get NAME() {\n        return Vn;\n    }\n    // Public\n    close() {\n        if (c.trigger(this._element, _p).defaultPrevented) return;\n        let e = 0;\n        this._config.animation && (e = 300, h.addClass(this._element, this._classes.fadeOut)), this._element.removeAttribute(ui), setTimeout(()=>{\n            this._queueCallback(()=>this._destroyElement(), this._element, this._config.animation);\n        }, e);\n    }\n    show() {\n        if (this._element) {\n            if (this._config.autohide && this._setupAutohide(), (this._config.autoclose || this._config.autoclose && this._config.autohide) && this._setupAutoclose(), !this._element.hasAttribute(ui) && (h.removeClass(this._element, \"hidden\"), h.addClass(this._element, \"block\"), Mt(this._element))) {\n                const t = (e)=>{\n                    h.removeClass(this._element, \"hidden\"), h.addClass(this._element, \"block\"), c.off(e.target, \"animationend\", t);\n                };\n                this._element.setAttribute(ui, \"\"), c.on(this._element, \"animationend\", t);\n            }\n            this._config.animation && (h.removeClass(this._element, this._classes.fadeOut), h.addClass(this._element, this._classes.fadeIn));\n        }\n    }\n    hide() {\n        if (this._element && this._element.hasAttribute(ui)) {\n            this._element.removeAttribute(ui);\n            const t = (e)=>{\n                h.addClass(this._element, \"hidden\"), h.removeClass(this._element, \"block\"), this._timeout !== null && (clearTimeout(this._timeout), this._timeout = null), c.off(e.target, \"animationend\", t);\n            };\n            c.on(this._element, \"animationend\", t), h.removeClass(this._element, this._classes.fadeIn), h.addClass(this._element, this._classes.fadeOut);\n        }\n    }\n    // Private\n    _init() {\n        this._didInit || (vn(Ko, \"close\"), this._didInit = !0);\n    }\n    _getConfig(t) {\n        return t = {\n            ...ua,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, I(Vn, t, this.constructor.DefaultType), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...gp,\n            ...e,\n            ...t\n        }, I(Vn, t, bp), t;\n    }\n    _setupAutohide() {\n        this._timeout = setTimeout(()=>{\n            this.hide();\n        }, this._config.delay);\n    }\n    _setupAutoclose() {\n        this._timeout = setTimeout(()=>{\n            this.close();\n        }, this._config.delay);\n    }\n    _destroyElement() {\n        this._element.remove(), c.trigger(this._element, fp), this.dispose();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Ko.getOrCreateInstance(this);\n            if (typeof t == \"string\") {\n                if (e[t] === void 0 || t.startsWith(\"_\") || t === \"constructor\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst Wn = \"carousel\", vp = \"te.carousel\", mt = `.${vp}`, th = \".data-api\", Tp = \"ArrowLeft\", Ep = \"ArrowRight\", Cp = 500, Ap = 40, pa = {\n    interval: 5e3,\n    keyboard: !0,\n    ride: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n}, yp = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    ride: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n}, wp = {\n    pointer: \"touch-pan-y\",\n    block: \"!block\",\n    visible: \"data-[te-carousel-fade]:opacity-100 data-[te-carousel-fade]:z-[1]\",\n    invisible: \"data-[te-carousel-fade]:z-0 data-[te-carousel-fade]:opacity-0 data-[te-carousel-fade]:duration-[600ms] data-[te-carousel-fade]:delay-600\",\n    slideRight: \"translate-x-full\",\n    slideLeft: \"-translate-x-full\"\n}, kp = {\n    pointer: \"string\",\n    block: \"string\",\n    visible: \"string\",\n    invisible: \"string\",\n    slideRight: \"string\",\n    slideLeft: \"string\"\n}, ce = \"next\", he = \"prev\", fe = \"left\", Ei = \"right\", xp = {\n    [Tp]: Ei,\n    [Ep]: fe\n}, Op = `slide${mt}`, Fn = `slid${mt}`, Sp = `keydown${mt}`, Ip = `mouseenter${mt}`, Dp = `mouseleave${mt}`, $p = `touchstart${mt}`, Lp = `touchmove${mt}`, Np = `touchend${mt}`, Mp = `pointerdown${mt}`, Rp = `pointerup${mt}`, Pp = `dragstart${mt}`, Bp = `load${mt}${th}`, Hp = `click${mt}${th}`, _a = \"data-te-carousel-init\", de = \"data-te-carousel-active\", Vp = \"data-te-carousel-item-end\", Yn = \"data-te-carousel-item-start\", Wp = \"data-te-carousel-item-next\", Fp = \"data-te-carousel-item-prev\", Yp = \"data-te-carousel-pointer-event\", jp = \"[data-te-carousel-init]\", eh = \"[data-te-carousel-active]\", Ar = \"[data-te-carousel-item]\", Se = `${eh}${Ar}`, Kp = `${Ar} img`, zp = \"[data-te-carousel-item-next], [data-te-carousel-item-prev]\", Up = \"[data-te-carousel-indicators]\", Xp = \"[data-te-target]\", Gp = \"[data-te-slide], [data-te-slide-to]\", qp = \"touch\", Zp = \"pen\";\nclass Xt extends ft {\n    constructor(t, e, i){\n        super(t), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._indicatorsElement = d.findOne(Up, this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = !!window.PointerEvent, this._setActiveElementClass(), this._addEventListeners(), this._didInit = !1, this._init(), this._config.ride === \"carousel\" && this.cycle();\n    }\n    // Getters\n    static get Default() {\n        return pa;\n    }\n    static get NAME() {\n        return Wn;\n    }\n    // Public\n    next() {\n        this._slide(ce);\n    }\n    nextWhenVisible() {\n        !document.hidden && Mt(this._element) && this.next();\n    }\n    prev() {\n        this._slide(he);\n    }\n    pause(t) {\n        t || (this._isPaused = !0), d.findOne(zp, this._element) && (_c(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }\n    cycle(t) {\n        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }\n    to(t) {\n        this._activeElement = d.findOne(Se, this._element);\n        const e = this._getItemIndex(this._activeElement);\n        if (t > this._items.length - 1 || t < 0) return;\n        if (this._isSliding) {\n            c.one(this._element, Fn, ()=>this.to(t));\n            return;\n        }\n        if (e === t) {\n            this.pause(), this.cycle();\n            return;\n        }\n        const i = t > e ? ce : he;\n        this._slide(i, this._items[t]);\n    }\n    // Private\n    _init() {\n        this._didInit || (c.on(document, Hp, Gp, Xt.dataApiClickHandler), c.on(window, Bp, ()=>{\n            const t = d.find(jp);\n            for(let e = 0, i = t.length; e < i; e++)Xt.carouselInterface(t[e], Xt.getInstance(t[e]));\n        }), this._didInit = !0);\n    }\n    _getConfig(t) {\n        return t = {\n            ...pa,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, I(Wn, t, yp), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...wp,\n            ...e,\n            ...t\n        }, I(Wn, t, kp), t;\n    }\n    _enableCycle() {\n        if (this._config.ride) {\n            if (this._isSliding) {\n                c.one(this._element, Fn, ()=>this.cycle());\n                return;\n            }\n            this.cycle();\n        }\n    }\n    _applyInitialClasses() {\n        const t = d.findOne(Se, this._element);\n        t.classList.add(this._classes.block, ...this._classes.visible.split(\" \")), this._setActiveIndicatorElement(t);\n    }\n    _handleSwipe() {\n        const t = Math.abs(this.touchDeltaX);\n        if (t <= Ap) return;\n        const e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e && this._slide(e > 0 ? Ei : fe);\n    }\n    _setActiveElementClass() {\n        this._activeElement = d.findOne(Se, this._element), h.addClass(this._activeElement, \"hidden\");\n    }\n    _addEventListeners() {\n        this._config.keyboard && c.on(this._element, Sp, (t)=>this._keydown(t)), this._config.pause === \"hover\" && (c.on(this._element, Ip, (t)=>this.pause(t)), c.on(this._element, Dp, (t)=>this._enableCycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners(), this._applyInitialClasses();\n    }\n    _addTouchEventListeners() {\n        const t = (o)=>this._pointerEvent && (o.pointerType === Zp || o.pointerType === qp), e = (o)=>{\n            t(o) ? this.touchStartX = o.clientX : this._pointerEvent || (this.touchStartX = o.touches[0].clientX);\n        }, i = (o)=>{\n            this.touchDeltaX = o.touches && o.touches.length > 1 ? 0 : o.touches[0].clientX - this.touchStartX;\n        }, n = (o)=>{\n            t(o) && (this.touchDeltaX = o.clientX - this.touchStartX), this._handleSwipe(), this._config.pause === \"hover\" && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout((r)=>this._enableCycle(r), Cp + this._config.interval));\n        };\n        d.find(Kp, this._element).forEach((o)=>{\n            c.on(o, Pp, (r)=>r.preventDefault());\n        }), this._pointerEvent ? (c.on(this._element, Mp, (o)=>e(o)), c.on(this._element, Rp, (o)=>n(o)), this._element.classList.add(this._classes.pointer), this._element.setAttribute(`${Yp}`, \"\")) : (c.on(this._element, $p, (o)=>e(o)), c.on(this._element, Lp, (o)=>i(o)), c.on(this._element, Np, (o)=>n(o)));\n    }\n    _keydown(t) {\n        if (/input|textarea/i.test(t.target.tagName)) return;\n        const e = xp[t.key];\n        e && (t.preventDefault(), this._slide(e));\n    }\n    _getItemIndex(t) {\n        return this._items = t && t.parentNode ? d.find(Ar, t.parentNode) : [], this._items.indexOf(t);\n    }\n    _getItemByOrder(t, e) {\n        const i = t === ce;\n        return vc(this._items, e, i, this._config.wrap);\n    }\n    _triggerSlideEvent(t, e) {\n        const i = this._getItemIndex(t), n = this._getItemIndex(d.findOne(Se, this._element));\n        return c.trigger(this._element, Op, {\n            relatedTarget: t,\n            direction: e,\n            from: n,\n            to: i\n        });\n    }\n    _setActiveIndicatorElement(t) {\n        if (this._indicatorsElement) {\n            const e = d.findOne(eh, this._indicatorsElement);\n            e.removeAttribute(de), e.removeAttribute(\"aria-current\"), e.classList.remove(\"!opacity-100\");\n            const i = d.find(Xp, this._indicatorsElement);\n            for(let n = 0; n < i.length; n++)if (Number.parseInt(i[n].getAttribute(\"data-te-slide-to\"), 10) === this._getItemIndex(t)) {\n                i[n].setAttribute(`${de}`, \"\"), i[n].setAttribute(\"aria-current\", \"true\"), i[n].classList.add(\"!opacity-100\");\n                break;\n            }\n        }\n    }\n    _updateInterval() {\n        const t = this._activeElement || d.findOne(Se, this._element);\n        if (!t) return;\n        const e = Number.parseInt(t.getAttribute(\"data-te-interval\"), 10);\n        e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n    _slide(t, e) {\n        const i = this._directionToOrder(t), n = d.findOne(Se, this._element), o = this._getItemIndex(n), r = e || this._getItemByOrder(i, n), a = this._getItemIndex(r), l = !!this._interval, p = i === ce, u = p ? Yn : Vp, _ = p ? Wp : Fp, f = this._orderToDirection(i), g = u === Yn ? this._classes.slideLeft : this._classes.slideRight, m = u !== Yn ? this._classes.slideLeft : this._classes.slideRight;\n        if (r && r.hasAttribute(de)) {\n            this._isSliding = !1;\n            return;\n        }\n        if (this._isSliding || this._triggerSlideEvent(r, f).defaultPrevented || !n || !r) return;\n        this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;\n        const v = ()=>{\n            c.trigger(this._element, Fn, {\n                relatedTarget: r,\n                direction: f,\n                from: o,\n                to: a\n            });\n        };\n        if (this._element.hasAttribute(_a)) {\n            r.setAttribute(`${_}`, \"\"), r.classList.add(this._classes.block, m), si(r), n.setAttribute(`${u}`, \"\"), n.classList.add(g, ...this._classes.invisible.split(\" \")), n.classList.remove(...this._classes.visible.split(\" \")), r.setAttribute(`${u}`, \"\"), r.classList.add(...this._classes.visible.split(\" \")), r.classList.remove(this._classes.slideRight, this._classes.slideLeft);\n            const T = ()=>{\n                r.removeAttribute(u), r.removeAttribute(_), r.setAttribute(`${de}`, \"\"), n.removeAttribute(de), n.classList.remove(g, ...this._classes.invisible.split(\" \"), this._classes.block), n.removeAttribute(_), n.removeAttribute(u), this._isSliding = !1, setTimeout(v, 0);\n            };\n            this._queueCallback(T, n, !0);\n        } else n.removeAttribute(de), n.classList.remove(this._classes.block), r.setAttribute(`${de}`, \"\"), r.classList.add(this._classes.block), this._isSliding = !1, v();\n        l && this.cycle();\n    }\n    _directionToOrder(t) {\n        return [\n            Ei,\n            fe\n        ].includes(t) ? W() ? t === fe ? he : ce : t === fe ? ce : he : t;\n    }\n    _orderToDirection(t) {\n        return [\n            ce,\n            he\n        ].includes(t) ? W() ? t === he ? fe : Ei : t === he ? Ei : fe : t;\n    }\n    // Static\n    static carouselInterface(t, e) {\n        const i = Xt.getOrCreateInstance(t, e);\n        let { _config: n } = i;\n        typeof e == \"object\" && (n = {\n            ...n,\n            ...e\n        });\n        const o = typeof e == \"string\" ? e : e.slide;\n        if (typeof e == \"number\") {\n            i.to(e);\n            return;\n        }\n        if (typeof o == \"string\") {\n            if (typeof i[o] > \"u\") throw new TypeError(`No method named \"${o}\"`);\n            i[o]();\n        } else n.interval && n.ride === !0 && i.pause();\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            Xt.carouselInterface(this, t);\n        });\n    }\n    static dataApiClickHandler(t) {\n        const e = te(this);\n        if (!e || !e.hasAttribute(_a)) return;\n        const i = {\n            ...h.getDataAttributes(e),\n            ...h.getDataAttributes(this)\n        }, n = this.getAttribute(\"data-te-slide-to\");\n        n && (i.interval = !1), Xt.carouselInterface(e, i), n && Xt.getInstance(e).to(n), t.preventDefault();\n    }\n}\nconst jn = \"modal\", Qp = \"te.modal\", yt = `.${Qp}`, fa = \"Escape\", ma = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0,\n    modalNonInvasive: !1\n}, Jp = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\",\n    modalNonInvasive: \"boolean\"\n}, t_ = {\n    show: \"transform-none\",\n    static: \"scale-[1.02]\",\n    staticProperties: \"transition-scale duration-300 ease-in-out\",\n    backdrop: \"opacity-50 transition-all duration-300 ease-in-out fixed top-0 left-0 z-[1040] bg-black w-screen h-screen\"\n}, e_ = {\n    show: \"string\",\n    static: \"string\",\n    staticProperties: \"string\",\n    backdrop: \"string\"\n}, i_ = `hide${yt}`, s_ = `hidePrevented${yt}`, n_ = `hidden${yt}`, o_ = `show${yt}`, r_ = `shown${yt}`, ga = `resize${yt}`, ba = `click.dismiss${yt}`, va = `keydown.dismiss${yt}`, a_ = `mouseup.dismiss${yt}`, Ta = `mousedown.dismiss${yt}`, Ea = \"data-te-modal-open\", Ca = \"data-te-open\", pi = \"[data-te-modal-dialog-ref]\", l_ = \"[data-te-modal-body-ref]\";\nclass zo extends ft {\n    constructor(t, e, i){\n        super(t), this._config = this._getConfig(e), this._classes = this._getClasses(i), this._dialog = d.findOne(pi, this._element), this._backdrop = this._config.modalNonInvasive ? null : this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new ti(), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get Default() {\n        return ma;\n    }\n    static get NAME() {\n        return jn;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        this._isShown || this._isTransitioning || c.trigger(this._element, o_, {\n            relatedTarget: t\n        }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), !this._config.modalNonInvasive && this._scrollBar.hide(), document.body.setAttribute(Ea, \"true\"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), c.on(this._dialog, Ta, ()=>{\n            c.one(this._element, a_, (i)=>{\n                i.target === this._element && (this._ignoreBackdropClick = !0);\n            });\n        }), this._showElement(t), !this._config.modalNonInvasive && this._showBackdrop());\n    }\n    hide() {\n        if (!this._isShown || this._isTransitioning || c.trigger(this._element, i_).defaultPrevented) return;\n        this._isShown = !1;\n        const e = this._isAnimated();\n        e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), this._focustrap.disable(), d.findOne(pi, this._element).classList.remove(this._classes.show), c.off(this._element, ba), c.off(this._dialog, Ta), this._queueCallback(()=>this._hideModal(), this._element, e), this._element.removeAttribute(Ca);\n    }\n    dispose() {\n        [\n            window,\n            document,\n            this._dialog\n        ].forEach((t)=>c.off(t, yt)), this._backdrop && this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    handleUpdate() {\n        this._adjustDialog();\n    }\n    // Private\n    _init() {\n        this._didInit || (vn(zo), this._didInit = !0);\n    }\n    _initializeBackDrop() {\n        return new Cr({\n            isVisible: !!this._config.backdrop,\n            // 'static' option will be translated to true, and booleans will keep their value\n            isAnimated: this._isAnimated(),\n            backdropClasses: this._classes.backdrop\n        });\n    }\n    _initializeFocusTrap() {\n        return new zi(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.key === \"Tab\"\n        });\n    }\n    _getConfig(t) {\n        return t = {\n            ...ma,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, I(jn, t, Jp), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...t_,\n            ...e,\n            ...t\n        }, I(jn, t, e_), t;\n    }\n    _showElement(t) {\n        const e = this._isAnimated(), i = d.findOne(l_, this._dialog);\n        (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) && document.body.append(this._element), this._element.style.display = \"block\", this._element.classList.remove(\"hidden\"), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`${Ca}`, \"true\"), this._element.scrollTop = 0;\n        const n = d.findOne(pi, this._element);\n        n.classList.add(this._classes.show), n.classList.remove(\"opacity-0\"), n.classList.add(\"opacity-100\"), i && (i.scrollTop = 0), e && si(this._element);\n        const o = ()=>{\n            this._config.focus && this._focustrap.trap(), this._isTransitioning = !1, c.trigger(this._element, r_, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(o, this._dialog, e);\n    }\n    _setEscapeEvent() {\n        this._isShown ? c.on(document, va, (t)=>{\n            this._config.keyboard && t.key === fa ? (t.preventDefault(), this.hide()) : !this._config.keyboard && t.key === fa && this._triggerBackdropTransition();\n        }) : c.off(this._element, va);\n    }\n    _setResizeEvent() {\n        this._isShown ? c.on(window, ga, ()=>this._adjustDialog()) : c.off(window, ga);\n    }\n    _hideModal() {\n        const t = d.findOne(pi, this._element);\n        t.classList.remove(this._classes.show), t.classList.remove(\"opacity-100\"), t.classList.add(\"opacity-0\");\n        const e = cn(t);\n        setTimeout(()=>{\n            this._element.style.display = \"none\";\n        }, e), this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop && this._backdrop.hide(()=>{\n            document.body.removeAttribute(Ea), this._resetAdjustments(), !this._config.modalNonInvasive && this._scrollBar.reset(), c.trigger(this._element, n_);\n        });\n    }\n    _showBackdrop(t) {\n        c.on(this._element, ba, (e)=>{\n            if (this._ignoreBackdropClick) {\n                this._ignoreBackdropClick = !1;\n                return;\n            }\n            e.target === e.currentTarget && (this._config.backdrop === !0 ? this.hide() : this._config.backdrop === \"static\" && this._triggerBackdropTransition());\n        }), this._backdrop && this._backdrop.show(t);\n    }\n    _isAnimated() {\n        return !!d.findOne(pi, this._element);\n    }\n    _triggerBackdropTransition() {\n        if (c.trigger(this._element, s_).defaultPrevented) return;\n        const { classList: e, scrollHeight: i, style: n } = this._element, o = i > document.documentElement.clientHeight;\n        if (!o && n.overflowY === \"hidden\" || e.contains(this._classes.static)) return;\n        o || (n.overflowY = \"hidden\"), e.add(...this._classes.static.split(\" \")), e.add(...this._classes.staticProperties.split(\" \"));\n        const r = cn(this._element);\n        this._queueCallback(()=>{\n            e.remove(this._classes.static), setTimeout(()=>{\n                e.remove(...this._classes.staticProperties.split(\" \"));\n            }, r), o || this._queueCallback(()=>{\n                n.overflowY = \"\";\n            }, this._dialog);\n        }, this._dialog), this._element.focus();\n    }\n    // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n    _adjustDialog() {\n        const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0;\n        (!i && t && !W() || i && !t && W()) && (this._element.style.paddingLeft = `${e}px`), (i && !t && !W() || !i && t && W()) && (this._element.style.paddingRight = `${e}px`);\n    }\n    _resetAdjustments() {\n        this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }\n    // Static\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            const i = zo.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n}\nconst c_ = /* @__PURE__ */ new Set([\n    \"background\",\n    \"cite\",\n    \"href\",\n    \"itemtype\",\n    \"longdesc\",\n    \"poster\",\n    \"src\",\n    \"xlink:href\"\n]), ih = /^aria-[\\w-]*$/i, h_ = /^data-te-[\\w-]*$/i, d_ = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, u_ = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, p_ = (s, t)=>{\n    const e = s.nodeName.toLowerCase();\n    if (t.includes(e)) return c_.has(e) ? !!(d_.test(s.nodeValue) || u_.test(s.nodeValue)) : !0;\n    const i = t.filter((n)=>n instanceof RegExp);\n    for(let n = 0, o = i.length; n < o; n++)if (i[n].test(e)) return !0;\n    return !1;\n}, sh = {\n    // Global attributes allowed on any supplied element below.\n    \"*\": [\n        \"class\",\n        \"dir\",\n        \"id\",\n        \"lang\",\n        \"role\",\n        ih,\n        h_\n    ],\n    a: [\n        \"target\",\n        \"href\",\n        \"title\",\n        \"rel\"\n    ],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\n        \"src\",\n        \"srcset\",\n        \"alt\",\n        \"title\",\n        \"width\",\n        \"height\"\n    ],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n}, __ = {\n    // Global attributes allowed on any supplied element below.\n    \"*\": [\n        \"class\",\n        \"dir\",\n        \"id\",\n        \"lang\",\n        \"role\",\n        ih\n    ],\n    a: [\n        \"target\",\n        \"href\",\n        \"title\",\n        \"rel\"\n    ],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\n        \"src\",\n        \"srcset\",\n        \"alt\",\n        \"title\",\n        \"width\",\n        \"height\"\n    ],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n};\nfunction pn(s, t, e) {\n    if (!s.length) return s;\n    if (e && typeof e == \"function\") return e(s);\n    const n = new window.DOMParser().parseFromString(s, \"text/html\"), o = [].concat(...n.body.querySelectorAll(\"*\"));\n    for(let r = 0, a = o.length; r < a; r++){\n        const l = o[r], p = l.nodeName.toLowerCase();\n        if (!Object.keys(t).includes(p)) {\n            l.remove();\n            continue;\n        }\n        const u = [].concat(...l.attributes), _ = [].concat(t[\"*\"] || [], t[p] || []);\n        u.forEach((f)=>{\n            p_(f, _) || l.removeAttribute(f.nodeName);\n        });\n    }\n    return n.body.innerHTML;\n}\nconst Aa = \"tooltip\", f_ = \"te.tooltip\", kt = `.${f_}`, m_ = \"te-tooltip\", g_ = /* @__PURE__ */ new Set([\n    \"sanitize\",\n    \"allowList\",\n    \"sanitizeFn\"\n]), b_ = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(array|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacements: \"array\",\n    boundary: \"(string|element)\",\n    customClass: \"(string|function)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    allowList: \"object\",\n    popperConfig: \"(null|object|function)\"\n}, v_ = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: W() ? \"left\" : \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: W() ? \"right\" : \"left\"\n}, T_ = {\n    animation: !0,\n    template: '<div class=\"opacity-0 transition-opacity duration-300 ease-in-out absolute z-[1080] block m-0 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal\" role=\"tooltip\"><div data-te-tooltip-inner-ref class=\"tooltip-inner max-w-[200px] text-sm py-1.5 px-4 text-white text-center bg-[#6d6d6d] rounded\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: [\n        0,\n        0\n    ],\n    container: !1,\n    fallbackPlacements: [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ],\n    boundary: \"clippingParents\",\n    customClass: \"\",\n    sanitize: !0,\n    sanitizeFn: null,\n    allowList: __,\n    popperConfig: {\n        hide: !0\n    }\n}, E_ = {\n    HIDE: `hide${kt}`,\n    HIDDEN: `hidden${kt}`,\n    SHOW: `show${kt}`,\n    SHOWN: `shown${kt}`,\n    INSERTED: `inserted${kt}`,\n    CLICK: `click${kt}`,\n    FOCUSIN: `focusin${kt}`,\n    FOCUSOUT: `focusout${kt}`,\n    MOUSEENTER: `mouseenter${kt}`,\n    MOUSELEAVE: `mouseleave${kt}`\n}, C_ = \"fade\", A_ = \"modal\", Kn = \"show\", _i = \"show\", zn = \"out\", ya = \".tooltip-inner\", wa = `.${A_}`, ka = \"hide.te.modal\", fi = \"hover\", Un = \"focus\", y_ = \"click\", w_ = \"manual\";\nclass ri extends ft {\n    constructor(t, e){\n        if (typeof qc > \"u\") throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n        super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n    // Getters\n    static get Default() {\n        return T_;\n    }\n    static get NAME() {\n        return Aa;\n    }\n    static get Event() {\n        return E_;\n    }\n    static get DefaultType() {\n        return b_;\n    }\n    // Public\n    enable() {\n        this._isEnabled = !0;\n    }\n    disable() {\n        this._isEnabled = !1;\n    }\n    toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n    }\n    toggle(t) {\n        if (this._isEnabled) if (t) {\n            const e = this._initializeOnDelegatedTarget(t);\n            e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n        } else {\n            if (this.getTipElement().classList.contains(Kn)) {\n                this._leave(null, this);\n                return;\n            }\n            this._enter(null, this);\n        }\n    }\n    dispose() {\n        clearTimeout(this._timeout), c.off(this._element.closest(wa), ka, this._hideModalHandler), this.tip && this.tip.remove(), this._disposePopper(), super.dispose();\n    }\n    show() {\n        if (this._element.style.display === \"none\") throw new Error(\"Please use show on visible elements\");\n        if (!(this.isWithContent() && this._isEnabled)) return;\n        const t = c.trigger(this._element, this.constructor.Event.SHOW), e = fc(this._element), i = e === null ? this._element.ownerDocument.documentElement.contains(this._element) : e.contains(this._element);\n        if (t.defaultPrevented || !i) return;\n        this.constructor.NAME === \"tooltip\" && this.tip && this.getTitle() !== this.tip.querySelector(ya).innerHTML && (this._disposePopper(), this.tip.remove(), this.tip = null);\n        const n = this.getTipElement(), o = et(this.constructor.NAME);\n        n.setAttribute(\"id\", o), this._element.setAttribute(\"aria-describedby\", o), this._config.animation && setTimeout(()=>{\n            this.tip.classList.add(\"opacity-100\"), this.tip.classList.remove(\"opacity-0\");\n        }, 100);\n        const r = typeof this._config.placement == \"function\" ? this._config.placement.call(this, n, this._element) : this._config.placement, a = this._getAttachment(r);\n        this._addAttachmentClass(a);\n        const { container: l } = this._config;\n        if (A.setData(n, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.append(n), c.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = se(this._element, n, this._getPopperConfig(a)), n.getAttribute(\"id\").includes(\"tooltip\")) switch(r){\n            case \"bottom\":\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n            case \"left\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            case \"right\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            default:\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n        }\n        const u = this._resolvePossibleFunction(this._config.customClass);\n        u && n.classList.add(...u.split(\" \")), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((g)=>{\n            c.on(g, \"mouseover\", hn);\n        });\n        const _ = ()=>{\n            const g = this._hoverState;\n            this._hoverState = null, c.trigger(this._element, this.constructor.Event.SHOWN), g === zn && this._leave(null, this);\n        }, f = this.tip.classList.contains(\"transition-opacity\");\n        this._queueCallback(_, this.tip, f);\n    }\n    hide() {\n        if (!this._popper) return;\n        const t = this.getTipElement(), e = ()=>{\n            this._isWithActiveTrigger() || (this._hoverState !== _i && t.remove(), this._cleanTipClass(), this._element.removeAttribute(\"aria-describedby\"), c.trigger(this._element, this.constructor.Event.HIDDEN), this._disposePopper());\n        };\n        if (c.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n        t.classList.add(\"opacity-0\"), t.classList.remove(\"opacity-100\"), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((o)=>c.off(o, \"mouseover\", hn)), this._activeTrigger[y_] = !1, this._activeTrigger[Un] = !1, this._activeTrigger[fi] = !1;\n        const n = this.tip.classList.contains(\"opacity-0\");\n        this._queueCallback(e, this.tip, n), this._hoverState = \"\";\n    }\n    update() {\n        this._popper !== null && this._popper.update();\n    }\n    // Protected\n    isWithContent() {\n        return !!this.getTitle();\n    }\n    getTipElement() {\n        if (this.tip) return this.tip;\n        const t = document.createElement(\"div\");\n        t.innerHTML = this._config.template;\n        const e = t.children[0];\n        return this.setContent(e), e.classList.remove(C_, Kn), this.tip = e, this.tip;\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), ya);\n    }\n    _sanitizeAndSetContent(t, e, i) {\n        const n = d.findOne(i, t);\n        if (!e && n) {\n            n.remove();\n            return;\n        }\n        this.setElementContent(n, e);\n    }\n    setElementContent(t, e) {\n        if (t !== null) {\n            if (Xe(e)) {\n                e = ee(e), this._config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.append(e)) : t.textContent = e.textContent;\n                return;\n            }\n            this._config.html ? (this._config.sanitize && (e = pn(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e;\n        }\n    }\n    getTitle() {\n        const t = this._element.getAttribute(\"data-te-original-title\") || this._config.title;\n        return this._resolvePossibleFunction(t);\n    }\n    updateAttachment(t) {\n        return t === \"right\" ? \"end\" : t === \"left\" ? \"start\" : t;\n    }\n    // Private\n    _initializeOnDelegatedTarget(t, e) {\n        return e || this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _resolvePossibleFunction(t) {\n        return typeof t == \"function\" ? t.call(this._element) : t;\n    }\n    _getPopperConfig(t) {\n        const e = {\n            placement: t,\n            modifiers: [\n                {\n                    name: \"flip\",\n                    options: {\n                        fallbackPlacements: this._config.fallbackPlacements\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                },\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"arrow\",\n                    options: {\n                        element: `.${this.constructor.NAME}-arrow`\n                    }\n                },\n                {\n                    name: \"onChange\",\n                    enabled: !0,\n                    phase: \"afterWrite\",\n                    fn: (i)=>this._handlePopperPlacementChange(i)\n                }\n            ],\n            onFirstUpdate: (i)=>{\n                i.options.placement !== i.placement && this._handlePopperPlacementChange(i);\n            }\n        };\n        return {\n            ...e,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(e) : this._config.popperConfig\n        };\n    }\n    _addAttachmentClass(t) {\n        this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`);\n    }\n    _getAttachment(t) {\n        return v_[t.toUpperCase()];\n    }\n    _setListeners() {\n        this._config.trigger.split(\" \").forEach((e)=>{\n            if (e === \"click\") c.on(this._element, this.constructor.Event.CLICK, this._config.selector, (i)=>this.toggle(i));\n            else if (e !== w_) {\n                const i = e === fi ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, n = e === fi ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                c.on(this._element, i, this._config.selector, (o)=>this._enter(o)), c.on(this._element, n, this._config.selector, (o)=>this._leave(o));\n            }\n        }), this._hideModalHandler = ()=>{\n            this._element && this.hide();\n        }, c.on(this._element.closest(wa), ka, this._hideModalHandler), this._config.selector ? this._config = {\n            ...this._config,\n            trigger: \"manual\",\n            selector: \"\"\n        } : this._fixTitle();\n    }\n    _fixTitle() {\n        const t = this._element.getAttribute(\"title\"), e = typeof this._element.getAttribute(\"data-te-original-title\");\n        (t || e !== \"string\") && (this._element.setAttribute(\"data-te-original-title\", t || \"\"), t && !this._element.getAttribute(\"aria-label\") && !this._element.textContent && this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n    }\n    _enter(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusin\" ? Un : fi] = !0), e.getTipElement().classList.contains(Kn) || e._hoverState === _i) {\n            e._hoverState = _i;\n            return;\n        }\n        if (clearTimeout(e._timeout), e._hoverState = _i, !e._config.delay || !e._config.delay.show) {\n            e.show();\n            return;\n        }\n        e._timeout = setTimeout(()=>{\n            e._hoverState === _i && e.show();\n        }, e._config.delay.show);\n    }\n    _leave(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusout\" ? Un : fi] = e._element.contains(t.relatedTarget)), !e._isWithActiveTrigger()) {\n            if (clearTimeout(e._timeout), e._hoverState = zn, !e._config.delay || !e._config.delay.hide) {\n                e.hide();\n                return;\n            }\n            e._timeout = setTimeout(()=>{\n                e._hoverState === zn && e.hide();\n            }, e._config.delay.hide);\n        }\n    }\n    _isWithActiveTrigger() {\n        for(const t in this._activeTrigger)if (this._activeTrigger[t]) return !0;\n        return !1;\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return Object.keys(e).forEach((i)=>{\n            g_.has(i) && delete e[i];\n        }), t = {\n            ...this.constructor.Default,\n            ...e,\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.container = t.container === !1 ? document.body : ee(t.container), typeof t.delay == \"number\" && (t.delay = {\n            show: t.delay,\n            hide: t.delay\n        }), typeof t.title == \"number\" && (t.title = t.title.toString()), typeof t.content == \"number\" && (t.content = t.content.toString()), I(Aa, t, this.constructor.DefaultType), t.sanitize && (t.template = pn(t.template, t.allowList, t.sanitizeFn)), t;\n    }\n    _getDelegateConfig() {\n        const t = {};\n        for(const e in this._config)this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n        return t;\n    }\n    _cleanTipClass() {\n        const t = this.getTipElement(), e = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, \"g\"), i = t.getAttribute(\"class\").match(e);\n        i !== null && i.length > 0 && i.map((n)=>n.trim()).forEach((n)=>t.classList.remove(n));\n    }\n    _getBasicClassPrefix() {\n        return m_;\n    }\n    _handlePopperPlacementChange(t) {\n        const { state: e } = t;\n        e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n    }\n    _disposePopper() {\n        this._popper && (this._popper.destroy(), this._popper = null);\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = ri.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst k_ = \"popover\", x_ = \"te.popover\", xt = `.${x_}`, O_ = \"te-popover\", S_ = {\n    ...ri.Default,\n    placement: \"right\",\n    offset: [\n        0,\n        8\n    ],\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"opacity-0 transition-opacity duration-150 ease-in-out absolute top-0 left-0 z-[1070] block max-w-[267px] break-words bg-white bg-clip-padding border border-neutral-100 rounded-lg shadow-[0_0px_3px_0_rgba(0,0,0,0.07),0_2px_2px_0_rgba(0,0,0,0.04)] text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal dark:bg-neutral-700 dark:border-0 dark:text-white data-[popper-reference-hidden]:hidden\" role=\"tooltip\"><h3 class=\"popover-header py-2 px-4 mb-0 border-b-2 border-neutral-100 rounded-t-lg font-medium empty:hidden dark:border-neutral-500\"></h3><div class=\"popover-body p-4 text-[#212529] dark:text-white\"></div></div>'\n}, I_ = {\n    ...ri.DefaultType,\n    content: \"(string|element|function)\"\n}, D_ = {\n    HIDE: `hide${xt}`,\n    HIDDEN: `hidden${xt}`,\n    SHOW: `show${xt}`,\n    SHOWN: `shown${xt}`,\n    INSERTED: `inserted${xt}`,\n    CLICK: `click${xt}`,\n    FOCUSIN: `focusin${xt}`,\n    FOCUSOUT: `focusout${xt}`,\n    MOUSEENTER: `mouseenter${xt}`,\n    MOUSELEAVE: `mouseleave${xt}`\n}, $_ = \".popover-header\", L_ = \".popover-body\";\nclass nh extends ri {\n    // Getters\n    static get Default() {\n        return S_;\n    }\n    static get NAME() {\n        return k_;\n    }\n    static get Event() {\n        return D_;\n    }\n    static get DefaultType() {\n        return I_;\n    }\n    // Overrides\n    isWithContent() {\n        return this.getTitle() || this._getContent();\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), $_), this._sanitizeAndSetContent(t, this._getContent(), L_);\n    }\n    // Private\n    _getContent() {\n        return this._resolvePossibleFunction(this._config.content);\n    }\n    _getBasicClassPrefix() {\n        return O_;\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = nh.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Xn = \"scrollspy\", N_ = \"te.scrollspy\", yr = `.${N_}`, xa = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n}, M_ = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n}, R_ = {\n    active: \"!text-primary dark:!text-primary-400 font-semibold border-l-[0.125rem] border-solid border-primary dark:border-primary-400\"\n}, P_ = {\n    active: \"string\"\n}, B_ = `activate${yr}`, H_ = `scroll${yr}`, Gn = \"data-te-nav-link-active\", oh = \"[data-te-dropdown-item-ref]\", V_ = \"[data-te-nav-list-ref]\", Uo = \"[data-te-nav-link-ref]\", W_ = \"[data-te-nav-item-ref]\", rh = \"[data-te-list-group-item-ref]\", qn = `${Uo}, ${rh}, ${oh}`, F_ = \"[data-te-dropdown-ref]\", Y_ = \"[data-te-dropdown-toggle-ref]\", j_ = \"maxOffset\", Oa = \"position\";\nclass ah extends ft {\n    constructor(t, e, i){\n        super(t), this._scrollElement = this._element.tagName === \"BODY\" ? window : this._element, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, c.on(this._scrollElement, H_, ()=>this._process()), this.refresh(), this._process();\n    }\n    // Getters\n    static get Default() {\n        return xa;\n    }\n    static get NAME() {\n        return Xn;\n    }\n    // Public\n    refresh() {\n        const t = this._scrollElement === this._scrollElement.window ? j_ : Oa, e = this._config.method === \"auto\" ? t : this._config.method, i = e === Oa ? this._getScrollTop() : 0;\n        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), d.find(qn, this._config.target).map((o)=>{\n            const r = lr(o), a = r ? d.findOne(r) : null;\n            if (a) {\n                const l = a.getBoundingClientRect();\n                if (l.width || l.height) return [\n                    h[e](a).top + i,\n                    r\n                ];\n            }\n            return null;\n        }).filter((o)=>o).sort((o, r)=>o[0] - r[0]).forEach((o)=>{\n            this._offsets.push(o[0]), this._targets.push(o[1]);\n        });\n    }\n    dispose() {\n        c.off(this._scrollElement, yr), super.dispose();\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ...xa,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.target = ee(t.target) || document.documentElement, I(Xn, t, M_), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...R_,\n            ...e,\n            ...t\n        }, I(Xn, t, P_), t;\n    }\n    _getScrollTop() {\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n    _getScrollHeight() {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n    _getOffsetHeight() {\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n    _process() {\n        const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), i = this._config.offset + e - this._getOffsetHeight();\n        if (this._scrollHeight !== e && this.refresh(), t >= i) {\n            const n = this._targets[this._targets.length - 1];\n            this._activeTarget !== n && this._activate(n);\n            return;\n        }\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) {\n            this._activeTarget = null, this._clear();\n            return;\n        }\n        for(let n = this._offsets.length; n--;)this._activeTarget !== this._targets[n] && t >= this._offsets[n] && (typeof this._offsets[n + 1] > \"u\" || t < this._offsets[n + 1]) && this._activate(this._targets[n]);\n    }\n    _activate(t) {\n        this._activeTarget = t, this._clear();\n        const e = qn.split(\",\").map((n)=>`${n}[data-te-target=\"${t}\"],${n}[href=\"${t}\"]`), i = d.findOne(e.join(\",\"), this._config.target);\n        i.classList.add(...this._classes.active.split(\" \")), i.setAttribute(Gn, \"\"), i.getAttribute(oh) ? d.findOne(Y_, i.closest(F_)).classList.add(...this._classes.active.split(\" \")) : d.parents(i, V_).forEach((n)=>{\n            d.prev(n, `${Uo}, ${rh}`).forEach((o)=>{\n                o.classList.add(...this._classes.active.split(\" \")), o.setAttribute(Gn, \"\");\n            }), d.prev(n, W_).forEach((o)=>{\n                d.children(o, Uo).forEach((r)=>r.classList.add(...this._classes.active.split(\" \")));\n            });\n        }), c.trigger(this._scrollElement, B_, {\n            relatedTarget: t\n        });\n    }\n    _clear() {\n        d.find(qn, this._config.target).filter((t)=>t.classList.contains(...this._classes.active.split(\" \"))).forEach((t)=>{\n            t.classList.remove(...this._classes.active.split(\" \")), t.removeAttribute(Gn);\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = ah.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Sa = \"tab\", K_ = \"te.tab\", Tn = `.${K_}`, z_ = `hide${Tn}`, U_ = `hidden${Tn}`, X_ = `show${Tn}`, G_ = `shown${Tn}`, q_ = \"data-te-dropdown-menu-ref\", He = \"data-te-tab-active\", Ks = \"data-te-nav-active\", Z_ = \"[data-te-dropdown-ref]\", Q_ = \"[data-te-nav-ref]\", Ia = `[${He}]`, J_ = `[${Ks}]`, Da = \":scope > li > .active\", tf = \"[data-te-dropdown-toggle-ref]\", ef = \":scope > [data-te-dropdown-menu-ref] [data-te-dropdown-show]\", sf = {\n    show: \"opacity-100\",\n    hide: \"opacity-0\"\n}, nf = {\n    show: \"string\",\n    hide: \"string\"\n};\nclass lh extends ft {\n    constructor(t, e){\n        super(t), this._classes = this._getClasses(e);\n    }\n    // Getters\n    static get NAME() {\n        return Sa;\n    }\n    // Public\n    show() {\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.getAttribute(Ks) === \"\") return;\n        let t;\n        const e = te(this._element), i = this._element.closest(Q_), n = d.findOne(J_, i);\n        if (i) {\n            const l = i.nodeName === \"UL\" || i.nodeName === \"OL\" ? Da : Ia;\n            t = d.find(l, i), t = t[t.length - 1];\n        }\n        const o = t ? c.trigger(t, z_, {\n            relatedTarget: this._element\n        }) : null;\n        if (c.trigger(this._element, X_, {\n            relatedTarget: t\n        }).defaultPrevented || o !== null && o.defaultPrevented) return;\n        this._activate(this._element, i, null, n, this._element);\n        const a = ()=>{\n            c.trigger(t, U_, {\n                relatedTarget: this._element\n            }), c.trigger(this._element, G_, {\n                relatedTarget: t\n            });\n        };\n        e ? this._activate(e, e.parentNode, a, n, this._element) : a();\n    }\n    // Private\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...sf,\n            ...e,\n            ...t\n        }, I(Sa, t, nf), t;\n    }\n    _activate(t, e, i, n, o) {\n        const a = (e && (e.nodeName === \"UL\" || e.nodeName === \"OL\") ? d.find(Da, e) : d.children(e, Ia))[0], l = i && a && a.hasAttribute(He), p = ()=>this._transitionComplete(t, a, i, n, o);\n        a && l ? (h.removeClass(a, this._classes.show), h.addClass(a, this._classes.hide), this._queueCallback(p, t, !0)) : p();\n    }\n    _transitionComplete(t, e, i, n, o) {\n        if (e && n) {\n            e.removeAttribute(He), n.removeAttribute(Ks);\n            const a = d.findOne(ef, e.parentNode);\n            a && a.removeAttribute(He), e.getAttribute(\"role\") === \"tab\" && e.setAttribute(\"aria-selected\", !1);\n        }\n        t.setAttribute(He, \"\"), o.setAttribute(Ks, \"\"), t.getAttribute(\"role\") === \"tab\" && t.setAttribute(\"aria-selected\", !0), si(t), t.classList.contains(this._classes.hide) && (h.removeClass(t, this._classes.hide), h.addClass(t, this._classes.show));\n        let r = t.parentNode;\n        if (r && r.nodeName === \"LI\" && (r = r.parentNode), r && r.hasAttribute(q_)) {\n            const a = t.closest(Z_);\n            a && d.find(tf, a).forEach((l)=>l.setAttribute(He, \"\")), t.setAttribute(\"aria-expanded\", !0);\n        }\n        i && i();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = lh.getOrCreateInstance(this);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Zn = \"toast\", of = \"te.toast\", ne = `.${of}`, rf = `mouseover${ne}`, af = `mouseout${ne}`, lf = `focusin${ne}`, cf = `focusout${ne}`, hf = `hide${ne}`, df = `hidden${ne}`, uf = `show${ne}`, pf = `shown${ne}`, $a = \"data-te-toast-hide\", Qn = \"data-te-toast-show\", as = \"data-te-toast-showing\", _f = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n}, La = {\n    animation: !0,\n    autohide: !0,\n    delay: 5e3\n}, ff = {\n    fadeIn: \"animate-[fade-in_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none\",\n    fadeOut: \"animate-[fade-out_0.3s_both] p-[auto] motion-reduce:transition-none motion-reduce:animate-none\"\n}, mf = {\n    fadeIn: \"string\",\n    fadeOut: \"string\"\n};\nclass Xo extends ft {\n    constructor(t, e, i){\n        super(t), this._config = this._getConfig(e), this._classes = this._getClasses(i), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners(), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get DefaultType() {\n        return _f;\n    }\n    static get Default() {\n        return La;\n    }\n    static get NAME() {\n        return Zn;\n    }\n    // Public\n    show() {\n        if (c.trigger(this._element, uf).defaultPrevented) return;\n        this._clearTimeout(), this._config.animation && (h.removeClass(this._element, this._classes.fadeOut), h.addClass(this._element, this._classes.fadeIn));\n        const e = ()=>{\n            this._element.removeAttribute(as), c.trigger(this._element, pf), this._maybeScheduleHide();\n        };\n        this._element.removeAttribute($a), si(this._element), this._element.setAttribute(Qn, \"\"), this._element.setAttribute(as, \"\"), this._queueCallback(e, this._element, this._config.animation);\n    }\n    hide() {\n        if (!this._element || this._element.dataset.teToastShow === void 0 || c.trigger(this._element, hf).defaultPrevented) return;\n        const e = ()=>{\n            let i = 0;\n            this._config.animation && (i = 300, h.removeClass(this._element, this._classes.fadeIn), h.addClass(this._element, this._classes.fadeOut)), setTimeout(()=>{\n                this._element.setAttribute($a, \"\"), this._element.removeAttribute(as), this._element.removeAttribute(Qn), c.trigger(this._element, df);\n            }, i);\n        };\n        this._element.setAttribute(as, \"\"), this._queueCallback(e, this._element, this._config.animation);\n    }\n    dispose() {\n        this._clearTimeout(), this._element.dataset.teToastShow !== void 0 && this._element.removeAttribute(Qn), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (vn(Xo), this._didInit = !0);\n    }\n    _getConfig(t) {\n        return t = {\n            ...La,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, I(Zn, t, this.constructor.DefaultType), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...ff,\n            ...e,\n            ...t\n        }, I(Zn, t, mf), t;\n    }\n    _maybeScheduleHide() {\n        this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(()=>{\n            this.hide();\n        }, this._config.delay)));\n    }\n    _onInteraction(t, e) {\n        switch(t.type){\n            case \"mouseover\":\n            case \"mouseout\":\n                this._hasMouseInteraction = e;\n                break;\n            case \"focusin\":\n            case \"focusout\":\n                this._hasKeyboardInteraction = e;\n                break;\n        }\n        if (e) {\n            this._clearTimeout();\n            return;\n        }\n        const i = t.relatedTarget;\n        this._element === i || this._element.contains(i) || this._maybeScheduleHide();\n    }\n    _setListeners() {\n        c.on(this._element, rf, (t)=>this._onInteraction(t, !0)), c.on(this._element, af, (t)=>this._onInteraction(t, !1)), c.on(this._element, lf, (t)=>this._onInteraction(t, !0)), c.on(this._element, cf, (t)=>this._onInteraction(t, !1));\n    }\n    _clearTimeout() {\n        clearTimeout(this._timeout), this._timeout = null;\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Xo.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\n(()=>{\n    var s = {\n        454: (i, n, o)=>{\n            o.d(n, {\n                Z: ()=>l\n            });\n            var r = o(645), a = o.n(r)()(function(p) {\n                return p[1];\n            });\n            a.push([\n                i.id,\n                \"INPUT:-webkit-autofill,SELECT:-webkit-autofill,TEXTAREA:-webkit-autofill{animation-name:onautofillstart}INPUT:not(:-webkit-autofill),SELECT:not(:-webkit-autofill),TEXTAREA:not(:-webkit-autofill){animation-name:onautofillcancel}@keyframes onautofillstart{}@keyframes onautofillcancel{}\",\n                \"\"\n            ]);\n            const l = a;\n        },\n        645: (i)=>{\n            i.exports = function(n) {\n                var o = [];\n                return o.toString = function() {\n                    return this.map(function(r) {\n                        var a = n(r);\n                        return r[2] ? \"@media \".concat(r[2], \" {\").concat(a, \"}\") : a;\n                    }).join(\"\");\n                }, o.i = function(r, a, l) {\n                    typeof r == \"string\" && (r = [\n                        [\n                            null,\n                            r,\n                            \"\"\n                        ]\n                    ]);\n                    var p = {};\n                    if (l) for(var u = 0; u < this.length; u++){\n                        var _ = this[u][0];\n                        _ != null && (p[_] = !0);\n                    }\n                    for(var f = 0; f < r.length; f++){\n                        var g = [].concat(r[f]);\n                        l && p[g[0]] || (a && (g[2] ? g[2] = \"\".concat(a, \" and \").concat(g[2]) : g[2] = a), o.push(g));\n                    }\n                }, o;\n            };\n        },\n        810: ()=>{\n            (function() {\n                if (false) { var n, i; }\n            })();\n        },\n        379: (i, n, o)=>{\n            var r, a = function() {\n                var C = {};\n                return function(E) {\n                    if (C[E] === void 0) {\n                        var w = document.querySelector(E);\n                        if (window.HTMLIFrameElement && w instanceof window.HTMLIFrameElement) try {\n                            w = w.contentDocument.head;\n                        } catch  {\n                            w = null;\n                        }\n                        C[E] = w;\n                    }\n                    return C[E];\n                };\n            }(), l = [];\n            function p(C) {\n                for(var E = -1, w = 0; w < l.length; w++)if (l[w].identifier === C) {\n                    E = w;\n                    break;\n                }\n                return E;\n            }\n            function u(C, E) {\n                for(var w = {}, k = [], D = 0; D < C.length; D++){\n                    var O = C[D], x = E.base ? O[0] + E.base : O[0], L = w[x] || 0, S = \"\".concat(x, \" \").concat(L);\n                    w[x] = L + 1;\n                    var N = p(S), P = {\n                        css: O[1],\n                        media: O[2],\n                        sourceMap: O[3]\n                    };\n                    N !== -1 ? (l[N].references++, l[N].updater(P)) : l.push({\n                        identifier: S,\n                        updater: y(P, E),\n                        references: 1\n                    }), k.push(S);\n                }\n                return k;\n            }\n            function _(C) {\n                var E = document.createElement(\"style\"), w = C.attributes || {};\n                if (w.nonce === void 0) {\n                    var k = o.nc;\n                    k && (w.nonce = k);\n                }\n                if (Object.keys(w).forEach(function(O) {\n                    E.setAttribute(O, w[O]);\n                }), typeof C.insert == \"function\") C.insert(E);\n                else {\n                    var D = a(C.insert || \"head\");\n                    if (!D) throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n                    D.appendChild(E);\n                }\n                return E;\n            }\n            var f, g = (f = [], function(C, E) {\n                return f[C] = E, f.filter(Boolean).join(`\n`);\n            });\n            function m(C, E, w, k) {\n                var D = w ? \"\" : k.media ? \"@media \".concat(k.media, \" {\").concat(k.css, \"}\") : k.css;\n                if (C.styleSheet) C.styleSheet.cssText = g(E, D);\n                else {\n                    var O = document.createTextNode(D), x = C.childNodes;\n                    x[E] && C.removeChild(x[E]), x.length ? C.insertBefore(O, x[E]) : C.appendChild(O);\n                }\n            }\n            function b(C, E, w) {\n                var k = w.css, D = w.media, O = w.sourceMap;\n                if (D ? C.setAttribute(\"media\", D) : C.removeAttribute(\"media\"), O && typeof btoa < \"u\" && (k += `\n/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(O)))), \" */\")), C.styleSheet) C.styleSheet.cssText = k;\n                else {\n                    for(; C.firstChild;)C.removeChild(C.firstChild);\n                    C.appendChild(document.createTextNode(k));\n                }\n            }\n            var v = null, T = 0;\n            function y(C, E) {\n                var w, k, D;\n                if (E.singleton) {\n                    var O = T++;\n                    w = v || (v = _(E)), k = m.bind(null, w, O, !1), D = m.bind(null, w, O, !0);\n                } else w = _(E), k = b.bind(null, w, E), D = function() {\n                    (function(x) {\n                        if (x.parentNode === null) return !1;\n                        x.parentNode.removeChild(x);\n                    })(w);\n                };\n                return k(C), function(x) {\n                    if (x) {\n                        if (x.css === C.css && x.media === C.media && x.sourceMap === C.sourceMap) return;\n                        k(C = x);\n                    } else D();\n                };\n            }\n            i.exports = function(C, E) {\n                (E = E || {}).singleton || typeof E.singleton == \"boolean\" || (E.singleton = (r === void 0 && (r = !!(window && document && document.all && !window.atob)), r));\n                var w = u(C = C || [], E);\n                return function(k) {\n                    if (k = k || [], Object.prototype.toString.call(k) === \"[object Array]\") {\n                        for(var D = 0; D < w.length; D++){\n                            var O = p(w[D]);\n                            l[O].references--;\n                        }\n                        for(var x = u(k, E), L = 0; L < w.length; L++){\n                            var S = p(w[L]);\n                            l[S].references === 0 && (l[S].updater(), l.splice(S, 1));\n                        }\n                        w = x;\n                    }\n                };\n            };\n        }\n    }, t = {};\n    function e(i) {\n        var n = t[i];\n        if (n !== void 0) return n.exports;\n        var o = t[i] = {\n            id: i,\n            exports: {}\n        };\n        return s[i](o, o.exports, e), o.exports;\n    }\n    e.n = (i)=>{\n        var n = i && i.__esModule ? ()=>i.default : ()=>i;\n        return e.d(n, {\n            a: n\n        }), n;\n    }, e.d = (i, n)=>{\n        for(var o in n)e.o(n, o) && !e.o(i, o) && Object.defineProperty(i, o, {\n            enumerable: !0,\n            get: n[o]\n        });\n    }, e.o = (i, n)=>Object.prototype.hasOwnProperty.call(i, n), (()=>{\n        var i = e(379), n = e.n(i), o = e(454);\n        function r(l) {\n            if (!l.hasAttribute(\"autocompleted\")) {\n                l.setAttribute(\"autocompleted\", \"\");\n                var p = new window.CustomEvent(\"onautocomplete\", {\n                    bubbles: !0,\n                    cancelable: !0,\n                    detail: null\n                });\n                l.dispatchEvent(p) || (l.value = \"\");\n            }\n        }\n        function a(l) {\n            l.hasAttribute(\"autocompleted\") && (l.removeAttribute(\"autocompleted\"), l.dispatchEvent(new window.CustomEvent(\"onautocomplete\", {\n                bubbles: !0,\n                cancelable: !1,\n                detail: null\n            })));\n        }\n        n()(o.Z, {\n            insert: \"head\",\n            singleton: !1\n        }), o.Z.locals, e(810), document.addEventListener(\"animationstart\", function(l) {\n            l.animationName === \"onautofillstart\" ? r(l.target) : a(l.target);\n        }, !0), document.addEventListener(\"input\", function(l) {\n            l.inputType !== \"insertReplacementText\" && \"data\" in l ? a(l.target) : r(l.target);\n        }, !0);\n    })();\n})();\nconst Jn = \"input\", ls = \"te.input\", ch = \"data-te-input-wrapper-init\", hh = \"data-te-input-notch-ref\", dh = \"data-te-input-notch-leading-ref\", uh = \"data-te-input-notch-middle-ref\", gf = \"data-te-input-notch-trailing-ref\", bf = \"data-te-input-helper-ref\", vf = \"data-te-input-placeholder-active\", Yt = \"data-te-input-state-active\", Na = \"data-te-input-focused\", Ma = \"data-te-input-form-counter\", cs = `[${ch}] input`, hs = `[${ch}] textarea`, Ie = `[${hh}]`, Ra = `[${dh}]`, Pa = `[${uh}]`, Tf = `[${bf}]`, Ef = {\n    inputFormWhite: !1\n}, Cf = {\n    inputFormWhite: \"(boolean)\"\n}, ph = {\n    notch: \"group flex absolute left-0 top-0 w-full max-w-full h-full text-left pointer-events-none\",\n    notchLeading: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none left-0 top-0 h-full w-2 border-r-0 rounded-l-[0.25rem] group-data-[te-input-focused]:border-r-0 group-data-[te-input-state-active]:border-r-0\",\n    notchLeadingNormal: \"border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary\",\n    notchLeadingWhite: \"border-neutral-200 group-data-[te-input-focused]:shadow-[-1px_0_0_#ffffff,_0_1px_0_0_#ffffff,_0_-1px_0_0_#ffffff] group-data-[te-input-focused]:border-white\",\n    notchMiddle: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow-0 shrink-0 basis-auto w-auto max-w-[calc(100%-1rem)] h-full border-r-0 border-l-0 group-data-[te-input-focused]:border-x-0 group-data-[te-input-state-active]:border-x-0 group-data-[te-input-focused]:border-t group-data-[te-input-state-active]:border-t group-data-[te-input-focused]:border-solid group-data-[te-input-state-active]:border-solid group-data-[te-input-focused]:border-t-transparent group-data-[te-input-state-active]:border-t-transparent\",\n    notchMiddleNormal: \"border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary\",\n    notchMiddleWhite: \"border-neutral-200 group-data-[te-input-focused]:shadow-[0_1px_0_0_#ffffff] group-data-[te-input-focused]:border-white\",\n    notchTrailing: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow h-full border-l-0 rounded-r-[0.25rem] group-data-[te-input-focused]:border-l-0 group-data-[te-input-state-active]:border-l-0\",\n    notchTrailingNormal: \"border-neutral-300 dark:border-neutral-600 group-data-[te-input-focused]:shadow-[1px_0_0_#3b71ca,_0_-1px_0_0_#3b71ca,_0_1px_0_0_#3b71ca] group-data-[te-input-focused]:border-primary\",\n    notchTrailingWhite: \"border-neutral-200 group-data-[te-input-focused]:shadow-[1px_0_0_#ffffff,_0_-1px_0_0_#ffffff,_0_1px_0_0_#ffffff] group-data-[te-input-focused]:border-white\",\n    counter: \"text-right leading-[1.6]\"\n}, Af = {\n    notch: \"string\",\n    notchLeading: \"string\",\n    notchLeadingNormal: \"string\",\n    notchLeadingWhite: \"string\",\n    notchMiddle: \"string\",\n    notchMiddleNormal: \"string\",\n    notchMiddleWhite: \"string\",\n    notchTrailing: \"string\",\n    notchTrailingNormal: \"string\",\n    notchTrailingWhite: \"string\",\n    counter: \"string\"\n};\nclass V {\n    constructor(t, e, i){\n        this._config = this._getConfig(e, t), this._element = t, this._classes = this._getClasses(i), this._label = null, this._labelWidth = 0, this._labelMarginLeft = 0, this._notchLeading = null, this._notchMiddle = null, this._notchTrailing = null, this._initiated = !1, this._helper = null, this._counter = !1, this._counterElement = null, this._maxLength = 0, this._leadingIcon = null, this._element && (A.setData(t, ls, this), this.init());\n    }\n    // Getters\n    static get NAME() {\n        return Jn;\n    }\n    get input() {\n        return d.findOne(\"input\", this._element) || d.findOne(\"textarea\", this._element);\n    }\n    // Public\n    init() {\n        this._initiated || (this._getLabelData(), this._applyDivs(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter(), this._getEvents(), this._initiated = !0);\n    }\n    update() {\n        this._getLabelData(), this._getNotchData(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter();\n    }\n    forceActive() {\n        this.input.setAttribute(Yt, \"\"), d.findOne(Ie, this.input.parentNode).setAttribute(Yt, \"\");\n    }\n    forceInactive() {\n        this.input.removeAttribute(Yt), d.findOne(Ie, this.input.parentNode).removeAttribute(Yt);\n    }\n    dispose() {\n        this._removeBorder(), A.removeData(this._element, ls), this._element = null;\n    }\n    // Private\n    _getConfig(t, e) {\n        return t = {\n            ...Ef,\n            ...h.getDataAttributes(e),\n            ...typeof t == \"object\" ? t : {}\n        }, I(Jn, t, Cf), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...ph,\n            ...e,\n            ...t\n        }, I(Jn, t, Af), t;\n    }\n    _getLabelData() {\n        this._label = d.findOne(\"label\", this._element), this._label === null ? this._showPlaceholder() : (this._getLabelWidth(), this._getLabelPositionInInputGroup(), this._toggleDefaultDatePlaceholder());\n    }\n    _getHelper() {\n        this._helper = d.findOne(Tf, this._element);\n    }\n    _getCounter() {\n        this._counter = h.getDataAttribute(this.input, \"inputShowcounter\"), this._counter && (this._maxLength = this.input.maxLength, this._showCounter());\n    }\n    _getEvents() {\n        c.on(this._element, \"focus\", \"input\", V.activate(new V())), c.on(this._element, \"input\", \"input\", V.activate(new V())), c.on(this._element, \"blur\", \"input\", V.deactivate(new V())), c.on(this._element, \"focus\", \"textarea\", V.activate(new V())), c.on(this._element, \"input\", \"textarea\", V.activate(new V())), c.on(this._element, \"blur\", \"textarea\", V.deactivate(new V())), c.on(window, \"shown.te.modal\", (t)=>{\n            d.find(cs, t.target).forEach((e)=>{\n                const i = V.getInstance(e.parentNode);\n                i && i.update();\n            }), d.find(hs, t.target).forEach((e)=>{\n                const i = V.getInstance(e.parentNode);\n                i && i.update();\n            });\n        }), c.on(window, \"shown.te.dropdown\", (t)=>{\n            const e = t.target.parentNode.querySelector(\"[data-te-dropdown-menu-ref]\");\n            e && (d.find(cs, e).forEach((i)=>{\n                const n = V.getInstance(i.parentNode);\n                n && n.update();\n            }), d.find(hs, e).forEach((i)=>{\n                const n = V.getInstance(i.parentNode);\n                n && n.update();\n            }));\n        }), c.on(window, \"shown.te.tab\", (t)=>{\n            let e;\n            t.target.href ? e = t.target.href.split(\"#\")[1] : e = h.getDataAttribute(t.target, \"target\").split(\"#\")[1];\n            const i = d.findOne(`#${e}`);\n            d.find(cs, i).forEach((n)=>{\n                const o = V.getInstance(n.parentNode);\n                o && o.update();\n            }), d.find(hs, i).forEach((n)=>{\n                const o = V.getInstance(n.parentNode);\n                o && o.update();\n            });\n        }), c.on(window, \"reset\", (t)=>{\n            d.find(cs, t.target).forEach((e)=>{\n                const i = V.getInstance(e.parentNode);\n                i && i.forceInactive();\n            }), d.find(hs, t.target).forEach((e)=>{\n                const i = V.getInstance(e.parentNode);\n                i && i.forceInactive();\n            });\n        }), c.on(window, \"onautocomplete\", (t)=>{\n            const e = V.getInstance(t.target.parentNode);\n            !e || !t.cancelable || e.forceActive();\n        });\n    }\n    _showCounter() {\n        if (d.find(`[${Ma}]`, this._element).length > 0) return;\n        this._counterElement = document.createElement(\"div\"), h.addClass(this._counterElement, this._classes.counter), this._counterElement.setAttribute(Ma, \"\");\n        const e = this.input.value.length;\n        this._counterElement.innerHTML = `${e} / ${this._maxLength}`, this._helper.appendChild(this._counterElement), this._bindCounter();\n    }\n    _bindCounter() {\n        c.on(this.input, \"input\", ()=>{\n            const t = this.input.value.length;\n            this._counterElement.innerHTML = `${t} / ${this._maxLength}`;\n        });\n    }\n    _toggleDefaultDatePlaceholder(t = this.input) {\n        if (!(t.getAttribute(\"type\") === \"date\")) return;\n        !(document.activeElement === t) && !t.value ? t.style.opacity = 0 : t.style.opacity = 1;\n    }\n    _showPlaceholder() {\n        this.input.setAttribute(vf, \"\");\n    }\n    _getNotchData() {\n        this._notchMiddle = d.findOne(Pa, this._element), this._notchLeading = d.findOne(Ra, this._element);\n    }\n    _getLabelWidth() {\n        this._labelWidth = this._label.clientWidth * 0.8 + 8;\n    }\n    _getLabelPositionInInputGroup() {\n        if (this._labelMarginLeft = 0, !this._element.hasAttribute(\"data-te-input-group-ref\")) return;\n        const t = this.input, e = d.prev(t, \"[data-te-input-group-text-ref]\")[0];\n        e === void 0 ? this._labelMarginLeft = 0 : this._labelMarginLeft = e.offsetWidth - 1;\n    }\n    _applyDivs() {\n        const t = this._config.inputFormWhite ? this._classes.notchLeadingWhite : this._classes.notchLeadingNormal, e = this._config.inputFormWhite ? this._classes.notchMiddleWhite : this._classes.notchMiddleNormal, i = this._config.inputFormWhite ? this._classes.notchTrailingWhite : this._classes.notchTrailingNormal, n = d.find(Ie, this._element), o = $(\"div\");\n        h.addClass(o, this._classes.notch), o.setAttribute(hh, \"\"), this._notchLeading = $(\"div\"), h.addClass(this._notchLeading, `${this._classes.notchLeading} ${t}`), this._notchLeading.setAttribute(dh, \"\"), this._notchMiddle = $(\"div\"), h.addClass(this._notchMiddle, `${this._classes.notchMiddle} ${e}`), this._notchMiddle.setAttribute(uh, \"\"), this._notchTrailing = $(\"div\"), h.addClass(this._notchTrailing, `${this._classes.notchTrailing} ${i}`), this._notchTrailing.setAttribute(gf, \"\"), !(n.length >= 1) && (o.append(this._notchLeading), o.append(this._notchMiddle), o.append(this._notchTrailing), this._element.append(o));\n    }\n    _applyNotch() {\n        this._notchMiddle.style.width = `${this._labelWidth}px`, this._notchLeading.style.width = `${this._labelMarginLeft + 9}px`, this._label !== null && (this._label.style.marginLeft = `${this._labelMarginLeft}px`);\n    }\n    _removeBorder() {\n        const t = d.findOne(Ie, this._element);\n        t && t.remove();\n    }\n    _activate(t) {\n        gc(()=>{\n            this._getElements(t);\n            const e = t ? t.target : this.input, i = d.findOne(Ie, this._element);\n            t && t.type === \"focus\" && i && i.setAttribute(Na, \"\"), e.value !== \"\" && (e.setAttribute(Yt, \"\"), i && i.setAttribute(Yt, \"\")), this._toggleDefaultDatePlaceholder(e);\n        });\n    }\n    _getElements(t) {\n        if (t && (this._element = t.target.parentNode, this._label = d.findOne(\"label\", this._element)), t && this._label) {\n            const e = this._labelWidth;\n            this._getLabelData(), e !== this._labelWidth && (this._notchMiddle = d.findOne(Pa, t.target.parentNode), this._notchLeading = d.findOne(Ra, t.target.parentNode), this._applyNotch());\n        }\n    }\n    _deactivate(t) {\n        const e = t ? t.target : this.input, i = d.findOne(Ie, e.parentNode);\n        i.removeAttribute(Na), e.value === \"\" && (e.removeAttribute(Yt), i.removeAttribute(Yt)), this._toggleDefaultDatePlaceholder(e);\n    }\n    static activate(t) {\n        return function(e) {\n            t._activate(e);\n        };\n    }\n    static deactivate(t) {\n        return function(e) {\n            t._deactivate(e);\n        };\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, ls);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new V(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, ls);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Ba = \"animation\", to = \"te.animation\", yf = {\n    animation: \"string\",\n    animationStart: \"string\",\n    animationShowOnLoad: \"boolean\",\n    onStart: \"(null|function)\",\n    onEnd: \"(null|function)\",\n    onHide: \"(null|function)\",\n    onShow: \"(null|function)\",\n    animationOnScroll: \"(string)\",\n    animationWindowHeight: \"number\",\n    animationOffset: \"(number|string)\",\n    animationDelay: \"(number|string)\",\n    animationReverse: \"boolean\",\n    animationInterval: \"(number|string)\",\n    animationRepeat: \"(number|boolean)\",\n    animationReset: \"boolean\"\n}, wf = {\n    animation: \"fade\",\n    animationStart: \"onClick\",\n    animationShowOnLoad: !0,\n    onStart: null,\n    onEnd: null,\n    onHide: null,\n    onShow: null,\n    animationOnScroll: \"once\",\n    animationWindowHeight: 0,\n    animationOffset: 0,\n    animationDelay: 0,\n    animationReverse: !1,\n    animationInterval: 0,\n    animationRepeat: !1,\n    animationReset: !1\n};\nclass wr {\n    constructor(t, e){\n        this._element = t, this._animateElement = this._getAnimateElement(), this._isFirstScroll = !0, this._repeatAnimateOnScroll = !0, this._options = this._getConfig(e), this._element && (A.setData(t, to, this), this._init());\n    }\n    // Getters\n    static get NAME() {\n        return Ba;\n    }\n    // Public\n    init() {\n        this._init();\n    }\n    startAnimation() {\n        this._startAnimation();\n    }\n    stopAnimation() {\n        this._clearAnimationClass();\n    }\n    changeAnimationType(t) {\n        this._options.animation = t;\n    }\n    dispose() {\n        c.off(this._element, \"mousedown\"), c.off(this._animateElement, \"animationend\"), c.off(window, \"scroll\"), c.off(this._element, \"mouseover\"), A.removeData(this._element, to), this._element = null, this._animateElement = null, this._isFirstScroll = null, this._repeatAnimateOnScroll = null, this._options = null;\n    }\n    // Private\n    _init() {\n        switch(this._options.animationStart){\n            case \"onHover\":\n                this._bindHoverEvents();\n                break;\n            case \"onLoad\":\n                this._startAnimation();\n                break;\n            case \"onScroll\":\n                this._bindScrollEvents();\n                break;\n            case \"onClick\":\n                this._bindClickEvents();\n                break;\n        }\n        this._bindTriggerOnEndCallback(), this._options.animationReset && this._bindResetAnimationAfterFinish();\n    }\n    _getAnimateElement() {\n        const t = h.getDataAttribute(this._element, \"animation-target\");\n        return t ? d.find(t)[0] : this._element;\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._animateElement);\n        return t = {\n            ...wf,\n            ...e,\n            ...t\n        }, I(Ba, t, yf), t;\n    }\n    _animateOnScroll() {\n        const t = h.offset(this._animateElement).top, e = this._animateElement.offsetHeight, i = window.innerHeight, n = t + this._options.animationOffset <= i && t + this._options.animationOffset + e >= 0, o = this._animateElement.style.visibility === \"visible\";\n        switch(!0){\n            case n && this._isFirstScroll:\n                this._isFirstScroll = !1, this._startAnimation();\n                break;\n            case !n && this._isFirstScroll:\n                this._isFirstScroll = !1, this._hideAnimateElement();\n                break;\n            case n && !o && this._repeatAnimateOnScroll:\n                this._options.animationOnScroll !== \"repeat\" && (this._repeatAnimateOnScroll = !1), this._callback(this._options.onShow), this._showAnimateElement(), this._startAnimation();\n                break;\n            case !n && o && this._repeatAnimateOnScroll:\n                this._hideAnimateElement(), this._clearAnimationClass(), this._callback(this._options.onHide);\n                break;\n        }\n    }\n    _addAnimatedClass() {\n        h.addClass(this._animateElement, `animate-${this._options.animation}`);\n    }\n    _clearAnimationClass() {\n        this._animateElement.classList.remove(`animate-${this._options.animation}`);\n    }\n    _startAnimation() {\n        this._callback(this._options.onStart), this._addAnimatedClass(), this._options.animationRepeat && !this._options.animationInterval && this._setAnimationRepeat(), this._options.animationReverse && this._setAnimationReverse(), this._options.animationDelay && this._setAnimationDelay(), this._options.animationDuration && this._setAnimationDuration(), this._options.animationInterval && this._setAnimationInterval();\n    }\n    _setAnimationReverse() {\n        h.style(this._animateElement, {\n            animationIterationCount: this._options.animationRepeat === !0 ? \"infinite\" : \"2\",\n            animationDirection: \"alternate\"\n        });\n    }\n    _setAnimationDuration() {\n        h.style(this._animateElement, {\n            animationDuration: `${this._options.animationDuration}ms`\n        });\n    }\n    _setAnimationDelay() {\n        h.style(this._animateElement, {\n            animationDelay: `${this._options.animationDelay}ms`\n        });\n    }\n    _setAnimationRepeat() {\n        h.style(this._animateElement, {\n            animationIterationCount: this._options.animationRepeat === !0 ? \"infinite\" : this._options.animationRepeat\n        });\n    }\n    _setAnimationInterval() {\n        c.on(this._animateElement, \"animationend\", ()=>{\n            this._clearAnimationClass(), setTimeout(()=>{\n                this._addAnimatedClass();\n            }, this._options.animationInterval);\n        });\n    }\n    _hideAnimateElement() {\n        h.style(this._animateElement, {\n            visibility: \"hidden\"\n        });\n    }\n    _showAnimateElement() {\n        h.style(this._animateElement, {\n            visibility: \"visible\"\n        });\n    }\n    _bindResetAnimationAfterFinish() {\n        c.on(this._animateElement, \"animationend\", ()=>{\n            this._clearAnimationClass();\n        });\n    }\n    _bindTriggerOnEndCallback() {\n        c.on(this._animateElement, \"animationend\", ()=>{\n            this._callback(this._options.onEnd);\n        });\n    }\n    _bindScrollEvents() {\n        this._options.animationShowOnLoad || this._animateOnScroll(), c.on(window, \"scroll\", ()=>{\n            this._animateOnScroll();\n        });\n    }\n    _bindClickEvents() {\n        c.on(this._element, \"mousedown\", ()=>{\n            this._startAnimation();\n        });\n    }\n    _bindHoverEvents() {\n        c.one(this._element, \"mouseover\", ()=>{\n            this._startAnimation();\n        }), c.one(this._animateElement, \"animationend\", ()=>{\n            setTimeout(()=>{\n                this._bindHoverEvents();\n            }, 100);\n        });\n    }\n    _callback(t) {\n        t instanceof Function && t();\n    }\n    // Static\n    static autoInit(t) {\n        t._init();\n    }\n    static jQueryInterface(t) {\n        new wr(this[0], t).init();\n    }\n    static getInstance(t) {\n        return A.getData(t, to);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst kf = {\n    property: \"color\",\n    defaultValue: null,\n    inherit: !0\n}, De = (s, t)=>{\n    const { property: e, defaultValue: i, inherit: n } = {\n        ...kf,\n        ...t\n    }, o = document.createElement(\"div\");\n    o.classList.add(s), document.body.appendChild(o);\n    const a = window.getComputedStyle(o)[e] || i, p = window.getComputedStyle(o.parentElement)[e];\n    return document.body.removeChild(o), !n && p && a === p ? i : a || i;\n}, eo = \"ripple\", ds = \"te.ripple\", xf = \"rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%\", Of = [\n    \"[data-te-ripple-init]\"\n], us = [\n    0,\n    0,\n    0\n], Sf = [\n    {\n        name: \"primary\",\n        gradientColor: De(\"text-primary\", {\n            defaultValue: \"#3B71CA\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"secondary\",\n        gradientColor: De(\"text-secondary\", {\n            defaultValue: \"#9FA6B2\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"success\",\n        gradientColor: De(\"text-success\", {\n            defaultValue: \"#14A44D\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"danger\",\n        gradientColor: De(\"text-danger\", {\n            defaultValue: \"#DC4C64\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"warning\",\n        gradientColor: De(\"text-warning\", {\n            defaultValue: \"#E4A11B\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"info\",\n        gradientColor: De(\"text-info\", {\n            defaultValue: \"#54B4D3\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"light\",\n        gradientColor: \"#fbfbfb\"\n    },\n    {\n        name: \"dark\",\n        gradientColor: \"#262626\"\n    }\n], Ha = 0.5, If = {\n    rippleCentered: !1,\n    rippleColor: \"\",\n    rippleColorDark: \"\",\n    rippleDuration: \"500ms\",\n    rippleRadius: 0,\n    rippleUnbound: !1\n}, Df = {\n    rippleCentered: \"boolean\",\n    rippleColor: \"string\",\n    rippleColorDark: \"string\",\n    rippleDuration: \"string\",\n    rippleRadius: \"number\",\n    rippleUnbound: \"boolean\"\n}, $f = {\n    ripple: \"relative overflow-hidden inline-block align-bottom\",\n    rippleWave: \"rounded-[50%] opacity-50 pointer-events-none absolute touch-none scale-0 transition-[transform,_opacity] ease-[cubic-bezier(0,0,0.15,1),_cubic-bezier(0,0,0.15,1)] z-[999]\",\n    unbound: \"overflow-visible\"\n}, Lf = {\n    ripple: \"string\",\n    rippleWave: \"string\",\n    unbound: \"string\"\n};\nclass ei {\n    constructor(t, e, i){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._element && (A.setData(t, ds, this), h.addClass(this._element, this._classes.ripple)), this._clickHandler = this._createRipple.bind(this), this._rippleTimer = null, this._isMinWidthSet = !1, this._initialClasses = null, this.init();\n    }\n    // Getters\n    static get NAME() {\n        return eo;\n    }\n    // Public\n    init() {\n        this._addClickEvent(this._element);\n    }\n    dispose() {\n        A.removeData(this._element, ds), c.off(this._element, \"click\", this._clickHandler), this._element = null, this._options = null;\n    }\n    // Private\n    _autoInit(t) {\n        Of.forEach((e)=>{\n            d.closest(t.target, e) && (this._element = d.closest(t.target, e));\n        }), this._element.style.minWidth || (h.style(this._element, {\n            \"min-width\": getComputedStyle(this._element).width\n        }), this._isMinWidthSet = !0), this._options = this._getConfig(), this._classes = this._getClasses(), this._initialClasses = [\n            ...this._element.classList\n        ], h.addClass(this._element, this._classes.ripple), this._createRipple(t);\n    }\n    _addClickEvent(t) {\n        c.on(t, \"mousedown\", this._clickHandler);\n    }\n    _createRipple(t) {\n        this._element.className.indexOf(this._classes.ripple) < 0 && h.addClass(this._element, this._classes.ripple);\n        const { layerX: e, layerY: i } = t, n = t.offsetX || e, o = t.offsetY || i, r = this._element.offsetHeight, a = this._element.offsetWidth, l = this._durationToMsNumber(this._options.rippleDuration), p = {\n            offsetX: this._options.rippleCentered ? r / 2 : n,\n            offsetY: this._options.rippleCentered ? a / 2 : o,\n            height: r,\n            width: a\n        }, u = this._getDiameter(p), _ = this._options.rippleRadius || u / 2, f = {\n            delay: l * Ha,\n            duration: l - l * Ha\n        }, g = {\n            left: this._options.rippleCentered ? `${a / 2 - _}px` : `${n - _}px`,\n            top: this._options.rippleCentered ? `${r / 2 - _}px` : `${o - _}px`,\n            height: `${this._options.rippleRadius * 2 || u}px`,\n            width: `${this._options.rippleRadius * 2 || u}px`,\n            transitionDelay: `0s, ${f.delay}ms`,\n            transitionDuration: `${l}ms, ${f.duration}ms`\n        }, m = $(\"div\");\n        this._createHTMLRipple({\n            wrapper: this._element,\n            ripple: m,\n            styles: g\n        }), this._removeHTMLRipple({\n            ripple: m,\n            duration: l\n        });\n    }\n    _createHTMLRipple({ wrapper: t, ripple: e, styles: i }) {\n        Object.keys(i).forEach((n)=>e.style[n] = i[n]), h.addClass(e, this._classes.rippleWave), e.setAttribute(\"data-te-ripple-ref\", \"\"), this._addColor(e, t), this._toggleUnbound(t), this._appendRipple(e, t);\n    }\n    _removeHTMLRipple({ ripple: t, duration: e }) {\n        this._rippleTimer && (clearTimeout(this._rippleTimer), this._rippleTimer = null), t && setTimeout(()=>{\n            t.classList.add(\"!opacity-0\");\n        }, 10), this._rippleTimer = setTimeout(()=>{\n            if (t && (t.remove(), this._element)) {\n                d.find(\"[data-te-ripple-ref]\", this._element).forEach((n)=>{\n                    n.remove();\n                }), this._isMinWidthSet && (h.style(this._element, {\n                    \"min-width\": \"\"\n                }), this._isMinWidthSet = !1);\n                const i = this._initialClasses ? this._addedNewRippleClasses(this._classes.ripple, this._initialClasses) : this._classes.ripple.split(\" \");\n                h.removeClass(this._element, i);\n            }\n        }, e);\n    }\n    _addedNewRippleClasses(t, e) {\n        return t.split(\" \").filter((i)=>e.findIndex((n)=>i === n) === -1);\n    }\n    _durationToMsNumber(t) {\n        return Number(t.replace(\"ms\", \"\").replace(\"s\", \"000\"));\n    }\n    _getConfig(t = {}) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...If,\n            ...e,\n            ...t\n        }, I(eo, t, Df), t;\n    }\n    _getClasses(t = {}) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...$f,\n            ...e,\n            ...t\n        }, I(eo, t, Lf), t;\n    }\n    _getDiameter({ offsetX: t, offsetY: e, height: i, width: n }) {\n        const o = e <= i / 2, r = t <= n / 2, a = (f, g)=>Math.sqrt(f ** 2 + g ** 2), l = e === i / 2 && t === n / 2, p = {\n            first: o === !0 && r === !1,\n            second: o === !0 && r === !0,\n            third: o === !1 && r === !0,\n            fourth: o === !1 && r === !1\n        }, u = {\n            topLeft: a(t, e),\n            topRight: a(n - t, e),\n            bottomLeft: a(t, i - e),\n            bottomRight: a(n - t, i - e)\n        };\n        let _ = 0;\n        return l || p.fourth ? _ = u.topLeft : p.third ? _ = u.topRight : p.second ? _ = u.bottomRight : p.first && (_ = u.bottomLeft), _ * 2;\n    }\n    _appendRipple(t, e) {\n        e.appendChild(t), setTimeout(()=>{\n            h.addClass(t, \"opacity-0 scale-100\");\n        }, 50);\n    }\n    _toggleUnbound(t) {\n        this._options.rippleUnbound === !0 ? h.addClass(t, this._classes.unbound) : h.removeClass(t, this._classes.unbound);\n    }\n    _addColor(t) {\n        let e = this._options.rippleColor || \"rgb(0,0,0)\";\n        (localStorage.theme === \"dark\" || !(\"theme\" in localStorage) && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) && (e = this._options.rippleColorDark || this._options.rippleColor);\n        const i = Sf.find((r)=>r.name === e.toLowerCase()), n = i ? this._colorToRGB(i.gradientColor).join(\",\") : this._colorToRGB(e).join(\",\"), o = xf.split(\"{{color}}\").join(`${n}`);\n        t.style.backgroundImage = `radial-gradient(circle, ${o})`;\n    }\n    _colorToRGB(t) {\n        function e(o) {\n            return o.length < 7 && (o = `#${o[1]}${o[1]}${o[2]}${o[2]}${o[3]}${o[3]}`), [\n                parseInt(o.substr(1, 2), 16),\n                parseInt(o.substr(3, 2), 16),\n                parseInt(o.substr(5, 2), 16)\n            ];\n        }\n        function i(o) {\n            const r = document.body.appendChild(document.createElement(\"fictum\")), a = \"rgb(1, 2, 3)\";\n            return r.style.color = a, r.style.color !== a || (r.style.color = o, r.style.color === a || r.style.color === \"\") ? us : (o = getComputedStyle(r).color, document.body.removeChild(r), o);\n        }\n        function n(o) {\n            return o = o.match(/[.\\d]+/g).map((r)=>+Number(r)), o.length = 3, o;\n        }\n        return t.toLowerCase() === \"transparent\" ? us : t[0] === \"#\" ? e(t) : (t.indexOf(\"rgb\") === -1 && (t = i(t)), t.indexOf(\"rgb\") === 0 ? n(t) : us);\n    }\n    // Static\n    static autoInitial(t) {\n        return function(e) {\n            t._autoInit(e);\n        };\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            return A.getData(this, ds) ? null : new ei(this, t);\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, ds);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nfunction tt(s) {\n    return s.getDate();\n}\nfunction zs(s) {\n    return s.getDay();\n}\nfunction Y(s) {\n    return s.getMonth();\n}\nfunction B(s) {\n    return s.getFullYear();\n}\nfunction Nf(s, t, e) {\n    const i = e.startDay, n = i > 0 ? 7 - i : 0, r = new Date(s, t).getDay() + n;\n    return r >= 7 ? r - 7 : r;\n}\nfunction Go(s) {\n    return Mf(s).getDate();\n}\nfunction Mf(s) {\n    return Ct(s.getFullYear(), s.getMonth() + 1, 0);\n}\nfunction je() {\n    return /* @__PURE__ */ new Date();\n}\nfunction at(s, t) {\n    return lt(s, t * 12);\n}\nfunction lt(s, t) {\n    const e = Ct(s.getFullYear(), s.getMonth() + t, s.getDate()), i = tt(s), n = tt(e);\n    return i !== n && e.setDate(0), e;\n}\nfunction $e(s, t) {\n    return Ct(s.getFullYear(), s.getMonth(), s.getDate() + t);\n}\nfunction Ct(s, t, e) {\n    const i = new Date(s, t, e);\n    return s >= 0 && s < 100 && i.setFullYear(i.getFullYear() - 1900), i;\n}\nfunction Va(s) {\n    const t = s.split(\"-\"), e = t[0], i = t[1], n = t[2];\n    return Ct(e, i, n);\n}\nfunction Rf(s) {\n    return !Number.isNaN(s.getTime());\n}\nfunction Fe(s, t) {\n    return B(s) - B(t) || Y(s) - Y(t) || tt(s) - tt(t);\n}\nfunction me(s, t) {\n    return s.setHours(0, 0, 0, 0), t.setHours(0, 0, 0, 0), s.getTime() === t.getTime();\n}\nfunction Us(s, t) {\n    const i = B(s) - Bf();\n    return Pf(i, t);\n}\nfunction Pf(s, t) {\n    return (s % t + t) % t;\n}\nfunction Bf(s, t, e) {\n    let i = 0;\n    return e ? i = B(e) - s + 1 : t && (i = B(t)), i;\n}\nfunction _n(s, t, e, i, n, o) {\n    const r = /* @__PURE__ */ new Date();\n    r.setHours(0, 0, 0, 0);\n    const a = t && Fe(s, t) <= -1, l = e && Fe(s, e) >= 1, p = n && Fe(s, r) <= -1, u = o && Fe(s, r) >= 1, _ = i && i(s) === !1;\n    return a || l || _ || p || u;\n}\nfunction _h(s, t, e, i, n, o) {\n    const r = /* @__PURE__ */ new Date(), a = i && B(i), l = i && Y(i), p = e && B(e), u = e && Y(e), _ = B(r), f = Y(r), g = l && a && (t > a || t === a && s > l), m = u && p && (t < p || t === p && s < u), b = n && (t < _ || t === _ && s < f), v = o && (t > _ || t === _ && s > f);\n    return g || m || b || v;\n}\nfunction qo(s, t, e, i, n) {\n    const o = t && B(t), r = e && B(e), a = B(/* @__PURE__ */ new Date()), l = r && s > r, p = o && s < o, u = i && s < a, _ = n && s > a;\n    return l || p || u || _;\n}\nfunction Hf(s, t, e, i, n, o, r, a) {\n    const l = /* @__PURE__ */ new Date();\n    return l.setHours(0, 0, 0, 0), (s && o && Fe(o, l) < 0 || s) && (o = l), o && Pi(t, o, e, i, n, o, r, a);\n}\nfunction Vf(s, t, e, i, n, o, r, a) {\n    const l = /* @__PURE__ */ new Date();\n    return l.setHours(0, 0, 0, 0), (s && n && Fe(n, l) < 0 || s) && (n = l), n && Pi(t, n, e, i, n, o, r, a);\n}\nfunction Pi(s, t, e, i, n, o, r, a) {\n    return e === \"days\" ? B(s) === B(t) && Y(s) === Y(t) : e === \"months\" ? B(s) === B(t) : e === \"years\" ? B(t) >= a && B(t) <= r : !1;\n}\nconst Wf = \"data-te-datepicker-modal-container-ref\", Ff = \"data-te-datepicker-dropdown-container-ref\", Yf = \"data-te-dropdown-backdrop-ref\", jf = \"data-te-datepicker-date-text-ref\", Wa = \"data-te-datepicker-view-ref\", Kf = \"data-te-datepicker-previous-button-ref\", zf = \"data-te-datepicker-next-button-ref\", Uf = \"data-te-datepicker-ok-button-ref\", Xf = \"data-te-datepicker-cancel-button-ref\", Gf = \"data-te-datepicker-clear-button-ref\", qf = \"data-te-datepicker-view-change-button-ref\";\nfunction Zf(s, t, e, i, n, o, r, a, l, p) {\n    const u = Y(s), _ = B(s), f = tt(s), g = zs(s), m = $(\"div\"), b = `\n        ${Fa(s, u, _, t, e, i, n, o, r, a, p)}\n    `, v = `\n      ${Jf(f, g, u, n, p)}\n      ${Fa(s, u, _, t, e, i, n, o, r, a, p)}\n    `;\n    return n.inline ? (h.addClass(m, p.datepickerDropdownContainer), m.setAttribute(Ff, l), m.innerHTML = b) : (h.addClass(m, p.modalContainer), m.setAttribute(Wf, l), m.innerHTML = v), m;\n}\nfunction Qf(s) {\n    const t = $(\"div\");\n    return h.addClass(t, s), t.setAttribute(Yf, \"\"), t;\n}\nfunction Jf(s, t, e, i, n) {\n    return `\n      <div class=\"${n.datepickerHeader}\" data-te-datepicker-header>\n        <div class=\"${n.datepickerTitle}\">\n          <span class=\"${n.datepickerTitleText}\">${i.title}</span>\n        </div>\n        <div class=\"${n.datepickerDate}\">\n          <span class=\"${n.datepickerDateText}\" ${jf} >${i.weekdaysShort[t]}, ${i.monthsShort[e]} ${s}</span>\n        </div>\n      </div>\n    `;\n}\nfunction Fa(s, t, e, i, n, o, r, a, l, p, u) {\n    let _;\n    return r.inline ? _ = `\n    <div class=\"${u.datepickerMain}\">\n      ${ja(t, e, r, u)}\n      <div class=\"${u.datepickerView}\" ${Wa} tabindex=\"0\">\n        ${Ya(s, e, i, n, o, r, a, l, p, u)}\n      </div>\n    </div>\n  ` : _ = `\n    <div class=\"${u.datepickerMain}\">\n      ${ja(t, e, r, u)}\n      <div class=\"${u.datepickerView}\" ${Wa} tabindex=\"0\">\n        ${Ya(s, e, i, n, o, r, a, l, p, u)}\n      </div>\n      ${tm(r, u)}\n    </div>\n  `, _;\n}\nfunction Ya(s, t, e, i, n, o, r, a, l, p) {\n    let u;\n    return o.view === \"days\" ? u = Xs(s, e, o, p) : o.view === \"months\" ? u = Gs(t, i, n, o, r, p) : u = qs(s, i, o, a, l, p), u;\n}\nfunction ja(s, t, e, i) {\n    return `\n    <div class=\"${i.datepickerDateControls}\">\n      <button class=\"${i.datepickerViewChangeButton}\" aria-label=\"${e.switchToMultiYearViewLabel}\" ${qf}>\n        ${e.monthsFull[s]} ${t} ${Lt(e, i)}\n      </button>\n      <div class=\"${i.datepickerArrowControls}\">\n        <button class=\"${i.datepickerPreviousButton}\" aria-label=\"${e.prevMonthLabel}\" ${Kf}>${e.changeMonthIconTemplate}</button>\n        <button class=\"${i.datepickerNextButton}\" aria-label=\"${e.nextMonthLabel}\" ${zf}>${e.changeMonthIconTemplate}</button>\n      </div>\n    </div>\n    `;\n}\nfunction Lt(s, t) {\n    return `\n  <span class=\"${t.datepickerViewChangeIcon}\">\n  ${s.viewChangeIconTemplate}\n  </span>\n  `;\n}\nfunction tm(s, t) {\n    const e = `<button class=\"${t.datepickerFooterBtn}\" aria-label=\"${s.okBtnLabel}\" ${Uf}>${s.okBtnText}</button>`, i = `<button class=\"${t.datepickerFooterBtn}\" aria-label=\"${s.cancelBtnLabel}\" ${Xf}>${s.cancelBtnText}</button>`, n = `<button class=\"${t.datepickerFooterBtn} ${t.datepickerClearBtn}\" aria-label=\"${s.clearBtnLabel}\" ${Gf}>${s.clearBtnText}</button>`;\n    return `\n        <div class=\"${t.datepickerFooter}\">\n          \n        ${s.removeClearBtn ? \"\" : n}\n        ${s.removeCancelBtn ? \"\" : i}\n        ${s.removeOkBtn ? \"\" : e}\n        </div>\n      `;\n}\nfunction Xs(s, t, e, i) {\n    const n = em(s, t, e), r = `\n      <tr>\n        ${e.weekdaysNarrow.map((l, p)=>`<th class=\"${i.datepickerDayHeading}\" scope=\"col\" aria-label=\"${e.weekdaysFull[p]}\">${l}</th>`).join(\"\")}\n      </tr>\n    `, a = n.map((l)=>`\n        <tr>\n          ${l.map((p)=>`\n              <td\n              class=\"${i.datepickerCell} ${i.datepickerCellSmall}\"\n              data-te-date=\"${B(p.date)}-${Y(p.date)}-${tt(p.date)}\"\n              aria-label=\"${p.date}\"\n              aria-selected=\"${p.isSelected}\"\n              ${p.isSelected ? \"data-te-datepicker-cell-selected\" : \"\"}\n              ${!p.currentMonth || p.disabled ? \"data-te-datepicker-cell-disabled\" : \"\"}\n              ${p.isToday ? \"data-te-datepicker-cell-current\" : \"\"}\n              >\n                <div\n                  class=\"${i.datepickerCellContent} ${i.datepickerCellContentSmall}\"\n                  style=\"${p.currentMonth ? \"display: block\" : \"display: none\"}\"\n                  >\n                  ${p.dayNumber}\n                  </div>\n              </td>\n            `).join(\"\")}\n        </tr>\n      `).join(\"\");\n    return `\n      <table class=\"${i.datepickerTable}\">\n        <thead>\n          ${r}\n        </thead>\n        <tbody>\n         ${a}\n        </tbody>\n      </table>\n    `;\n}\nfunction em(s, t, e) {\n    const i = [], n = Y(s), o = Y(lt(s, -1)), r = Y(lt(s, 1)), a = B(s), l = Nf(a, n, e), p = Go(s), u = Go(lt(s, -1)), _ = 7;\n    let f = 1, g = !1;\n    for(let m = 1; m < _; m++){\n        const b = [];\n        if (m === 1) {\n            const v = u - l + 1;\n            for(let y = v; y <= u; y++){\n                const C = Ct(a, o, y);\n                b.push({\n                    date: C,\n                    currentMonth: g,\n                    isSelected: t && me(C, t),\n                    isToday: me(C, je()),\n                    dayNumber: tt(C)\n                });\n            }\n            g = !0;\n            const T = _ - b.length;\n            for(let y = 0; y < T; y++){\n                const C = Ct(a, n, f);\n                b.push({\n                    date: C,\n                    currentMonth: g,\n                    isSelected: t && me(C, t),\n                    isToday: me(C, je()),\n                    dayNumber: tt(C),\n                    disabled: _n(C, e.min, e.max, e.filter, e.disablePast, e.disableFuture)\n                }), f++;\n            }\n        } else for(let v = 1; v < 8; v++){\n            f > p && (f = 1, g = !1);\n            const T = Ct(a, g ? n : r, f);\n            b.push({\n                date: T,\n                currentMonth: g,\n                isSelected: t && me(T, t),\n                isToday: me(T, je()),\n                dayNumber: tt(T),\n                disabled: _n(T, e.min, e.max, e.filter, e.disablePast, e.disableFuture)\n            }), f++;\n        }\n        i.push(b);\n    }\n    return i;\n}\nfunction Gs(s, t, e, i, n, o) {\n    const r = im(i, n), a = Y(je()), l = B(je()), p = `\n      ${r.map((u)=>`\n          <tr>\n            ${u.map((_)=>{\n            const f = i.monthsShort.indexOf(_);\n            return `\n                <td class=\"${o.datepickerCell} ${o.datepickerCellLarge}\"\n                ${_h(f, s, i.min, i.max, i.disablePast, i.disableFuture) ? \"data-te-datepicker-cell-disabled\" : \"\"}\n                \n                data-te-month=\"${f}\" data-te-year=\"${s}\" aria-label=\"${_}, ${s}\"\n                ${f === e && s === t ? \"data-te-datepicker-cell-selected\" : \"\"}\n                ${f === a && s === l ? \"data-te-datepicker-cell-current\" : \"\"}\" data-te-month=\"${f}\" data-te-year=\"${s}\" aria-label=\"${_}, ${s}\">\n                  <div class=\"${o.datepickerCellContent} ${o.datepickerCellContentLarge}\">${_}</div>\n                </td>\n              `;\n        }).join(\"\")}\n          </tr>\n        `).join(\"\")}\n    `;\n    return `\n      <table class=\"${o.datepickerTable}\">\n        <tbody>\n         ${p}\n        </tbody>\n      </table>\n    `;\n}\nfunction im(s, t) {\n    const e = [];\n    let i = [];\n    for(let n = 0; n < s.monthsShort.length; n++)if (i.push(s.monthsShort[n]), i.length === t) {\n        const o = i;\n        e.push(o), i = [];\n    }\n    return e;\n}\nfunction qs(s, t, e, i, n, o) {\n    const r = sm(s, i, n), a = B(je()), l = `\n    ${r.map((p)=>`\n        <tr>\n          ${p.map((u)=>`\n              <td class=\"${o.datepickerCell} ${o.datepickerCellLarge}\"  aria-label=\"${u}\" data-te-year=\"${u}\"\n              ${qo(u, e.min, e.max, e.disablePast, e.disableFuture) ? \"data-te-datepicker-cell-disabled\" : \"\"}\n              ${u === t ? \"data-te-datepicker-cell-selected\" : \"\"}\n              ${u === a ? \"data-te-datepicker-cell-current\" : \"\"}\n              >\n                <div class=\"${o.datepickerCellContent} ${o.datepickerCellContentLarge}\">${u}</div>\n              </td>\n            `).join(\"\")}\n        </tr>\n      `).join(\"\")}\n  `;\n    return `\n      <table class=\"${o.datepickerTable}\">\n        <tbody>\n        ${l}\n        </tbody>\n      </table>\n    `;\n}\nfunction sm(s, t, e) {\n    const i = [], n = B(s), o = Us(s, t), r = n - o;\n    let a = [];\n    for(let l = 0; l < t; l++)if (a.push(r + l), a.length === e) {\n        const p = a;\n        i.push(p), a = [];\n    }\n    return i;\n}\nfunction nm(s, t) {\n    return `\n    <button id=\"${s}\" type=\"button\" class=\"${t}\" data-te-datepicker-toggle-button-ref data-te-datepicker-toggle-ref>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\n      </svg>  \n    </button>\n  `;\n}\nconst Ke = 37, U = 38, ze = 39, z = 40, Te = 36, Ee = 35, io = 33, so = 34, it = 13, Zs = 32, we = 27, ke = 9, om = 8, rm = 46, Tt = 24, ps = 4, _s = 4, no = \"datepicker\", Qs = \"te.datepicker\", En = `.${Qs}`, am = \".data-api\", lm = `close${En}`, cm = `open${En}`, hm = `dateChange${En}`, fs = `click${En}${am}`, fh = \"data-te-datepicker-modal-container-ref\", mh = \"data-te-datepicker-dropdown-container-ref\", ms = \"[data-te-datepicker-toggle-ref]\", dm = `[${fh}]`, um = `[${mh}]`, pm = \"[data-te-datepicker-view-change-button-ref]\", _m = \"[data-te-datepicker-previous-button-ref]\", fm = \"[data-te-datepicker-next-button-ref]\", mm = \"[data-te-datepicker-ok-button-ref]\", gm = \"[data-te-datepicker-cancel-button-ref]\", bm = \"[data-te-datepicker-clear-button-ref]\", vm = \"[data-te-datepicker-view-ref]\", Tm = \"[data-te-datepicker-toggle-button-ref]\", Em = \"[data-te-datepicker-date-text-ref]\", Cm = \"[data-te-dropdown-backdrop-ref]\", Am = \"animate-[fade-in_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\", ym = \"animate-[fade-out_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\", wm = \"animate-[fade-in_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\", km = \"animate-[fade-out_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\", xm = \"flex flex-col fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[328px] h-[512px] bg-white rounded-[0.6rem] shadow-lg z-[1066] xs:max-md:landscape:w-[475px] xs:max-md:landscape:h-[360px] xs:max-md:landscape:flex-row dark:bg-zinc-700\", Om = \"w-full h-full fixed top-0 right-0 left-0 bottom-0 bg-black/40 z-[1065]\", Sm = \"relative h-full\", Im = \"xs:max-md:landscape:h-full h-[120px] px-6 bg-primary flex flex-col rounded-t-lg dark:bg-zinc-800\", Dm = \"h-8 flex flex-col justify-end\", $m = \"text-[10px] font-normal uppercase tracking-[1.7px] text-white\", Lm = \"xs:max-md:landscape:mt-24 h-[72px] flex flex-col justify-end\", Nm = \"text-[34px] font-normal text-white\", Mm = \"outline-none px-3\", Rm = \"px-3 pt-2.5 pb-0 flex justify-between text-black/[64]\", Pm = \"flex items-center outline-none p-2.5 text-neutral-500 font-medium text-[0.9rem] rounded-xl shadow-none bg-transparent m-0 border-none hover:bg-neutral-200 focus:bg-neutral-200  dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10\", Bm = \"mt-2.5\", Hm = \"p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent mr-6 hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:mx-auto\", Vm = \"p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:rotate-180 [&>svg]:mx-auto\", Wm = \"h-14 flex absolute w-full bottom-0 justify-end items-center px-3\", Fm = \"outline-none bg-white text-primary border-none cursor-pointer py-0 px-2.5 uppercase text-[0.8rem] leading-10 font-medium h-10 tracking-[.1rem] rounded-[10px] mb-2.5 hover:bg-neutral-200 focus:bg-neutral-200 dark:bg-transparent dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10\", Ym = \"mr-auto\", jm = \"w-10 h-10 text-center text-[12px] font-normal dark:text-white\", Km = \"text-center data-[te-datepicker-cell-disabled]:text-neutral-300 data-[te-datepicker-cell-disabled]:cursor-default data-[te-datepicker-cell-disabled]:pointer-events-none data-[te-datepicker-cell-disabled]:hover:cursor-default hover:cursor-pointer group\", zm = \"w-10 h-10 xs:max-md:landscape:w-8 xs:max-md:landscape:h-8\", Um = \"w-[76px] h-[42px]\", Xm = \"mx-auto group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-neutral-300 group-[[data-te-datepicker-cell-selected]]:bg-primary group-[[data-te-datepicker-cell-selected]]:text-white group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-neutral-100 group-[[data-te-datepicker-cell-focused]]:data-[te-datepicker-cell-selected]:bg-primary group-[[data-te-datepicker-cell-current]]:border-solid group-[[data-te-datepicker-cell-current]]:border-black group-[[data-te-datepicker-cell-current]]:border dark:group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-white/10 dark:group-[[data-te-datepicker-cell-current]]:border-white dark:text-white dark:group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-white/10 dark:group-[[data-te-datepicker-cell-disabled]]:text-neutral-500\", Gm = \"w-9 h-9 leading-9 rounded-[50%] text-[13px]\", qm = \"w-[72px] h-10 leading-10 py-[1px] px-0.5 rounded-[999px]\", Zm = \"mx-auto w-[304px]\", Qm = \"flex items-center justify-content-center [&>svg]:w-5 [&>svg]:h-5 absolute outline-none border-none bg-transparent right-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2 hover:text-primary focus:text-primary dark:hover:text-primary-400 dark:focus:text-primary-400 dark:text-neutral-200\", Jm = \"inline-block pointer-events-none ml-[3px] [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-neutral-500 dark:[&>svg]:fill-white\", tg = \"w-[328px] h-[380px] bg-white rounded-lg shadow-[0px_2px_15px_-3px_rgba(0,0,0,.07),_0px_10px_20px_-2px_rgba(0,0,0,.04)] z-[1066] dark:bg-zinc-700\", eg = {\n    title: \"Select date\",\n    container: \"body\",\n    disablePast: !1,\n    disableFuture: !1,\n    monthsFull: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ],\n    monthsShort: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ],\n    weekdaysFull: [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ],\n    weekdaysShort: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    weekdaysNarrow: [\n        \"S\",\n        \"M\",\n        \"T\",\n        \"W\",\n        \"T\",\n        \"F\",\n        \"S\"\n    ],\n    okBtnText: \"Ok\",\n    clearBtnText: \"Clear\",\n    cancelBtnText: \"Cancel\",\n    okBtnLabel: \"Confirm selection\",\n    clearBtnLabel: \"Clear selection\",\n    cancelBtnLabel: \"Cancel selection\",\n    nextMonthLabel: \"Next month\",\n    prevMonthLabel: \"Previous month\",\n    nextYearLabel: \"Next year\",\n    prevYearLabel: \"Previous year\",\n    changeMonthIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-6 h-6\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n  </svg>\n  `,\n    nextMultiYearLabel: \"Next 24 years\",\n    prevMultiYearLabel: \"Previous 24 years\",\n    switchToMultiYearViewLabel: \"Choose year and month\",\n    switchToMonthViewLabel: \"Choose date\",\n    switchToDayViewLabel: \"Choose date\",\n    startDate: null,\n    startDay: 0,\n    format: \"dd/mm/yyyy\",\n    view: \"days\",\n    viewChangeIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"0\" stroke=\"currentColor\" class=\"w-6 h-6\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\n  </svg>\n  `,\n    min: null,\n    max: null,\n    filter: null,\n    inline: !1,\n    toggleButton: !0,\n    disableToggleButton: !1,\n    disableInput: !1,\n    animations: !0,\n    confirmDateOnSelect: !1,\n    removeOkBtn: !1,\n    removeCancelBtn: !1,\n    removeClearBtn: !1\n}, ig = {\n    title: \"string\",\n    container: \"string\",\n    disablePast: \"boolean\",\n    disableFuture: \"boolean\",\n    monthsFull: \"array\",\n    monthsShort: \"array\",\n    weekdaysFull: \"array\",\n    weekdaysShort: \"array\",\n    weekdaysNarrow: \"array\",\n    okBtnText: \"string\",\n    clearBtnText: \"string\",\n    cancelBtnText: \"string\",\n    okBtnLabel: \"string\",\n    clearBtnLabel: \"string\",\n    cancelBtnLabel: \"string\",\n    nextMonthLabel: \"string\",\n    prevMonthLabel: \"string\",\n    nextYearLabel: \"string\",\n    prevYearLabel: \"string\",\n    nextMultiYearLabel: \"string\",\n    prevMultiYearLabel: \"string\",\n    changeMonthIconTemplate: \"string\",\n    switchToMultiYearViewLabel: \"string\",\n    switchToMonthViewLabel: \"string\",\n    switchToDayViewLabel: \"string\",\n    startDate: \"(null|string|date)\",\n    startDay: \"number\",\n    format: \"string\",\n    view: \"string\",\n    viewChangeIconTemplate: \"string\",\n    min: \"(null|string|date)\",\n    max: \"(null|string|date)\",\n    filter: \"(null|function)\",\n    inline: \"boolean\",\n    toggleButton: \"boolean\",\n    disableToggleButton: \"boolean\",\n    disableInput: \"boolean\",\n    animations: \"boolean\",\n    confirmDateOnSelect: \"boolean\",\n    removeOkBtn: \"boolean\",\n    removeCancelBtn: \"boolean\",\n    removeClearBtn: \"boolean\"\n}, sg = {\n    fadeIn: Am,\n    fadeOut: ym,\n    fadeInShort: wm,\n    fadeOutShort: km,\n    modalContainer: xm,\n    datepickerBackdrop: Om,\n    datepickerMain: Sm,\n    datepickerHeader: Im,\n    datepickerTitle: Dm,\n    datepickerTitleText: $m,\n    datepickerDate: Lm,\n    datepickerDateText: Nm,\n    datepickerView: Mm,\n    datepickerDateControls: Rm,\n    datepickerViewChangeButton: Pm,\n    datepickerViewChangeIcon: Jm,\n    datepickerArrowControls: Bm,\n    datepickerPreviousButton: Hm,\n    datepickerNextButton: Vm,\n    datepickerFooter: Wm,\n    datepickerFooterBtn: Fm,\n    datepickerClearBtn: Ym,\n    datepickerDayHeading: jm,\n    datepickerCell: Km,\n    datepickerCellSmall: zm,\n    datepickerCellLarge: Um,\n    datepickerCellContent: Xm,\n    datepickerCellContentSmall: Gm,\n    datepickerCellContentLarge: qm,\n    datepickerTable: Zm,\n    datepickerToggleButton: Qm,\n    datepickerDropdownContainer: tg\n}, ng = {\n    fadeIn: \"string\",\n    fadeOut: \"string\",\n    fadeInShort: \"string\",\n    fadeOutShort: \"string\",\n    modalContainer: \"string\",\n    datepickerBackdrop: \"string\",\n    datepickerMain: \"string\",\n    datepickerHeader: \"string\",\n    datepickerTitle: \"string\",\n    datepickerTitleText: \"string\",\n    datepickerDate: \"string\",\n    datepickerDateText: \"string\",\n    datepickerView: \"string\",\n    datepickerDateControls: \"string\",\n    datepickerViewChangeButton: \"string\",\n    datepickerArrowControls: \"string\",\n    datepickerPreviousButton: \"string\",\n    datepickerNextButton: \"string\",\n    datepickerFooter: \"string\",\n    datepickerFooterBtn: \"string\",\n    datepickerClearBtn: \"string\",\n    datepickerDayHeading: \"string\",\n    datepickerCell: \"string\",\n    datepickerCellSmall: \"string\",\n    datepickerCellLarge: \"string\",\n    datepickerCellContent: \"string\",\n    datepickerCellContentSmall: \"string\",\n    datepickerCellContentLarge: \"string\",\n    datepickerTable: \"string\",\n    datepickerToggleButton: \"string\",\n    datepickerDropdownContainer: \"string\"\n};\nclass og {\n    constructor(t, e, i){\n        this._element = t, this._input = d.findOne(\"input\", this._element), this._options = this._getConfig(e), this._classes = this._getClasses(i), this._activeDate = /* @__PURE__ */ new Date(), this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this._headerDate = null, this._headerYear = null, this._headerMonth = null, this._view = this._options.view, this._popper = null, this._focusTrap = null, this._isOpen = !1, this._toggleButtonId = et(\"datepicker-toggle-\"), this._animations = !window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches && this._options.animations, this._scrollBar = new ti(), this._element && A.setData(t, Qs, this), this._init(), this.toggleButton && this._options.disableToggle && (this.toggleButton.disabled = \"true\"), this._options.disableInput && (this._input.disabled = \"true\");\n    }\n    // Getters\n    static get NAME() {\n        return no;\n    }\n    get container() {\n        return d.findOne(`[${fh}='${this._toggleButtonId}']`) || d.findOne(`[${mh}='${this._toggleButtonId}']`);\n    }\n    get options() {\n        return this._options;\n    }\n    get activeCell() {\n        let t;\n        return this._view === \"days\" && (t = this._getActiveDayCell()), this._view === \"months\" && (t = this._getActiveMonthCell()), this._view === \"years\" && (t = this._getActiveYearCell()), t;\n    }\n    get activeDay() {\n        return tt(this._activeDate);\n    }\n    get activeMonth() {\n        return Y(this._activeDate);\n    }\n    get activeYear() {\n        return B(this._activeDate);\n    }\n    get firstYearInView() {\n        return this.activeYear - Us(this._activeDate, Tt);\n    }\n    get lastYearInView() {\n        return this.firstYearInView + Tt - 1;\n    }\n    get viewChangeButton() {\n        return d.findOne(pm, this.container);\n    }\n    get previousButton() {\n        return d.findOne(_m, this.container);\n    }\n    get nextButton() {\n        return d.findOne(fm, this.container);\n    }\n    get okButton() {\n        return d.findOne(mm, this.container);\n    }\n    get cancelButton() {\n        return d.findOne(gm, this.container);\n    }\n    get clearButton() {\n        return d.findOne(bm, this.container);\n    }\n    get datesContainer() {\n        return d.findOne(vm, this.container);\n    }\n    get toggleButton() {\n        return d.findOne(Tm, this._element);\n    }\n    update(t = {}) {\n        this._options = this._getConfig({\n            ...this._options,\n            ...t\n        });\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        if (t = {\n            ...eg,\n            ...e,\n            ...t\n        }, I(no, t, ig), t.max && typeof t.max == \"string\" && (t.max = new Date(t.max)), t.min && typeof t.min == \"string\" && (t.min = new Date(t.min)), t.startDay && t.startDay !== 0) {\n            const i = this._getNewDaysOrderArray(t);\n            t.weekdaysNarrow = i;\n        }\n        return t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...sg,\n            ...e,\n            ...t\n        }, I(no, t, ng), t;\n    }\n    _getContainer() {\n        return d.findOne(this._options.container);\n    }\n    _getNewDaysOrderArray(t) {\n        const e = t.startDay, i = t.weekdaysNarrow;\n        return i.slice(e).concat(i.slice(0, e));\n    }\n    _init() {\n        !this.toggleButton && this._options.toggleButton && (this._appendToggleButton(), (this._input.readOnly || this._input.disabled) && (this.toggleButton.style.pointerEvents = \"none\")), this._listenToUserInput(), this._listenToToggleClick(), this._listenToToggleKeydown();\n    }\n    _appendToggleButton() {\n        const t = nm(this._toggleButtonId, this._classes.datepickerToggleButton);\n        this._element.insertAdjacentHTML(\"beforeend\", t);\n    }\n    open() {\n        if (this._input.readOnly || this._input.disabled) return;\n        const t = c.trigger(this._element, cm);\n        if (this._isOpen || t.defaultPrevented) return;\n        this._setInitialDate();\n        const e = Qf(this._classes.datepickerBackdrop), i = Zf(this._activeDate, this._selectedDate, this._selectedYear, this._selectedMonth, this._options, _s, Tt, ps, this._toggleButtonId, this._classes);\n        this._options.inline ? this._openDropdown(i) : (this._openModal(e, i), this._scrollBar.hide()), this._animations && (h.addClass(this.container, this._classes.fadeIn), h.addClass(e, this._classes.fadeInShort)), this._setFocusTrap(this.container), this._listenToDateSelection(), this._addControlsListeners(), this._updateControlsDisabledState(), this._listenToEscapeClick(), this._listenToKeyboardNavigation(), this._listenToDatesContainerFocus(), this._listenToDatesContainerBlur(), this._asyncFocusDatesContainer(), this._updateViewControlsAndAttributes(this._view), this._isOpen = !0, setTimeout(()=>{\n            this._listenToOutsideClick();\n        }, 0);\n    }\n    _openDropdown(t) {\n        this._popper = se(this._input, t, {\n            placement: \"bottom-start\"\n        }), this._getContainer().appendChild(t);\n    }\n    _openModal(t, e) {\n        const i = this._getContainer();\n        i.appendChild(t), i.appendChild(e);\n    }\n    _setFocusTrap(t) {\n        this._focusTrap = new zi(t, {\n            event: \"keydown\",\n            condition: (e)=>e.key === \"Tab\"\n        }), this._focusTrap.trap();\n    }\n    _listenToUserInput() {\n        c.on(this._input, \"input\", (t)=>{\n            this._handleUserInput(t.target.value);\n        });\n    }\n    _listenToToggleClick() {\n        c.on(this._element, fs, ms, (t)=>{\n            t.preventDefault(), this.open();\n        });\n    }\n    _listenToToggleKeydown() {\n        c.on(this._element, \"keydown\", ms, (t)=>{\n            t.keyCode === it && !this._isOpen && this.open();\n        });\n    }\n    _listenToDateSelection() {\n        c.on(this.datesContainer, \"click\", (t)=>{\n            this._handleDateSelection(t);\n        });\n    }\n    _handleDateSelection(t) {\n        const e = t.target.nodeName === \"DIV\" ? t.target.parentNode.dataset : t.target.dataset, i = t.target.nodeName === \"DIV\" ? t.target.parentNode : t.target;\n        if (e.teDate && this._pickDay(e.teDate, i), e.teMonth && e.teYear) {\n            const n = parseInt(e.teMonth, 10), o = parseInt(e.teYear, 10);\n            this._pickMonth(n, o);\n        }\n        if (e.teYear && !e.teMonth) {\n            const n = parseInt(e.teYear, 10);\n            this._pickYear(n);\n        }\n        this._options.inline || this._updateHeaderDate(this._activeDate, this._options.monthsShort, this._options.weekdaysShort);\n    }\n    _updateHeaderDate(t, e, i) {\n        const n = d.findOne(Em, this.container), o = Y(t), r = tt(t), a = zs(t);\n        n.innerHTML = `${i[a]}, ${e[o]} ${r}`;\n    }\n    _addControlsListeners() {\n        c.on(this.nextButton, \"click\", ()=>{\n            this._view === \"days\" ? this.nextMonth() : this._view === \"years\" ? this.nextYears() : this.nextYear(), this._updateControlsDisabledState();\n        }), c.on(this.previousButton, \"click\", ()=>{\n            this._view === \"days\" ? this.previousMonth() : this._view === \"years\" ? this.previousYears() : this.previousYear(), this._updateControlsDisabledState();\n        }), c.on(this.viewChangeButton, \"click\", ()=>{\n            this._view === \"days\" ? this._changeView(\"years\") : (this._view === \"years\" || this._view === \"months\") && this._changeView(\"days\");\n        }), this._options.inline || this._listenToFooterButtonsClick();\n    }\n    _listenToFooterButtonsClick() {\n        c.on(this.okButton, \"click\", ()=>this.handleOk()), c.on(this.cancelButton, \"click\", ()=>this.handleCancel()), c.on(this.clearButton, \"click\", ()=>this.handleClear());\n    }\n    _listenToOutsideClick() {\n        c.on(document, fs, (t)=>{\n            const e = t.target === this.container, i = this.container && this.container.contains(t.target);\n            !e && !i && this.close();\n        });\n    }\n    _listenToEscapeClick() {\n        c.on(document, \"keydown\", (t)=>{\n            t.keyCode === we && this._isOpen && this.close();\n        });\n    }\n    _listenToKeyboardNavigation() {\n        c.on(this.datesContainer, \"keydown\", (t)=>{\n            this._handleKeydown(t);\n        });\n    }\n    _listenToDatesContainerFocus() {\n        c.on(this.datesContainer, \"focus\", ()=>{\n            this._focusActiveCell(this.activeCell);\n        });\n    }\n    _listenToDatesContainerBlur() {\n        c.on(this.datesContainer, \"blur\", ()=>{\n            this._removeCurrentFocusStyles();\n        });\n    }\n    _handleKeydown(t) {\n        this._view === \"days\" && this._handleDaysViewKeydown(t), this._view === \"months\" && this._handleMonthsViewKeydown(t), this._view === \"years\" && this._handleYearsViewKeydown(t);\n    }\n    _handleDaysViewKeydown(t) {\n        const e = this._activeDate, i = this.activeCell;\n        switch(t.keyCode){\n            case Ke:\n                this._activeDate = $e(this._activeDate, W() ? 1 : -1);\n                break;\n            case ze:\n                this._activeDate = $e(this._activeDate, W() ? -1 : 1);\n                break;\n            case U:\n                this._activeDate = $e(this._activeDate, -7);\n                break;\n            case z:\n                this._activeDate = $e(this._activeDate, 7);\n                break;\n            case Te:\n                this._activeDate = $e(this._activeDate, 1 - tt(this._activeDate));\n                break;\n            case Ee:\n                this._activeDate = $e(this._activeDate, Go(this._activeDate) - tt(this._activeDate));\n                break;\n            case io:\n                this._activeDate = lt(this._activeDate, -1);\n                break;\n            case so:\n                this._activeDate = lt(this._activeDate, 1);\n                break;\n            case it:\n            case Zs:\n                this._selectDate(this._activeDate), this._handleDateSelection(t), t.preventDefault();\n                return;\n            default:\n                return;\n        }\n        Pi(e, this._activeDate, this._view, Tt, this._options.min, this._options.max) || this._changeView(\"days\"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();\n    }\n    _asyncFocusDatesContainer() {\n        setTimeout(()=>{\n            this.datesContainer.focus();\n        }, 0);\n    }\n    _focusActiveCell(t) {\n        t && t.setAttribute(\"data-te-datepicker-cell-focused\", \"\");\n    }\n    _removeHighlightFromCell(t) {\n        t && t.removeAttribute(\"data-te-datepicker-cell-focused\");\n    }\n    _getActiveDayCell() {\n        const t = d.find(\"td\", this.datesContainer);\n        return Array.from(t).find((i)=>{\n            const n = Va(i.dataset.teDate);\n            return me(n, this._activeDate);\n        });\n    }\n    _handleMonthsViewKeydown(t) {\n        const e = this._activeDate, i = this.activeCell;\n        switch(t.keyCode){\n            case Ke:\n                this._activeDate = lt(this._activeDate, W() ? 1 : -1);\n                break;\n            case ze:\n                this._activeDate = lt(this._activeDate, W() ? -1 : 1);\n                break;\n            case U:\n                this._activeDate = lt(this._activeDate, -4);\n                break;\n            case z:\n                this._activeDate = lt(this._activeDate, 4);\n                break;\n            case Te:\n                this._activeDate = lt(this._activeDate, -this.activeMonth);\n                break;\n            case Ee:\n                this._activeDate = lt(this._activeDate, 11 - this.activeMonth);\n                break;\n            case io:\n                this._activeDate = at(this._activeDate, -1);\n                break;\n            case so:\n                this._activeDate = at(this._activeDate, 1);\n                break;\n            case it:\n            case Zs:\n                this._selectMonth(this.activeMonth);\n                return;\n            default:\n                return;\n        }\n        Pi(e, this._activeDate, this._view, Tt, this._options.min, this._options.max) || this._changeView(\"months\"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();\n    }\n    _getActiveMonthCell() {\n        const t = d.find(\"td\", this.datesContainer);\n        return Array.from(t).find((i)=>{\n            const n = parseInt(i.dataset.teYear, 10), o = parseInt(i.dataset.teMonth, 10);\n            return n === this.activeYear && o === this.activeMonth;\n        });\n    }\n    _handleYearsViewKeydown(t) {\n        const e = this._activeDate, i = this.activeCell, n = 4, o = 24;\n        switch(t.keyCode){\n            case Ke:\n                this._activeDate = at(this._activeDate, W() ? 1 : -1);\n                break;\n            case ze:\n                this._activeDate = at(this._activeDate, W() ? -1 : 1);\n                break;\n            case U:\n                this._activeDate = at(this._activeDate, -n);\n                break;\n            case z:\n                this._activeDate = at(this._activeDate, n);\n                break;\n            case Te:\n                this._activeDate = at(this._activeDate, -Us(this._activeDate, o));\n                break;\n            case Ee:\n                this._activeDate = at(this._activeDate, o - Us(this._activeDate, o) - 1);\n                break;\n            case io:\n                this._activeDate = at(this._activeDate, -o);\n                break;\n            case so:\n                this._activeDate = at(this._activeDate, o);\n                break;\n            case it:\n            case Zs:\n                this._selectYear(this.activeYear);\n                return;\n            default:\n                return;\n        }\n        Pi(e, this._activeDate, this._view, Tt, this._options.min, this._options.max) || this._changeView(\"years\"), this._removeHighlightFromCell(i), this._focusActiveCell(this.activeCell), t.preventDefault();\n    }\n    _getActiveYearCell() {\n        const t = d.find(\"td\", this.datesContainer);\n        return Array.from(t).find((i)=>parseInt(i.dataset.teYear, 10) === this.activeYear);\n    }\n    _setInitialDate() {\n        this._input.value ? this._handleUserInput(this._input.value) : this._options.startDate ? this._activeDate = new Date(this._options.startDate) : this._activeDate = /* @__PURE__ */ new Date();\n    }\n    close() {\n        const t = c.trigger(this._element, lm);\n        !this._isOpen || t.defaultPrevented || (this._removeDatepickerListeners(), this._animations && h.addClass(this.container, this._classes.fadeOut), this._options.inline ? this._closeDropdown() : this._closeModal(), this._isOpen = !1, this._view = this._options.view, this.toggleButton ? this.toggleButton.focus() : this._input.focus());\n    }\n    _closeDropdown() {\n        const t = d.findOne(um), e = this._getContainer();\n        window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches && (t && e.removeChild(t), this._popper && this._popper.destroy()), t.addEventListener(\"animationend\", ()=>{\n            t && e.removeChild(t), this._popper && this._popper.destroy();\n        }), this._removeFocusTrap();\n    }\n    _closeModal() {\n        const t = d.findOne(Cm), e = d.findOne(dm);\n        !e || !t || (this._animations ? (h.addClass(t, this._classes.fadeOutShort), t.addEventListener(\"animationend\", ()=>{\n            this._removePicker(t, e), this._scrollBar.reset();\n        })) : (this._removePicker(t, e), this._scrollBar.reset()));\n    }\n    _removePicker(t, e) {\n        const i = this._getContainer();\n        i.removeChild(t), i.removeChild(e);\n    }\n    _removeFocusTrap() {\n        this._focusTrap && (this._focusTrap.disable(), this._focusTrap = null);\n    }\n    _removeDatepickerListeners() {\n        c.off(this.nextButton, \"click\"), c.off(this.previousButton, \"click\"), c.off(this.viewChangeButton, \"click\"), c.off(this.okButton, \"click\"), c.off(this.cancelButton, \"click\"), c.off(this.clearButton, \"click\"), c.off(this.datesContainer, \"click\"), c.off(this.datesContainer, \"keydown\"), c.off(this.datesContainer, \"focus\"), c.off(this.datesContainer, \"blur\"), c.off(document, fs);\n    }\n    dispose() {\n        this._isOpen && this.close(), this._removeInputAndToggleListeners();\n        const t = d.findOne(`#${this._toggleButtonId}`);\n        t && this._element.removeChild(t), A.removeData(this._element, Qs), this._element = null, this._input = null, this._options = null, this._activeDate = null, this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this._headerDate = null, this._headerYear = null, this._headerMonth = null, this._view = null, this._popper = null, this._focusTrap = null;\n    }\n    _removeInputAndToggleListeners() {\n        c.off(this._input, \"input\"), c.off(this._element, fs, ms), c.off(this._element, \"keydown\", ms);\n    }\n    handleOk() {\n        this._confirmSelection(this._headerDate), this.close();\n    }\n    _selectDate(t, e = this.activeCell) {\n        const { min: i, max: n, filter: o, disablePast: r, disableFuture: a } = this._options;\n        _n(t, i, n, o, r, a) || (this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._selectedDate = t, this._selectedYear = B(t), this._selectedMonth = Y(t), this._headerDate = t, (this._options.inline || this.options.confirmDateOnSelect) && (this._confirmSelection(t), this.close()));\n    }\n    _selectYear(t, e = this.activeCell) {\n        this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._headerYear = t, this._asyncChangeView(\"months\");\n    }\n    _selectMonth(t, e = this.activeCell) {\n        this._removeCurrentSelectionStyles(), this._removeCurrentFocusStyles(), this._addSelectedStyles(e), this._headerMonth = t, this._asyncChangeView(\"days\");\n    }\n    _removeSelectedStyles(t) {\n        t && t.removeAttribute(\"data-te-datepicker-cell-selected\");\n    }\n    _addSelectedStyles(t) {\n        t && t.setAttribute(\"data-te-datepicker-cell-selected\", \"\");\n    }\n    _confirmSelection(t) {\n        if (t) {\n            const e = this.formatDate(t);\n            this._input.value = e, c.trigger(this._element, hm, {\n                date: t\n            }), c.trigger(this._input, \"input\");\n        }\n    }\n    handleCancel() {\n        this._selectedDate = null, this._selectedYear = null, this._selectedMonth = null, this.close();\n    }\n    handleClear() {\n        this._selectedDate = null, this._selectedMonth = null, this._selectedYear = null, this._headerDate = null, this._headerMonth = null, this._headerYear = null, this._removeCurrentSelectionStyles(), this._input.value = \"\", this._setInitialDate(), this._changeView(\"days\"), this._updateHeaderDate(this._activeDate, this._options.monthsShort, this._options.weekdaysShort);\n    }\n    _removeCurrentSelectionStyles() {\n        const t = d.findOne(\"[data-te-datepicker-cell-selected]\", this.container);\n        t && t.removeAttribute(\"data-te-datepicker-cell-selected\");\n    }\n    _removeCurrentFocusStyles() {\n        const t = d.findOne(\"[data-te-datepicker-cell-focused]\", this.container);\n        t && t.removeAttribute(\"data-te-datepicker-cell-focused\");\n    }\n    formatDate(t) {\n        const e = tt(t), i = this._addLeadingZero(tt(t)), n = this._options.weekdaysShort[zs(t)], o = this._options.weekdaysFull[zs(t)], r = Y(t) + 1, a = this._addLeadingZero(Y(t) + 1), l = this._options.monthsShort[Y(t)], p = this._options.monthsFull[Y(t)], u = B(t).toString().length === 2 ? B(t) : B(t).toString().slice(2, 4), _ = B(t), f = this._options.format.split(/(d{1,4}|m{1,4}|y{4}|yy|!.)/g);\n        let g = \"\";\n        return f.forEach((m)=>{\n            switch(m){\n                case \"dddd\":\n                    m = m.replace(m, o);\n                    break;\n                case \"ddd\":\n                    m = m.replace(m, n);\n                    break;\n                case \"dd\":\n                    m = m.replace(m, i);\n                    break;\n                case \"d\":\n                    m = m.replace(m, e);\n                    break;\n                case \"mmmm\":\n                    m = m.replace(m, p);\n                    break;\n                case \"mmm\":\n                    m = m.replace(m, l);\n                    break;\n                case \"mm\":\n                    m = m.replace(m, a);\n                    break;\n                case \"m\":\n                    m = m.replace(m, r);\n                    break;\n                case \"yyyy\":\n                    m = m.replace(m, _);\n                    break;\n                case \"yy\":\n                    m = m.replace(m, u);\n                    break;\n            }\n            g += m;\n        }), g;\n    }\n    _addLeadingZero(t) {\n        return parseInt(t, 10) < 10 ? `0${t}` : t;\n    }\n    _pickDay(t, e) {\n        const i = Va(t), { min: n, max: o, filter: r, disablePast: a, disableFuture: l } = this._options;\n        _n(i, n, o, r, a, l) || (this._activeDate = i, this._selectDate(i, e));\n    }\n    _pickYear(t) {\n        const { min: e, max: i, disablePast: n, disableFuture: o } = this._options;\n        if (qo(t, e, i, n, o)) return;\n        const r = Ct(t, this.activeMonth, this.activeDay);\n        this._activeDate = r, this._selectedDate = r, this._selectYear(t);\n    }\n    _pickMonth(t, e) {\n        const { min: i, max: n, disablePast: o, disableFuture: r } = this._options;\n        if (_h(t, e, i, n, o, r) || qo(e, i, n, o, r)) return;\n        const a = Ct(e, t, this.activeDay);\n        this._activeDate = a, this._selectMonth(t);\n    }\n    nextMonth() {\n        const t = lt(this._activeDate, 1), e = Xs(t, this._headerDate, this._options, this._classes);\n        this._activeDate = t, this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.datesContainer.innerHTML = e;\n    }\n    previousMonth() {\n        const t = lt(this._activeDate, -1);\n        this._activeDate = t;\n        const e = Xs(t, this._headerDate, this._options, this._classes);\n        this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.datesContainer.innerHTML = e;\n    }\n    nextYear() {\n        const t = at(this._activeDate, 1);\n        this._activeDate = t, this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes);\n        const e = Gs(this.activeYear, this._selectedYear, this._selectedMonth, this._options, _s, this._classes);\n        this.datesContainer.innerHTML = e;\n    }\n    previousYear() {\n        const t = at(this._activeDate, -1);\n        this._activeDate = t, this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes);\n        const e = Gs(this.activeYear, this._selectedYear, this._selectedMonth, this._options, _s, this._classes);\n        this.datesContainer.innerHTML = e;\n    }\n    nextYears() {\n        const t = at(this._activeDate, 24);\n        this._activeDate = t;\n        const e = qs(t, this._selectedYear, this._options, Tt, ps, this._classes);\n        this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.datesContainer.innerHTML = e;\n    }\n    previousYears() {\n        const t = at(this._activeDate, -24);\n        this._activeDate = t;\n        const e = qs(t, this._selectedYear, this._options, Tt, ps, this._classes);\n        this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.datesContainer.innerHTML = e;\n    }\n    _asyncChangeView(t) {\n        setTimeout(()=>{\n            this._changeView(t);\n        }, 0);\n    }\n    _changeView(t) {\n        this._view = t, this.datesContainer.blur(), t === \"days\" && (this.datesContainer.innerHTML = Xs(this._activeDate, this._headerDate, this._options, this._classes)), t === \"months\" && (this.datesContainer.innerHTML = Gs(this.activeYear, this._selectedYear, this._selectedMonth, this._options, _s, this._classes)), t === \"years\" && (this.datesContainer.innerHTML = qs(this._activeDate, this._selectedYear, this._options, Tt, ps, this._classes)), this.datesContainer.focus(), this._updateViewControlsAndAttributes(t), this._updateControlsDisabledState();\n    }\n    _updateViewControlsAndAttributes(t) {\n        t === \"days\" && (this.viewChangeButton.textContent = `${this._options.monthsFull[this.activeMonth]} ${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.viewChangeButton.setAttribute(\"aria-label\", this._options.switchToMultiYearViewLabel), this.previousButton.setAttribute(\"aria-label\", this._options.prevMonthLabel), this.nextButton.setAttribute(\"aria-label\", this._options.nextMonthLabel)), t === \"months\" && (this.viewChangeButton.textContent = `${this.activeYear}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.viewChangeButton.setAttribute(\"aria-label\", this._options.switchToDayViewLabel), this.previousButton.setAttribute(\"aria-label\", this._options.prevYearLabel), this.nextButton.setAttribute(\"aria-label\", this._options.nextYearLabel)), t === \"years\" && (this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`, this.viewChangeButton.innerHTML += Lt(this._options, this._classes), this.viewChangeButton.setAttribute(\"aria-label\", this._options.switchToMonthViewLabel), this.previousButton.setAttribute(\"aria-label\", this._options.prevMultiYearLabel), this.nextButton.setAttribute(\"aria-label\", this._options.nextMultiYearLabel));\n    }\n    _updateControlsDisabledState() {\n        Hf(this._options.disableFuture, this._activeDate, this._view, Tt, this._options.min, this._options.max, this.lastYearInView, this.firstYearInView) ? this.nextButton.disabled = !0 : this.nextButton.disabled = !1, Vf(this._options.disablePast, this._activeDate, this._view, Tt, this._options.min, this._options.max, this.lastYearInView, this.firstYearInView) ? this.previousButton.disabled = !0 : this.previousButton.disabled = !1;\n    }\n    _handleUserInput(t) {\n        const e = this._getDelimeters(this._options.format), i = this._parseDate(t, this._options.format, e);\n        Rf(i) ? (this._activeDate = i, this._selectedDate = i, this._selectedYear = B(i), this._selectedMonth = Y(i), this._headerDate = i) : (this._activeDate = /* @__PURE__ */ new Date(), this._selectedDate = null, this._selectedMonth = null, this._selectedYear = null, this._headerDate = null, this._headerMonth = null, this._headerYear = null);\n    }\n    _getDelimeters(t) {\n        return t.match(/[^(dmy)]{1,}/g);\n    }\n    _parseDate(t, e, i) {\n        let n;\n        i[0] !== i[1] ? n = i[0] + i[1] : n = i[0];\n        const o = new RegExp(`[${n}]`), r = t.split(o), a = e.split(o), l = e.indexOf(\"mmm\") !== -1, p = [];\n        for(let b = 0; b < a.length; b++)a[b].indexOf(\"yy\") !== -1 && (p[0] = {\n            value: r[b],\n            format: a[b]\n        }), a[b].indexOf(\"m\") !== -1 && (p[1] = {\n            value: r[b],\n            format: a[b]\n        }), a[b].indexOf(\"d\") !== -1 && a[b].length <= 2 && (p[2] = {\n            value: r[b],\n            format: a[b]\n        });\n        let u;\n        e.indexOf(\"mmmm\") !== -1 ? u = this._options.monthsFull : u = this._options.monthsShort;\n        const _ = Number(p[0].value), f = l ? this.getMonthNumberByMonthName(p[1].value, u) : Number(p[1].value) - 1, g = Number(p[2].value);\n        return Ct(_, f, g);\n    }\n    getMonthNumberByMonthName(t, e) {\n        return e.findIndex((i)=>i === t);\n    }\n    static getInstance(t) {\n        return A.getData(t, Qs);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst rg = ({ format24: s, okLabel: t, cancelLabel: e, headID: i, footerID: n, bodyID: o, pickerID: r, clearLabel: a, inline: l, showClearBtn: p, amLabel: u, pmLabel: _ }, f)=>{\n    const g = `<div id='${r}' class='${f.timepickerWrapper}' data-te-timepicker-wrapper>\n      <div class=\"${f.timepickerContainer}\">\n        <div class=\"${f.timepickerElements}\" data-te-timepicker-elements-wrapper>\n        <div id='${i}' class='${f.timepickerHead}' style='padding-right:${s ? 50 : 10}px'>\n        <div class='${f.timepickerHeadContent}'>\n            <div class=\"${f.timepickerCurrentWrapper}\">\n              <span class=\"${f.timepickerCurrentButtonWrapper}\">\n                <button type='button' class='${f.timepickerCurrentButton}' tabindex=\"0\" data-te-timepicker-active data-te-timepicker-current data-te-timepicker-hour data-te-ripple-init>21</button>\n              </span>\n              <button type='button' class='${f.timepickerDot}' disabled>:</button>\n            <span class=\"${f.timepickerCurrentButtonWrapper}\">\n              <button type='button' class='${f.timepickerCurrentButton}' tabindex=\"0\" data-te-timepicker-current data-te-timepicker-minute data-te-ripple-init>21</button>\n            </span>\n            </div>\n            ${s ? \"\" : `<div class=\"${f.timepickerModeWrapper}\">\n                  <button type='button' class=\"${f.timepickerModeAm}\" tabindex=\"0\" data-te-timepicker-am data-te-timepicker-hour-mode data-te-ripple-init>${u}</button>\n                  <button class=\"${f.timepickerModePm}\" tabindex=\"0\" data-te-timepicker-pm data-te-timepicker-hour-mode data-te-ripple-init>${_}</button>\n                </div>`}\n        </div>\n      </div>\n      ${l ? \"\" : `<div id='${o}' class='${f.timepickerClockWrapper}' data-te-timepicker-clock-wrapper>\n            <div class='${f.timepickerClock}' data-te-timepicker-clock>\n              <span class='${f.timepickerMiddleDot}' data-te-timepicker-middle-dot></span>\n              <div class='${f.timepickerHandPointer}' data-te-timepicker-hand-pointer>\n                <div class='${f.timepickerPointerCircle}' data-te-timepicker-circle></div>\n              </div>\n              ${s ? '<div class=\"' + f.timepickerClockInner + '\" data-te-timepicker-clock-inner></div>' : \"\"}\n            </div>\n          </div>`}\n    </div>\n    <div id='${n}' class='${f.timepickerFooterWrapper}'>\n      <div class=\"${f.timepickerFooter}\">\n        ${p ? `<button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-clear tabindex=\"0\" data-te-ripple-init>${a}</button>` : \"\"}\n        <button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-cancel tabindex=\"0\" data-te-ripple-init>${e}</button>\n        <button type='button' class='${f.timepickerFooterButton}' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${t}</button>\n      </div>\n    </div>\n  </div>\n</div>`, m = `<div id='${r}' class='${f.timepickerInlineWrapper}' data-te-timepicker-wrapper>\n        <div class=\"${f.timepickerInlineContainer}\">\n          <div class=\"${f.timepickerInlineElements}\" data-te-timepicker-elements-wrapper>\n          <div id='${i}' class='${f.timepickerInlineHead}'\n          style='padding-right:10px'>\n          <div class='${f.timepickerInlineHeadContent}'>\n              <div class=\"${f.timepickerCurrentWrapper}\">\n                <span class=\"${f.timepickerInlineHourWrapper}\" data-te-timepicker-inline-hour-icons>\n                  <span class=\"${f.timepickerInlineIconUp}\" data-te-timepicker-icon-up data-te-timepicker-icon-inline-hour>\n                    <span class=\"${f.timepickerInlineIconSvg}\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 15.75l7.5-7.5 7.5 7.5\" />\n                      </svg>   \n                    </span>\n                  </span>\n                  <button type='button' class='${f.timepickerInlineCurrentButton}' data-te-timepicker-hour data-te-timepicker-current data-te-timepicker-current-inline tabindex=\"0\" data-te-ripple-init>21</button>\n                  <span class=\"${f.timepickerInlineIconDown}\" data-te-timepicker-icon-inline-hour data-te-timepicker-icon-down>\n                    <span class=\"${f.timepickerInlineIconSvg}\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\n                      </svg>  \n                    </span>\n                  </span>\n                </span>\n                <button type='button' class='${f.timepickerInlineDot}' data-te-timepicker-current-inline disabled>:</button>\n              <span class=\"${f.timepickerCurrentMinuteWrapper}\">\n                <span class=\"${f.timepickerInlineIconUp}\" data-te-timepicker-icon-up data-te-timepicker-icon-inline-minute>\n                  <span class=\"${f.timepickerInlineIconSvg}\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 15.75l7.5-7.5 7.5 7.5\" />\n                    </svg>\n                  </span>\n                </span>\n                <button type='button' class='${f.timepickerInlineCurrentButton}' data-te-timepicker-minute data-te-timepicker-current data-te-timepicker-current-inline tabindex=\"0\" data-te-ripple-init>21</button>\n                <span class=\"${f.timepickerInlineIconDown}\" data-te-timepicker-icon-inline-minute data-te-timepicker-icon-down>\n                  <span class=\"${f.timepickerInlineIconSvg}\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\n                    </svg> \n                  </span>\n                </span>\n              </span>\n              </div>\n              ${s ? \"\" : `<div class=\"${f.timepickerInlineModeWrapper}\">\n                      <button type='button' class=\"${f.timepickerInlineModeAm}\" data-te-timepicker-am data-te-timepicker-hour-mode tabindex=\"0\" data-te-ripple-init>${u}</button>\n                      <button class=\"${f.timepickerInlineModePm}\" data-te-timepicker-hour-mode data-te-timepicker-pm tabindex=\"0\" data-te-ripple-init>${_}</button>\n                      <button type='button' class='${f.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${t}</button>\n                    </div>`}\n              ${s ? `<button class='${f.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${t}</button>` : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n</div>`;\n    return l ? m : g;\n}, ag = (s, t, e)=>{\n    const { iconSVG: i } = s;\n    return `\n  <button id=\"${t}\" tabindex=\"0\" type=\"button\" class=\"${e.timepickerToggleButton}\" data-te-toggle=\"timepicker\" data-te-timepicker-toggle-button data-te-timepicker-icon>\n    ${i}\n  </button>\n`;\n}, Cn = \"data-te-timepicker-disabled\", gs = \"data-te-timepicker-active\", Ce = (s)=>{\n    if (s === \"\") return;\n    let t, e, i, n;\n    return gh(s) ? (t = s.getHours(), n = t, e = s.getMinutes(), t %= 12, n === 0 && t === 0 && (i = \"AM\"), t = t || 12, i === void 0 && (i = Number(n) >= 12 ? \"PM\" : \"AM\"), e = e < 10 ? `0${e}` : e) : ([t, e, i] = R(s, !1), n = t, t %= 12, n === 0 && t === 0 && (i = \"AM\"), t = t || 12, i === void 0 && (i = Number(n) >= 12 ? \"PM\" : \"AM\")), {\n        hours: t,\n        minutes: e,\n        amOrPm: i\n    };\n}, gh = (s)=>s && Object.prototype.toString.call(s) === \"[object Date]\" && !Number.isNaN(s), Ka = (s)=>{\n    if (s === \"\") return;\n    let t, e;\n    return gh(s) ? (t = s.getHours(), e = s.getMinutes()) : [t, e] = R(s, !1), e = Number(e) < 10 ? `0${Number(e)}` : e, {\n        hours: t,\n        minutes: e\n    };\n}, lg = (s, t, e)=>c.on(document, s, t, ({ target: i })=>{\n        if (i.hasAttribute(gs)) return;\n        document.querySelectorAll(t).forEach((o)=>{\n            o.hasAttribute(gs) && (h.removeClass(o, e.opacity), o.removeAttribute(gs));\n        }), h.addClass(i, e.opacity), i.setAttribute(gs, \"\");\n    }), za = ({ clientX: s, clientY: t, touches: e }, i, n = !1)=>{\n    const { left: o, top: r } = i.getBoundingClientRect();\n    let a = {};\n    return !n || !e ? a = {\n        x: s - o,\n        y: t - r\n    } : n && Object.keys(e).length > 0 && (a = {\n        x: e[0].clientX - o,\n        y: e[0].clientY - r\n    }), a;\n}, bs = ()=>navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), R = (s, t = !0)=>t ? s.value.replace(/:/gi, \" \").split(\" \") : s.replace(/:/gi, \" \").split(\" \"), bh = (s, t)=>{\n    const [e, i, n] = R(s, !1), [o, r, a] = R(t, !1);\n    return n === \"PM\" && a === \"AM\" || n === a && e > o || i > r;\n}, vh = ()=>{\n    const s = /* @__PURE__ */ new Date(), t = s.getHours(), e = s.getMinutes();\n    return `${t}:${e < 10 ? `0${e}` : e}`;\n}, Gt = (s, t, e)=>{\n    if (!t) return s;\n    let i = vh();\n    return e && (i = `${Ce(i).hours}:${Ce(i).minutes} ${Ce(i).amOrPm}`), (s !== \"\" && bh(i, s) || s === \"\") && (s = i), s;\n}, qt = (s, t, e)=>{\n    if (!t) return s;\n    let i = vh();\n    return e && (i = `${Ce(i).hours}:${Ce(i).minutes} ${Ce(i).amOrPm}`), (s !== \"\" && !bh(i, s) || s === \"\") && (s = i), s;\n}, cg = ({ format12: s, maxTime: t, minTime: e, disablePast: i, disableFuture: n }, o, r)=>{\n    const a = R(o)[1];\n    e = Gt(e, i, s), t = qt(t, n, s);\n    const [l, p, u] = R(t, !1), [_, f, g] = R(e, !1);\n    if (u !== void 0 || g !== void 0) return [\n        r,\n        a\n    ];\n    if (!(l !== \"\" && _ === \"\" && Number(r) > Number(l)) && !(l === \"\" && _ !== \"\" && p === void 0 && f !== \"\" && Number(r) < Number(_))) return [\n        r,\n        a\n    ];\n}, Ua = (s, t, e, i)=>{\n    s.forEach((n)=>{\n        t = t === \"12\" && i ? \"0\" : t, (n.textContent === \"00\" || Number(n.textContent === \"12\" && i ? \"0\" : n.textContent) > t) && (h.addClass(n, e.tipsDisabled), n.setAttribute(Cn, \"\"));\n    });\n}, Xa = (s, t, e, i)=>{\n    s.forEach((n)=>{\n        t = t === \"12\" && i ? \"0\" : t, n.textContent !== \"00\" && Number(n.textContent === \"12\" && i ? \"0\" : n.textContent) < Number(t) && (h.addClass(n, e.tipsDisabled), n.setAttribute(Cn, \"\"));\n    });\n}, Th = (s, t, e, i)=>{\n    if (t === \"12\" || t === \"24\") return;\n    const n = e ? 12 : 24;\n    return i === \"max\" ? (Number(s) === n ? 0 : Number(s)) > Number(t) : (Number(s) === n ? 0 : Number(s)) < Number(t);\n}, hg = (s, t, e, i, n, o)=>{\n    s.forEach((r)=>{\n        (Th(i, e, o, \"max\") || Number(r.textContent) > t && Number(i) === Number(e)) && (h.addClass(r, n.tipsDisabled), r.setAttribute(Cn, \"\"));\n    });\n}, dg = (s, t, e, i, n, o)=>{\n    s.forEach((r)=>{\n        (Th(i, e, o, \"min\") || Number(r.textContent) < t && Number(i) === Number(e)) && (h.addClass(r, n.tipsDisabled), r.setAttribute(Cn, \"\"));\n    });\n}, ug = (s)=>s.startsWith(\"0\") ? Number(s.slice(1)) : Number(s), Bi = \"timepicker\", M = `data-te-${Bi}`, Ga = \"[data-te-toggle]\", Js = `te.${Bi}`, Pt = `.${Js}`, Bt = \".data-api\", qa = `click${Pt}${Bt}`, vs = `keydown${Pt}${Bt}`, Za = `mousedown${Pt}${Bt}`, Qa = `mouseup${Pt}${Bt}`, Ja = `mousemove${Pt}${Bt}`, tl = `mouseleave${Pt}${Bt}`, el = `mouseover${Pt}${Bt}`, il = `touchmove${Pt}${Bt}`, sl = `touchend${Pt}${Bt}`, nl = `touchstart${Pt}${Bt}`, pg = `[${M}-am]`, _g = `[${M}-pm]`, fg = `[${M}-format24]`, Ts = `[${M}-current]`, Es = `[${M}-hour-mode]`, mg = `[${M}-toggle-button]`, oo = `${M}-cancel`, ol = `${M}-clear`, ro = `${M}-submit`, gg = `${M}-icon`, ao = `${M}-icon-up`, lo = `${M}-icon-down`, bg = `${M}-icon-inline-hour`, vg = `${M}-icon-inline-minute`, rl = `${M}-inline-hour-icons`, Tg = `${M}-current-inline`, Eg = \"readonly\", Cg = `${M}-invalid-feedback`, co = `${M}-is-invalid`, jt = `${M}-disabled`, H = `${M}-active`, Ag = `${M}-input`, ue = `${M}-clock`, mi = `${M}-clock-inner`, ho = `${M}-wrapper`, al = `${M}-clock-wrapper`, Cs = `${M}-hour`, uo = `${M}-minute`, As = `${M}-tips-element`, X = `${M}-tips-hours`, q = `${M}-tips-minutes`, ht = `${M}-tips-inner`, ys = `${M}-tips-inner-element`, ll = `${M}-middle-dot`, po = `${M}-hand-pointer`, _o = `${M}-circle`, cl = `${M}-modal`, yg = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n</svg>`, wg = {\n    appendValidationInfo: !0,\n    bodyID: \"\",\n    cancelLabel: \"Cancel\",\n    clearLabel: \"Clear\",\n    closeModalOnBackdropClick: !0,\n    closeModalOnMinutesClick: !1,\n    container: \"body\",\n    defaultTime: \"\",\n    disabled: !1,\n    disablePast: !1,\n    disableFuture: !1,\n    enableValidation: !0,\n    focusInputAfterApprove: !1,\n    footerID: \"\",\n    format12: !0,\n    format24: !1,\n    headID: \"\",\n    increment: !1,\n    inline: !1,\n    invalidLabel: \"Invalid Time Format\",\n    maxTime: \"\",\n    minTime: \"\",\n    modalID: \"\",\n    okLabel: \"Ok\",\n    overflowHidden: !0,\n    pickerID: \"\",\n    readOnly: !1,\n    showClearBtn: !0,\n    switchHoursToMinutesOnClick: !0,\n    iconSVG: yg,\n    withIcon: !0,\n    pmLabel: \"PM\",\n    amLabel: \"AM\",\n    animations: !0\n}, kg = {\n    appendValidationInfo: \"boolean\",\n    bodyID: \"string\",\n    cancelLabel: \"string\",\n    clearLabel: \"string\",\n    closeModalOnBackdropClick: \"boolean\",\n    closeModalOnMinutesClick: \"boolean\",\n    container: \"string\",\n    disabled: \"boolean\",\n    disablePast: \"boolean\",\n    disableFuture: \"boolean\",\n    enableValidation: \"boolean\",\n    footerID: \"string\",\n    format12: \"boolean\",\n    format24: \"boolean\",\n    headID: \"string\",\n    increment: \"boolean\",\n    inline: \"boolean\",\n    invalidLabel: \"string\",\n    modalID: \"string\",\n    okLabel: \"string\",\n    overflowHidden: \"boolean\",\n    pickerID: \"string\",\n    readOnly: \"boolean\",\n    showClearBtn: \"boolean\",\n    switchHoursToMinutesOnClick: \"boolean\",\n    defaultTime: \"(string|date|number)\",\n    iconSVG: \"string\",\n    withIcon: \"boolean\",\n    pmLabel: \"string\",\n    amLabel: \"string\",\n    animations: \"boolean\"\n}, xg = {\n    tips: \"absolute rounded-[100%] w-[32px] h-[32px] text-center cursor-pointer text-[1.1rem] rounded-[100%] bg-transparent flex justify-center items-center font-light focus:outline-none selection:bg-transparent\",\n    tipsActive: \"text-white bg-[#3b71ca] font-normal\",\n    tipsDisabled: \"text-[#b3afaf] pointer-events-none bg-transparent\",\n    transform: \"transition-[transform,height] ease-in-out duration-[400ms]\",\n    modal: \"z-[1065]\",\n    clockAnimation: \"animate-[show-up-clock_350ms_linear]\",\n    opacity: \"!opacity-100\",\n    timepickerWrapper: \"touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col fixed\",\n    timepickerContainer: \"flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)] min-[320px]:max-[825px]:landscape:rounded-lg\",\n    timepickerElements: \"flex flex-col min-w-[310px] min-h-[325px] bg-white rounded-t-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape:min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around\",\n    timepickerHead: \"bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg pr-[24px] pl-[50px] py-[10px] min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center\",\n    timepickerHeadContent: \"min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly\",\n    timepickerCurrentWrapper: \"[direction:ltr] rtl:[direction:rtl]\",\n    timepickerCurrentButtonWrapper: \"relative h-full\",\n    timepickerCurrentButton: \"text-[3.75rem] font-light leading-[1.2] tracking-[-0.00833em] text-white opacity-[.54] border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none \",\n    timepickerDot: \"font-light leading-[1.2] tracking-[-0.00833em] text-[3.75rem] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal\",\n    timepickerModeWrapper: \"flex flex-col justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row\",\n    timepickerModeAm: \"p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none\",\n    timepickerModePm: \"p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none\",\n    timepickerClockWrapper: \"min-w-[310px] max-w-[325px] min-h-[305px] overflow-x-hidden h-full flex justify-center flex-col items-center dark:bg-zinc-500\",\n    timepickerClock: \"relative rounded-[100%] w-[260px] h-[260px] cursor-default my-0 mx-auto bg-[#00000012] dark:bg-zinc-600/50\",\n    timepickerMiddleDot: \"top-1/2 left-1/2 w-[6px] h-[6px] -translate-y-1/2 -translate-x-1/2 rounded-[50%] bg-[#3b71ca] absolute\",\n    timepickerHandPointer: \"bg-[#3b71ca] bottom-1/2 h-2/5 left-[calc(50%-1px)] rtl:!left-auto origin-[center_bottom_0] rtl:!origin-[50%_50%_0] w-[2px] absolute\",\n    timepickerPointerCircle: \"-top-[21px] -left-[15px] w-[4px] border-[14px] border-solid border-[#3b71ca] h-[4px] box-content rounded-[100%] absolute\",\n    timepickerClockInner: \"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 w-[160px] h-[160px] rounded-[100%]\",\n    timepickerFooterWrapper: \"rounded-b-lg flex justify-between items-center w-full h-[56px] px-[12px] bg-white dark:bg-zinc-500\",\n    timepickerFooter: \"w-full flex justify-between\",\n    timepickerFooterButton: \"text-[0.8rem] min-w-[64px] box-border font-medium leading-[40px] rounded-[10px] tracking-[0.1rem] uppercase text-[#3b71ca] dark:text-white border-none bg-transparent transition-[background-color,box-shadow,border] duration-[250ms] ease-[cubic-bezier(0.4,0,0.2,1)] delay-[0ms] outline-none py-0 px-[10px] h-[40px] mb-[10px] hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none\",\n    timepickerInlineWrapper: \"touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col rounded-lg\",\n    timepickerInlineContainer: \"flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)]\",\n    timepickerInlineElements: \"flex flex-col min-h-[auto] min-w-[310px] bg-white rounded-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:rounded-bl-lg min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape::min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around\",\n    timepickerInlineHead: \"bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center p-0 rounded-b-lg\",\n    timepickerInlineHeadContent: \"min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly items-center\",\n    timepickerInlineHourWrapper: \"relative h-full !opacity-100\",\n    timepickerCurrentMinuteWrapper: \"relative h-full\",\n    timepickerInlineIconUp: \"absolute text-white -top-[35px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center\",\n    timepickerInlineIconSvg: \"h-4 w-4\",\n    timepickerInlineCurrentButton: \"font-light leading-[1.2] tracking-[-0.00833em] text-white border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal !opacity-100 cursor-pointer focus:bg-[#00000026] hover:outline-none focus:outline-none text-[2.5rem] hover:bg-[unset]\",\n    timepickerInlineIconDown: \"absolute text-white -bottom-[47px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center\",\n    timepickerInlineDot: \"font-light leading-[1.2] tracking-[-0.00833em] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal text-[2.5rem]\",\n    timepickerInlineModeWrapper: \"flex justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row\",\n    timepickerInlineModeAm: \"hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer mr-2 ml-6\",\n    timepickerInlineModePm: \"hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer\",\n    timepickerInlineSubmitButton: \"hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none text-[0.8rem] box-border font-medium leading-[40px] tracking-[.1rem] uppercase border-none bg-transparent [transition:background-color_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,box-shadow_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,border_250ms_cubic-bezier(0.4,0,0.2,1)_0ms] outline-none rounded-[100%] h-[48px] min-w-[48px] inline-block ml-[30px] text-white py-1 px-2 mb-0\",\n    timepickerToggleButton: \"h-4 w-4 ml-auto absolute outline-none border-none bg-transparent right-1.5 top-1/2 -translate-x-1/2 -translate-y-1/2 transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] cursor-pointer hover:text-[#3b71ca] focus:text-[#3b71ca] dark:hover:text-[#3b71ca] dark:focus:text-[#3b71ca] dark:text-white\"\n}, Og = {\n    tips: \"string\",\n    tipsActive: \"string\",\n    tipsDisabled: \"string\",\n    transform: \"string\",\n    modal: \"string\",\n    clockAnimation: \"string\",\n    opacity: \"string\",\n    timepickerWrapper: \"string\",\n    timepickerContainer: \"string\",\n    timepickerElements: \"string\",\n    timepickerHead: \"string\",\n    timepickerHeadContent: \"string\",\n    timepickerCurrentWrapper: \"string\",\n    timepickerCurrentButtonWrapper: \"string\",\n    timepickerCurrentButton: \"string\",\n    timepickerDot: \"string\",\n    timepickerModeWrapper: \"string\",\n    timepickerModeAm: \"string\",\n    timepickerModePm: \"string\",\n    timepickerClockWrapper: \"string\",\n    timepickerClock: \"string\",\n    timepickerMiddleDot: \"string\",\n    timepickerHandPointer: \"string\",\n    timepickerPointerCircle: \"string\",\n    timepickerClockInner: \"string\",\n    timepickerFooterWrapper: \"string\",\n    timepickerFooterButton: \"string\",\n    timepickerInlineWrapper: \"string\",\n    timepickerInlineContainer: \"string\",\n    timepickerInlineElements: \"string\",\n    timepickerInlineHead: \"string\",\n    timepickerInlineHeadContent: \"string\",\n    timepickerInlineHourWrapper: \"string\",\n    timepickerCurrentMinuteWrapper: \"string\",\n    timepickerInlineIconUp: \"string\",\n    timepickerInlineIconSvg: \"string\",\n    timepickerInlineCurrentButton: \"string\",\n    timepickerInlineIconDown: \"string\",\n    timepickerInlineDot: \"string\",\n    timepickerInlineModeWrapper: \"string\",\n    timepickerInlineModeAm: \"string\",\n    timepickerInlineModePm: \"string\",\n    timepickerInlineSubmitButton: \"string\",\n    timepickerToggleButton: \"string\"\n};\nclass Sg {\n    constructor(t, e = {}, i){\n        wt(this, \"_toggleAmPm\", (t)=>{\n            t === \"PM\" ? (this._isPmEnabled = !0, this._isAmEnabled = !1) : t === \"AM\" && (this._isPmEnabled = !1, this._isAmEnabled = !0);\n        });\n        wt(this, \"_toggleBackgroundColorCircle\", (t)=>{\n            if (this._modal.querySelector(`${t}[${H}]`) !== null) {\n                h.addStyle(this._circle, {\n                    backgroundColor: \"#1976d2\"\n                });\n                return;\n            }\n            h.addStyle(this._circle, {\n                backgroundColor: \"transparent\"\n            });\n        });\n        wt(this, \"_toggleClassActive\", (t, { textContent: e }, i)=>{\n            const n = [\n                ...t\n            ].find((o)=>Number(o) === Number(e));\n            return i.forEach((o)=>{\n                if (!o.hasAttribute(jt)) {\n                    if (o.textContent === n) {\n                        h.addClass(o, this._classes.tipsActive), o.setAttribute(H, \"\");\n                        return;\n                    }\n                    h.removeClass(o, this._classes.tipsActive), o.removeAttribute(H);\n                }\n            });\n        });\n        wt(this, \"_makeMinutesDegrees\", (t, e)=>{\n            const { increment: i } = this._options;\n            return t < 0 ? (e = Math.round(360 + t / 6) % 60, t = 360 + Math.round(t / 6) * 6) : (e = Math.round(t / 6) % 60, t = Math.round(t / 6) * 6), i && (t = Math.round(t / 30) * 30, e = Math.round(t / 6) * 6 / 6, e === 60 && (e = \"00\")), t >= 360 && (t = 0), {\n                degrees: t,\n                minute: e,\n                addDegrees: i ? 30 : 6\n            };\n        });\n        wt(this, \"_makeHourDegrees\", (t, e, i)=>{\n            if (t) return this._hasTargetInnerClass(t) ? e < 0 ? (i = Math.round(360 + e / 30) % 24, e = 360 + e) : (i = Math.round(e / 30) + 12, i === 12 && (i = \"00\")) : e < 0 ? (i = Math.round(360 + e / 30) % 12, e = 360 + e) : (i = Math.round(e / 30) % 12, (i === 0 || i > 12) && (i = 12)), e >= 360 && (e = 0), {\n                degrees: e,\n                hour: i,\n                addDegrees: 30\n            };\n        });\n        wt(this, \"_makeInnerHoursDegrees\", (t, e)=>(t < 0 ? (e = Math.round(360 + t / 30) % 24, t = 360 + t) : (e = Math.round(t / 30) + 12, e === 12 && (e = \"00\")), {\n                degrees: t,\n                hour: e,\n                addDegrees: 30\n            }));\n        wt(this, \"_getAppendClock\", (t = [], e = `[${ue}]`, i)=>{\n            let { minTime: n, maxTime: o } = this._options;\n            const { inline: r, format12: a, disablePast: l, disableFuture: p } = this._options;\n            n = Gt(n, l, a), o = qt(o, p, a);\n            const [u, _, f] = R(o, !1), [g, m, b] = R(n, !1);\n            !r && a && this._isInvalidTimeFormat && !this._AM.hasAttribute(H) && (h.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, \"\"));\n            const v = d.findOne(e), T = 360 / t.length;\n            function y(k) {\n                return k * (Math.PI / 180);\n            }\n            if (v === null) return;\n            const C = (v.offsetWidth - 32) / 2, E = (v.offsetHeight - 32) / 2, w = C - 4;\n            setTimeout(()=>{\n                let k;\n                a && (k = d.findOne(`${Es}[${H}]`).textContent), this._handleDisablingTipsMinTime(k, b, m, g), this._handleDisablingTipsMaxTime(k, f, _, u);\n            }, 0), [\n                ...t\n            ].forEach((k, D)=>{\n                const O = y(D * T), x = $(\"span\"), L = $(\"span\");\n                L.innerHTML = k, h.addClass(x, this._classes.tips), x.setAttribute(i, \"\");\n                const S = x.offsetWidth, N = x.offsetHeight;\n                return h.addStyle(x, {\n                    left: `${C + Math.sin(O) * w - S}px`,\n                    bottom: `${E + Math.cos(O) * w - N}px`\n                }), t.includes(\"05\") && x.setAttribute(q, \"\"), t.includes(\"13\") ? L.setAttribute(ys, \"\") : L.setAttribute(As, \"\"), x.appendChild(L), v.appendChild(x);\n            });\n        });\n        this._element = t, this._element && A.setData(t, Js, this), this._document = document, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._currentTime = null, this._toggleButtonId = et(\"timepicker-toggle-\"), this.hoursArray = [\n            \"12\",\n            \"1\",\n            \"2\",\n            \"3\",\n            \"4\",\n            \"5\",\n            \"6\",\n            \"7\",\n            \"8\",\n            \"9\",\n            \"10\",\n            \"11\"\n        ], this.innerHours = [\n            \"00\",\n            \"13\",\n            \"14\",\n            \"15\",\n            \"16\",\n            \"17\",\n            \"18\",\n            \"19\",\n            \"20\",\n            \"21\",\n            \"22\",\n            \"23\"\n        ], this.minutesArray = [\n            \"00\",\n            \"05\",\n            \"10\",\n            \"15\",\n            \"20\",\n            \"25\",\n            \"30\",\n            \"35\",\n            \"40\",\n            \"45\",\n            \"50\",\n            \"55\"\n        ], this.input = d.findOne(\"input\", this._element), this.dataWithIcon = t.dataset.withIcon, this.dataToggle = t.dataset.toggle, this.customIcon = d.findOne(mg, this._element), this._checkToggleButton(), this.inputFormatShow = d.findOne(fg, this._element), this.inputFormat = this.inputFormatShow === null ? \"\" : Object.values(this.inputFormatShow.dataset)[0], this.elementToggle = d.findOne(Ga, this._element), this.toggleElement = Object.values(t.querySelector(Ga).dataset)[0], this._hour = null, this._minutes = null, this._AM = null, this._PM = null, this._wrapper = null, this._modal = null, this._hand = null, this._circle = null, this._focusTrap = null, this._popper = null, this._interval = null, this._timeoutInterval = null, this._inputValue = this._options.defaultTime !== \"\" ? this._options.defaultTime : this.input.value, this._options.format24 && (this._options.format12 = !1, this._currentTime = Ka(this._inputValue)), this._options.format12 && (this._options.format24 = !1, this._currentTime = Ce(this._inputValue)), this._options.readOnly && this.input.setAttribute(Eg, !0), this.inputFormat === \"true\" && this.inputFormat !== \"\" && (this._options.format12 = !1, this._options.format24 = !0, this._currentTime = Ka(this._inputValue)), this._animations = !window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches && this._options.animations, this.init(), this._isHours = !0, this._isMinutes = !1, this._isInvalidTimeFormat = !1, this._isMouseMove = !1, this._isInner = !1, this._isAmEnabled = !1, this._isPmEnabled = !1, this._options.format12 && !this._options.defaultTime && (this._isPmEnabled = !0), this._objWithDataOnChange = {\n            degrees: null\n        }, this._scrollBar = new ti();\n    }\n    // Getters\n    static get NAME() {\n        return Bi;\n    }\n    // Public\n    init() {\n        const { format12: t, format24: e, enableValidation: i } = this._options;\n        let n, o, r;\n        if (this.input.setAttribute(Ag, \"\"), this._currentTime !== void 0) {\n            const { hours: a, minutes: l, amOrPm: p } = this._currentTime;\n            n = Number(a) < 10 ? 0 : \"\", o = `${n}${Number(a)}:${l}`, r = p, t ? this.input.value = `${o} ${r}` : e && (this.input.value = `${o}`);\n        } else n = \"\", o = \"\", r = \"\", this.input.value = \"\";\n        this.input.value.length > 0 && this.input.value !== \"\" && (this.input.setAttribute(H, \"\"), c.trigger(this.input, \"input\")), !(this._options === null && this._element === null) && (i && this._getValidate(\"keydown change blur focus\"), this._handleOpen(), this._listenToToggleKeydown());\n    }\n    dispose() {\n        this._removeModal(), this._element !== null && A.removeData(this._element, Js), setTimeout(()=>{\n            this._element = null, this._options = null, this.input = null, this._focusTrap = null;\n        }, 350), c.off(this._element, \"click\", `[data-te-toggle='${this.toggleElement}']`), c.off(this._element, \"keydown\", `[data-te-toggle='${this.toggleElement}']`);\n    }\n    update(t = {}) {\n        this._options = this._getConfig({\n            ...this._options,\n            ...t\n        });\n    }\n    // private\n    _checkToggleButton() {\n        this.customIcon === null && (this.dataWithIcon !== void 0 && (this._options.withIcon = null, this.dataWithIcon === \"true\" && this._appendToggleButton(this._options)), this._options.withIcon && this._appendToggleButton(this._options));\n    }\n    _appendToggleButton() {\n        const t = ag(this._options, this._toggleButtonId, this._classes);\n        this.input.insertAdjacentHTML(\"afterend\", t);\n    }\n    _getDomElements() {\n        this._hour = d.findOne(`[${Cs}]`), this._minutes = d.findOne(`[${uo}]`), this._AM = d.findOne(pg), this._PM = d.findOne(_g), this._wrapper = d.findOne(`[${ho}]`), this._modal = d.findOne(`[${cl}]`), this._hand = d.findOne(`[${po}]`), this._circle = d.findOne(`[${_o}]`), this._clock = d.findOne(`[${ue}]`), this._clockInner = d.findOne(`[${mi}]`);\n    }\n    _handlerMaxMinHoursOptions(t, e, i, n, o, r) {\n        if (!e && !i) return !0;\n        const { format24: a, format12: l, disablePast: p, disableFuture: u } = this._options, { _isAmEnabled: _, _isPmEnabled: f } = this, g = r.keyCode, m = r.target.hasAttribute(mi) || r.target.hasAttribute(ht) || r.target.hasAttribute(ys);\n        i = Gt(i, p, l), e = qt(e, u, l), typeof e != \"number\" && (e = R(e, !1)[0]);\n        const b = e !== \"\" ? e * 30 : \"\", v = i !== \"\" ? i * 30 : \"\";\n        t < 0 && (t = 360 + t), t = t === 360 ? 0 : t;\n        const T = ()=>{\n            const D = document.querySelectorAll(`[${As}]`), O = document.querySelectorAll(`[${ys}]`), x = ug(this._hour.innerText);\n            let L, S, N;\n            return g === U ? S = 1 : g === z && (S = -1), x === 12 && g === U ? N = 1 : x === 0 && g === U ? N = 13 : x === 0 && g === z ? N = 23 : x === 13 && g === z ? N = 0 : x === 1 && g === z ? N = 12 : N = x + S, D.forEach((P)=>{\n                Number(P.textContent) === N && (L = P);\n            }), O.forEach((P)=>{\n                Number(P.textContent) === N && (L = P);\n            }), !L.parentElement.hasAttribute(jt);\n        }, y = ()=>{\n            const D = i !== \"\" && i > 12 ? (i - 12) * 30 : \"\", O = e !== \"\" && e > 12 ? (e - 12) * 30 : \"\";\n            if (!(D && t < D || O && t > O || e && e < 12)) return !0;\n        };\n        if (a && r.type !== \"keydown\" && m) return y();\n        if (r.type === \"keydown\") return T();\n        const C = !o || o === \"PM\" && f || i !== \"\" && o === \"AM\" && _, E = !n || n === \"PM\" && f || e !== \"\" && n === \"AM\" && _, w = ()=>{\n            const D = v === 360 && l ? 0 : v;\n            if (i) {\n                if (o === \"PM\" && _ || C && t < D) return;\n            } else return !0;\n            return !0;\n        }, k = ()=>{\n            const D = b === 360 && l ? 0 : b;\n            if (e) {\n                if (n === \"AM\" && f || E && t > D) return;\n            } else return !0;\n            return !0;\n        };\n        return w() && k();\n    }\n    _handleKeyboard() {\n        c.on(this._document, vs, \"\", (t)=>{\n            let e, i, n;\n            const { increment: o, maxTime: r, minTime: a, format12: l, disablePast: p, disableFuture: u } = this._options;\n            let _ = R(a, !1)[0], f = R(r, !1)[0];\n            const g = R(a, !1)[2], m = R(r, !1)[2];\n            _ = Gt(_, p, l), f = qt(f, u, l), typeof f != \"number\" && (f = R(f, !1)[0]);\n            const b = d.findOne(`[${q}]`) === null, v = d.findOne(`[${ht}]`) !== null, T = Number(this._hand.style.transform.replace(/[^\\d-]/g, \"\")), y = d.find(`[${q}]`, this._modal), C = d.find(`[${X}]`, this._modal), E = d.find(`[${ht}]`, this._modal);\n            let w = this._makeHourDegrees(t.target, T, e).hour;\n            const { degrees: k, addDegrees: D } = this._makeHourDegrees(t.target, T, e);\n            let { minute: O, degrees: x } = this._makeMinutesDegrees(T, i);\n            const L = this._makeMinutesDegrees(T, i).addDegrees;\n            let { hour: S } = this._makeInnerHoursDegrees(T, n);\n            if (t.keyCode === we) {\n                const N = d.findOne(`[${oo}]`, this._modal);\n                c.trigger(N, \"click\");\n            } else if (b) {\n                if (v && (t.keyCode === ze && (this._isInner = !1, h.addStyle(this._hand, {\n                    height: \"calc(40% + 1px)\"\n                }), this._hour.textContent = this._setHourOrMinute(w > 12 ? 1 : w), this._toggleClassActive(this.hoursArray, this._hour, C), this._toggleClassActive(this.innerHours, this._hour, E)), t.keyCode === Ke && (this._isInner = !0, h.addStyle(this._hand, {\n                    height: \"21.5%\"\n                }), this._hour.textContent = this._setHourOrMinute(S >= 24 || S === \"00\" ? 0 : S), this._toggleClassActive(this.innerHours, this._hour, E), this._toggleClassActive(this.hoursArray, this._hour - 1, C))), t.keyCode === U) {\n                    if (!this._handlerMaxMinHoursOptions(k + 30, f, _, m, g, t)) return;\n                    h.addStyle(this._hand, {\n                        transform: `rotateZ(${k + D}deg)`\n                    }), this._isInner ? (S += 1, S === 24 ? S = 0 : (S === 25 || S === \"001\") && (S = 13), this._hour.textContent = this._setHourOrMinute(S), this._toggleClassActive(this.innerHours, this._hour, E)) : (w += 1, this._hour.textContent = this._setHourOrMinute(w > 12 ? 1 : w), this._toggleClassActive(this.hoursArray, this._hour, C));\n                }\n                if (t.keyCode === z) {\n                    if (!this._handlerMaxMinHoursOptions(k - 30, f, _, m, g, t)) return;\n                    h.addStyle(this._hand, {\n                        transform: `rotateZ(${k - D}deg)`\n                    }), this._isInner ? (S -= 1, S === 12 ? S = 0 : S === -1 && (S = 23), this._hour.textContent = this._setHourOrMinute(S), this._toggleClassActive(this.innerHours, this._hour, E)) : (w -= 1, this._hour.textContent = this._setHourOrMinute(w === 0 ? 12 : w), this._toggleClassActive(this.hoursArray, this._hour, C));\n                }\n            } else t.keyCode === U && (x += L, h.addStyle(this._hand, {\n                transform: `rotateZ(${x}deg)`\n            }), O += 1, o && (O += 4, O === \"0014\" && (O = 5)), this._minutes.textContent = this._setHourOrMinute(O > 59 ? 0 : O), this._toggleClassActive(this.minutesArray, this._minutes, y), this._toggleBackgroundColorCircle(`[${q}]`)), t.keyCode === z && (x -= L, h.addStyle(this._hand, {\n                transform: `rotateZ(${x}deg)`\n            }), o ? O -= 5 : O -= 1, O === -1 ? O = 59 : O === -5 && (O = 55), this._minutes.textContent = this._setHourOrMinute(O), this._toggleClassActive(this.minutesArray, this._minutes, y), this._toggleBackgroundColorCircle(`[${q}]`));\n        });\n    }\n    _setActiveClassToTipsOnOpen(t, ...e) {\n        if (!this._isInvalidTimeFormat) if (this._options.format24) {\n            const i = d.find(`[${X}]`, this._modal), n = d.find(`[${ht}]`, this._modal);\n            this._addActiveClassToTip(i, t), this._addActiveClassToTip(n, t);\n        } else {\n            [\n                ...e\n            ].filter((n)=>(n.toLowerCase() === \"pm\" ? (h.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, \"\")) : n.toLowerCase() === \"am\" ? (h.addClass(this._AM, this._classes.opacity), this._AM.setAttribute(H, \"\")) : (h.removeClass(this._AM, this._classes.opacity), h.removeClass(this._PM, this._classes.opacity), this._AM.removeAttribute(H), this._PM.removeAttribute(H)), n));\n            const i = d.find(`[${X}]`, this._modal);\n            this._addActiveClassToTip(i, t);\n        }\n    }\n    _setTipsAndTimesDependOnInputValue(t, e) {\n        const { inline: i, format12: n } = this._options;\n        if (this._isInvalidTimeFormat) this._hour.textContent = \"12\", this._minutes.textContent = \"00\", i || h.addStyle(this._hand, {\n            transform: \"rotateZ(0deg)\"\n        }), n && (h.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, \"\"));\n        else {\n            const o = t > 12 ? t * 30 - 360 : t * 30;\n            this._hour.textContent = t, this._minutes.textContent = e, i || (h.addStyle(this._hand, {\n                transform: `rotateZ(${o}deg)`\n            }), h.addStyle(this._circle, {\n                backgroundColor: \"#1976d2\"\n            }), (Number(t) > 12 || t === \"00\") && h.addStyle(this._hand, {\n                height: \"21.5%\"\n            }));\n        }\n    }\n    _listenToToggleKeydown() {\n        c.on(this._element, \"keydown\", `[data-te-toggle='${this.toggleElement}']`, (t)=>{\n            t.keyCode === it && (t.preventDefault(), c.trigger(this.elementToggle, \"click\"));\n        });\n    }\n    _handleOpen() {\n        const t = this._getContainer();\n        K.on(this._element, \"click\", `[data-te-toggle='${this.toggleElement}']`, (e)=>{\n            if (this._options === null) return;\n            const i = h.getDataAttribute(this.input, \"toggle\") !== null ? 200 : 0;\n            setTimeout(()=>{\n                h.addStyle(this.elementToggle, {\n                    pointerEvents: \"none\"\n                }), this.elementToggle.blur();\n                let n;\n                R(this.input)[0] === \"\" ? n = [\n                    \"12\",\n                    \"00\",\n                    \"PM\"\n                ] : n = R(this.input);\n                const { modalID: o, inline: r, format12: a } = this._options, [l, p, u] = n, _ = $(\"div\");\n                if ((Number(l) > 12 || l === \"00\") && (this._isInner = !0), this.input.blur(), e.target.blur(), _.innerHTML = rg(this._options, this._classes), h.addClass(_, this._classes.modal), _.setAttribute(cl, \"\"), _.setAttribute(\"role\", \"dialog\"), _.setAttribute(\"tabIndex\", \"-1\"), _.setAttribute(\"id\", o), r ? (this._popper = se(this.input, _, {\n                    placement: \"bottom-start\"\n                }), t.appendChild(_)) : (t.appendChild(_), this._scrollBar.hide()), this._getDomElements(), this._animations ? this._toggleBackdropAnimation() : h.addClass(this._wrapper, this._classes.opacity), this._setActiveClassToTipsOnOpen(l, p, u), this._appendTimes(), this._setActiveClassToTipsOnOpen(l, p, u), this._setTipsAndTimesDependOnInputValue(l, p), this.input.value === \"\") {\n                    const f = d.find(`[${X}]`, this._modal);\n                    a && (h.addClass(this._PM, this._classes.opacity), this._PM.setAttribute(H, \"\")), this._hour.textContent = \"12\", this._minutes.textContent = \"00\", this._addActiveClassToTip(f, Number(this._hour.textContent));\n                }\n                if (this._handleSwitchTimeMode(), this._handleOkButton(), this._handleClose(), r) this._handleHoverInlineBtn(), this._handleDocumentClickInline(), this._handleInlineClicks();\n                else {\n                    this._handleSwitchHourMinute(), this._handleClockClick(), this._handleKeyboard();\n                    const f = document.querySelector(`${Ts}[${H}]`);\n                    h.addClass(f, this._classes.opacity), h.addStyle(this._hour, {\n                        pointerEvents: \"none\"\n                    }), h.addStyle(this._minutes, {\n                        pointerEvents: \"\"\n                    });\n                }\n                this._focusTrap = new zi(this._wrapper, {\n                    event: \"keydown\",\n                    condition: ({ key: f })=>f === \"Tab\"\n                }), this._focusTrap.trap();\n            }, i);\n        });\n    }\n    _handleInlineClicks() {\n        let t, e;\n        const i = (g)=>{\n            let m = g;\n            return m > 59 ? m = 0 : m < 0 && (m = 59), m;\n        }, n = (g)=>{\n            let m = g;\n            return this._options.format24 ? (m > 24 ? m = 1 : m < 0 && (m = 23), m > 23 && (m = 0)) : (m > 12 ? m = 1 : m < 1 && (m = 12), m > 12 && (m = 1)), m;\n        }, o = (g)=>{\n            const m = n(g);\n            this._hour.textContent = this._setHourOrMinute(m);\n        }, r = (g)=>{\n            const m = i(g);\n            this._minutes.textContent = this._setHourOrMinute(m);\n        }, a = ()=>{\n            t = n(t) + 1, o(t);\n        }, l = ()=>{\n            e = i(e) + 1, r(e);\n        }, p = ()=>{\n            t = n(t) - 1, o(t);\n        }, u = ()=>{\n            e = i(e) - 1, r(e);\n        }, _ = ()=>{\n            clearInterval(this._interval), clearTimeout(this._timeoutInterval);\n        }, f = (g)=>{\n            _(), this._timeoutInterval = setTimeout(()=>{\n                this._interval = setInterval(g, 100);\n            }, 500);\n        };\n        K.on(this._modal, \"click mousedown mouseup touchstart touchend contextmenu\", `[${ao}], [${lo}]`, (g)=>{\n            t = Number(this._hour.textContent), e = Number(this._minutes.textContent);\n            const { target: m, type: b } = g, v = b === \"mousedown\" || b === \"touchstart\";\n            m.closest(`[${ao}]`) ? m.closest(`[${ao}]`).parentNode.hasAttribute(rl) ? v ? f(a) : b === \"mouseup\" || b === \"touchend\" || b === \"contextmenu\" ? _() : a() : v ? f(l) : b === \"mouseup\" || b === \"touchend\" || b === \"contextmenu\" ? _() : l() : m.closest(`[${lo}]`) && (m.closest(`[${lo}]`).parentNode.hasAttribute(rl) ? v ? f(p) : b === \"mouseup\" || b === \"touchend\" ? _() : p() : v ? f(u) : b === \"mouseup\" || b === \"touchend\" ? _() : u());\n        }), c.on(window, vs, (g)=>{\n            const m = g.code, b = document.activeElement.hasAttribute(Cs), v = document.activeElement.hasAttribute(uo), T = document.activeElement === document.body;\n            switch(t = Number(this._hour.textContent), e = Number(this._minutes.textContent), m){\n                case \"ArrowUp\":\n                    g.preventDefault(), T || b ? (this._hour.focus(), a()) : v && l();\n                    break;\n                case \"ArrowDown\":\n                    g.preventDefault(), T || b ? (this._hour.focus(), p()) : v && u();\n                    break;\n            }\n        });\n    }\n    _handleClose() {\n        c.on(this._modal, \"click\", `[${ho}], [${oo}], [${ol}]`, ({ target: t })=>{\n            const { closeModalOnBackdropClick: e } = this._options, i = ()=>{\n                var n;\n                h.addStyle(this.elementToggle, {\n                    pointerEvents: \"auto\"\n                }), this._animations && this._toggleBackdropAnimation(!0), this._removeModal(), (n = this._focusTrap) == null || n.disable(), this._focusTrap = null, this.elementToggle ? this.elementToggle.focus() : this.input && this.input.focus();\n            };\n            if (t.hasAttribute(ol)) {\n                this._toggleAmPm(\"PM\"), this.input.value = \"\", this.input.removeAttribute(H);\n                let n;\n                R(this.input)[0] === \"\" ? n = [\n                    \"12\",\n                    \"00\",\n                    \"PM\"\n                ] : n = R(this.input);\n                const [o, r, a] = n;\n                this._setTipsAndTimesDependOnInputValue(\"12\", \"00\"), this._setActiveClassToTipsOnOpen(o, r, a), this._hour.click();\n            } else (t.hasAttribute(oo) || t.hasAttribute(ro) || t.hasAttribute(ho) && e) && i();\n        });\n    }\n    showValueInput() {\n        return this.input.value;\n    }\n    _handleOkButton() {\n        K.on(this._modal, \"click\", `[${ro}]`, ()=>{\n            let { maxTime: t, minTime: e } = this._options;\n            const { format12: i, format24: n, readOnly: o, focusInputAfterApprove: r, disablePast: a, disableFuture: l } = this._options, p = this._document.querySelector(`${Es}[${H}]`), u = `${this._hour.textContent}:${this._minutes.textContent}`, _ = Number(this._hour.textContent), f = _ === 12 && i ? 0 : _, g = Number(this._minutes.textContent);\n            e = Gt(e, a, i), t = qt(t, l, i);\n            let [m, b, v] = R(t, !1), [T, y, C] = R(e, !1);\n            T = T === \"12\" && i ? \"00\" : T, m = m === \"12\" && i ? \"00\" : m;\n            const E = f < Number(T), w = f > Number(m);\n            let k = !0;\n            p && (k = v === p.textContent);\n            let D = !0;\n            p && (D = C === p.textContent);\n            const O = g > b && f === Number(m), x = g < y && f === Number(T);\n            if (this.input.setAttribute(H, \"\"), h.addStyle(this.elementToggle, {\n                pointerEvents: \"auto\"\n            }), t !== \"\") {\n                if (k && (w || O)) return;\n                if (v === \"AM\" && p.textContent === \"PM\") return;\n            }\n            e !== \"\" && (D && (E || x) || C === \"PM\" && p.textContent === \"AM\") || cg(this._options, this.input, this._hour.textContent) !== void 0 && (this._isInvalidTimeFormat && this.input.removeAttribute(co), !o && r && this.input.focus(), h.addStyle(this.elementToggle, {\n                pointerEvents: \"auto\"\n            }), n ? this.input.value = u : p === null ? this.input.value = `${u} PM` : this.input.value = `${u} ${p.textContent}`, this._animations && this._toggleBackdropAnimation(!0), this._removeModal(), c.trigger(this.input, \"input.te.timepicker\"), c.trigger(this.input, \"input\"));\n        });\n    }\n    _handleHoverInlineBtn() {\n        K.on(this._modal, \"mouseover mouseleave\", `[${Tg}]`, ({ type: t, target: e })=>{\n            const i = d.find(`[${bg}]`, this._modal), n = d.find(`[${vg}]`, this._modal), o = (l, p)=>l.forEach((u)=>{\n                    if (p) {\n                        h.addClass(u, this._classes.opacity), u.setAttribute(H, \"\");\n                        return;\n                    }\n                    h.removeClass(u, this._classes.opacity), u.removeAttribute(H);\n                }), a = e.hasAttribute(Cs) ? i : n;\n            o(a, t === \"mouseover\");\n        });\n    }\n    _handleDocumentClickInline() {\n        c.on(document, qa, ({ target: t })=>{\n            if (this._modal && !this._modal.contains(t) && !t.hasAttribute(gg)) {\n                if (clearInterval(this._interval), h.addStyle(this.elementToggle, {\n                    pointerEvents: \"auto\"\n                }), this._removeModal(), !this._animations) return;\n                this._toggleBackdropAnimation(!0);\n            }\n        });\n    }\n    _handleSwitchHourMinute() {\n        lg(\"click\", Ts, this._classes), c.on(this._modal, \"click\", Ts, ()=>{\n            const { format24: t } = this._options, e = d.find(Ts, this._modal), i = d.find(`[${q}]`, this._modal), n = d.find(`[${X}]`, this._modal), o = d.find(`[${ht}]`, this._modal), r = Number(this._hour.textContent), a = Number(this._minutes.textContent), l = (p, u)=>{\n                n.forEach((f)=>f.remove()), i.forEach((f)=>f.remove()), h.addClass(this._hand, this._classes.transform), setTimeout(()=>{\n                    h.removeClass(this._hand, this._classes.transform);\n                }, 401), this._getAppendClock(p, `[${ue}]`, u);\n                const _ = ()=>{\n                    const f = d.find(`[${X}]`, this._modal), g = d.find(`[${q}]`, this._modal);\n                    this._addActiveClassToTip(f, r), this._addActiveClassToTip(g, a);\n                };\n                if (!t) setTimeout(()=>{\n                    _();\n                }, 401);\n                else {\n                    const f = d.find(`[${ht}]`, this._modal);\n                    setTimeout(()=>{\n                        this._addActiveClassToTip(f, r), _();\n                    }, 401);\n                }\n            };\n            e.forEach((p)=>{\n                p.hasAttribute(H) && (p.hasAttribute(uo) ? (h.addClass(this._hand, this._classes.transform), h.addStyle(this._hand, {\n                    transform: `rotateZ(${this._minutes.textContent * 6}deg)`,\n                    height: \"calc(40% + 1px)\"\n                }), t && o.length > 0 && o.forEach((u)=>u.remove()), l(this.minutesArray, q), this._hour.style.pointerEvents = \"\", this._minutes.style.pointerEvents = \"none\") : p.hasAttribute(Cs) && (h.addStyle(this._hand, {\n                    transform: `rotateZ(${this._hour.textContent * 30}deg)`\n                }), Number(this._hour.textContent) > 12 ? (h.addStyle(this._hand, {\n                    transform: `rotateZ(${this._hour.textContent * 30 - 360}deg)`,\n                    height: \"21.5%\"\n                }), Number(this._hour.textContent) > 12 && h.addStyle(this._hand, {\n                    height: \"21.5%\"\n                })) : h.addStyle(this._hand, {\n                    height: \"calc(40% + 1px)\"\n                }), t && this._getAppendClock(this.innerHours, `[${mi}]`, ht), o.length > 0 && o.forEach((u)=>u.remove()), l(this.hoursArray, X), h.addStyle(this._hour, {\n                    pointerEvents: \"none\"\n                }), h.addStyle(this._minutes, {\n                    pointerEvents: \"\"\n                })));\n            });\n        });\n    }\n    _handleDisablingTipsMaxTime(t, e, i, n) {\n        if (!this._options.maxTime && !this._options.disableFuture) return;\n        const o = d.find(`[${X}]`), r = d.find(`[${ht}]`), a = d.find(`[${q}]`);\n        if (!e || e === t) {\n            Ua(r, n, this._classes, this._options.format12), Ua(o, n, this._classes, this._options.format12), hg(a, i, n, this._hour.textContent, this._classes, this._options.format12);\n            return;\n        }\n        e === \"AM\" && t === \"PM\" && (o.forEach((l)=>{\n            h.addClass(l, this._classes.tipsDisabled), l.setAttribute(jt, \"\");\n        }), a.forEach((l)=>{\n            h.addClass(l, this._classes.tipsDisabled), l.setAttribute(jt, \"\");\n        }));\n    }\n    _handleDisablingTipsMinTime(t, e, i, n) {\n        if (!this._options.minTime && !this._options.disablePast) return;\n        const o = d.find(`[${X}]`), r = d.find(`[${ht}]`), a = d.find(`[${q}]`);\n        !e || e === t ? (Xa(o, n, this._classes, this._options.format12), Xa(r, n, this._classes, this._options.format12), dg(a, i, n, this._hour.textContent, this._classes, this._options.format12)) : e === \"PM\" && t === \"AM\" && (o.forEach((l)=>{\n            h.addClass(l, this._classes.tipsDisabled), l.setAttribute(jt, \"\");\n        }), a.forEach((l)=>{\n            h.addClass(l, this._classes.tipsDisabled), l.setAttribute(jt, \"\");\n        }));\n    }\n    _handleSwitchTimeMode() {\n        c.on(document, \"click\", Es, ({ target: t })=>{\n            let { maxTime: e, minTime: i } = this._options;\n            const { disablePast: n, disableFuture: o, format12: r } = this._options;\n            i = Gt(i, n, r), e = qt(e, o, r);\n            const [a, l, p] = R(e, !1), [u, _, f] = R(i, !1), g = d.find(`[${X}]`), m = d.find(`[${q}]`);\n            (()=>{\n                g.forEach((v)=>{\n                    h.removeClass(v, this._classes.tipsDisabled), v.removeAttribute(jt);\n                }), m.forEach((v)=>{\n                    h.removeClass(v, this._classes.tipsDisabled), v.removeAttribute(jt);\n                });\n            })(), this._handleDisablingTipsMinTime(t.textContent, f, _, u), this._handleDisablingTipsMaxTime(t.textContent, p, l, a), this._toggleAmPm(t.textContent), t.hasAttribute(H) || (d.find(Es).forEach((T)=>{\n                T.hasAttribute(H) && (h.removeClass(T, this._classes.opacity), T.removeAttribute(H));\n            }), h.addClass(t, this._classes.opacity), t.setAttribute(H, \"\"));\n        });\n    }\n    _handleClockClick() {\n        let { maxTime: t, minTime: e } = this._options;\n        const { disablePast: i, disableFuture: n, format12: o } = this._options;\n        e = Gt(e, i, o), t = qt(t, n, o);\n        const r = R(t, !1)[2], a = R(e, !1)[2], l = R(t, !1)[0], p = R(e, !1)[0], u = d.findOne(`[${al}]`);\n        K.on(document, `${Za} ${Qa} ${Ja} ${tl} ${el} ${nl} ${il} ${sl}`, \"\", (_)=>{\n            bs() || _.preventDefault();\n            const { type: f, target: g } = _, { closeModalOnMinutesClick: m, switchHoursToMinutesOnClick: b } = this._options, v = d.findOne(`[${q}]`, this._modal) !== null, T = d.findOne(`[${X}]`, this._modal) !== null, y = d.findOne(`[${ht}]`, this._modal) !== null, C = d.find(`[${q}]`, this._modal), E = za(_, u), w = u.offsetWidth / 2;\n            let k = Math.atan2(E.y - w, E.x - w);\n            if (bs()) {\n                const L = za(_, u, !0);\n                k = Math.atan2(L.y - w, L.x - w);\n            }\n            let D = null, O = null, x = null;\n            if (f === \"mousedown\" || f === \"mousemove\" || f === \"touchmove\" || f === \"touchstart\") (f === \"mousedown\" || f === \"touchstart\" || f === \"touchmove\") && (this._hasTargetInnerClass(g) || g.hasAttribute(al) || g.hasAttribute(ue) || g.hasAttribute(q) || g.hasAttribute(X) || g.hasAttribute(_o) || g.hasAttribute(po) || g.hasAttribute(ll) || g.hasAttribute(As)) && (this._isMouseMove = !0, bs() && _.touches && (D = _.touches[0].clientX, O = _.touches[0].clientY, x = document.elementFromPoint(D, O)));\n            else if (f === \"mouseup\" || f === \"touchend\") {\n                if (this._isMouseMove = !1, this._hasTargetInnerClass(g) || g.hasAttribute(ue) || g.hasAttribute(X) || g.hasAttribute(_o) || g.hasAttribute(po) || g.hasAttribute(ll) || g.hasAttribute(As)) {\n                    if ((T || y) && b) {\n                        const L = Number(this._hour.textContent) > l || Number(this._hour.textContent) < p;\n                        if (this._options.format24 && l !== \"\" && p !== \"\" && L) return;\n                        if (this._options.format24 && p !== \"\" && Number(this._hour.textContent) < p) return;\n                    }\n                    c.trigger(this._minutes, \"click\");\n                }\n                if (v && m) {\n                    const L = d.findOne(`[${ro}]`, this._modal);\n                    c.trigger(L, \"click\");\n                }\n            }\n            if (v) {\n                let L;\n                const S = Math.trunc(k * 180 / Math.PI) + 90, { degrees: N, minute: P } = this._makeMinutesDegrees(S, L);\n                if (this._handlerMaxMinMinutesOptions(N, P) === void 0) return;\n                const { degrees: ot, minute: rt } = this._handlerMaxMinMinutesOptions(N, P);\n                if (this._isMouseMove) {\n                    if (h.addStyle(this._hand, {\n                        transform: `rotateZ(${ot}deg)`\n                    }), rt === void 0) return;\n                    const G = ()=>rt >= 10 || rt === \"00\" ? rt : `0${rt}`;\n                    this._minutes.textContent = G(), this._toggleClassActive(this.minutesArray, this._minutes, C), this._toggleBackgroundColorCircle(`[${q}]`), this._objWithDataOnChange.degreesMinutes = ot, this._objWithDataOnChange.minutes = rt;\n                }\n            }\n            if (T || y) {\n                let L, S = Math.trunc(k * 180 / Math.PI) + 90;\n                if (S = Math.round(S / 30) * 30, h.addStyle(this._circle, {\n                    backgroundColor: \"#1976d2\"\n                }), this._makeHourDegrees(g, S, L) === void 0) return;\n                const N = ()=>{\n                    if (bs() && S && x) {\n                        const { degrees: P, hour: ot } = this._makeHourDegrees(x, S, L);\n                        return this._handleMoveHand(x, ot, P);\n                    } else {\n                        const { degrees: P, hour: ot } = this._makeHourDegrees(g, S, L);\n                        return this._handleMoveHand(g, ot, P);\n                    }\n                };\n                this._objWithDataOnChange.degreesHours = S, this._handlerMaxMinHoursOptions(S, l, p, r, a, _) && N();\n            }\n            _.stopPropagation();\n        });\n    }\n    _hasTargetInnerClass(t) {\n        return t.hasAttribute(mi) || t.hasAttribute(ht) || t.hasAttribute(ys);\n    }\n    _handleMoveHand(t, e, i) {\n        const n = d.find(`[${X}]`, this._modal), o = d.find(`[${ht}]`, this._modal);\n        this._isMouseMove && (this._hasTargetInnerClass(t) ? h.addStyle(this._hand, {\n            height: \"21.5%\"\n        }) : h.addStyle(this._hand, {\n            height: \"calc(40% + 1px)\"\n        }), h.addStyle(this._hand, {\n            transform: `rotateZ(${i}deg)`\n        }), this._hour.textContent = e >= 10 || e === \"00\" ? e : `0${e}`, this._toggleClassActive(this.hoursArray, this._hour, n), this._toggleClassActive(this.innerHours, this._hour, o), this._objWithDataOnChange.hour = e >= 10 || e === \"00\" ? e : `0${e}`);\n    }\n    _handlerMaxMinMinutesOptions(t, e) {\n        let { maxTime: i, minTime: n } = this._options;\n        const { format12: o, increment: r, disablePast: a, disableFuture: l } = this._options;\n        n = Gt(n, a, o), i = qt(i, l, o);\n        const p = R(i, !1)[1], u = R(n, !1)[1], _ = R(i, !1)[0], f = R(n, !1)[0], g = f === \"12\" && o ? \"0\" : f, m = _ === \"12\" && o ? \"0\" : _, b = R(i, !1)[2], v = R(n, !1)[2], T = p !== \"\" ? p * 6 : \"\", y = u !== \"\" ? u * 6 : \"\", C = Number(this._hour.textContent), E = C === 12 && o ? 0 : C;\n        if (!b && !v) {\n            if (i !== \"\" && n !== \"\") {\n                if (Number(m) === E && t > T || Number(g) === E && t < y) return t;\n            } else if (n !== \"\" && E <= Number(g)) {\n                if (t <= y - 6) return t;\n            } else if (i !== \"\" && E >= Number(m) && t >= T + 6) return t;\n        } else {\n            if (n !== \"\") {\n                if (v === \"PM\" && this._isAmEnabled) return;\n                if (v === \"PM\" && this._isPmEnabled) {\n                    if (E < Number(g)) return;\n                    if (E <= Number(g) && t <= y - 6) return t;\n                } else if (v === \"AM\" && this._isAmEnabled) {\n                    if (E < Number(g)) return;\n                    if (E <= Number(g) && t <= y - 6) return t;\n                }\n            }\n            if (i !== \"\") {\n                if (b === \"AM\" && this._isPmEnabled) return;\n                if (b === \"PM\" && this._isPmEnabled) {\n                    if (E >= Number(m) && t >= T + 6) return t;\n                } else if (b === \"AM\" && this._isAmEnabled && E >= Number(m) && t >= T + 6) return t;\n            }\n        }\n        return r && (t = Math.round(t / 30) * 30), t < 0 ? t = 360 + t : t >= 360 && (t = 0), {\n            degrees: t,\n            minute: e\n        };\n    }\n    _removeModal() {\n        this._animations ? setTimeout(()=>{\n            this._removeModalElements(), this._scrollBar.reset();\n        }, 300) : (this._removeModalElements(), this._scrollBar.reset()), K.off(this._document, `${qa} ${vs} ${Za} ${Qa} ${Ja} ${tl} ${el} ${nl} ${il} ${sl}`), c.off(window, vs);\n    }\n    _removeModalElements() {\n        this._modal && this._modal.remove();\n    }\n    _toggleBackdropAnimation(t = !1) {\n        t ? this._wrapper.classList.add(\"animate-[fade-out_350ms_ease-in-out]\") : (this._wrapper.classList.add(\"animate-[fade-in_350ms_ease-in-out]\"), this._options.inline || h.addClass(this._clock, this._classes.clockAnimation)), setTimeout(()=>{\n            this._wrapper.classList.remove(\"animate-[fade-out_350ms_ease-in-out]\", \"animate-[fade-in_350ms_ease-in-out]\");\n        }, 351);\n    }\n    _addActiveClassToTip(t, e) {\n        t.forEach((i)=>{\n            Number(i.textContent) === Number(e) && (h.addClass(i, this._classes.tipsActive), i.setAttribute(H, \"\"));\n        });\n    }\n    _setHourOrMinute(t) {\n        return t < 10 ? `0${t}` : t;\n    }\n    _appendTimes() {\n        const { format24: t } = this._options;\n        if (t) {\n            this._getAppendClock(this.hoursArray, `[${ue}]`, X), this._getAppendClock(this.innerHours, `[${mi}]`, ht);\n            return;\n        }\n        this._getAppendClock(this.hoursArray, `[${ue}]`, X);\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...wg,\n            ...e,\n            ...t\n        }, I(Bi, t, kg), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...xg,\n            ...e,\n            ...t\n        }, I(Bi, t, Og), t;\n    }\n    _getContainer() {\n        return d.findOne(this._options.container);\n    }\n    _getValidate(t) {\n        const { format24: e, format12: i, appendValidationInfo: n } = this._options;\n        K.on(this.input, t, ({ target: o })=>{\n            if (this._options === null || this.input.value === \"\") return;\n            const r = /^(0?[1-9]|1[012])(:[0-5]\\d) [APap][mM]$/, a = /^([01]\\d|2[0-3])(:[0-5]\\d)$/, l = r.test(o.value);\n            if (a.test(o.value) !== !0 && e || l !== !0 && i) {\n                n && this.input.setAttribute(co, \"\"), h.addStyle(o, {\n                    marginBottom: 0\n                }), this._isInvalidTimeFormat = !0;\n                return;\n            }\n            this.input.removeAttribute(co), this._isInvalidTimeFormat = !1;\n            const u = d.findOne(`[${Cg}]`);\n            u !== null && u.remove();\n        });\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, Js);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Ig = {\n    threshold: 10,\n    direction: \"all\"\n};\nlet Dg = class {\n    constructor(t, e){\n        this._element = t, this._startPosition = null, this._options = {\n            ...Ig,\n            ...e\n        };\n    }\n    handleTouchStart(t) {\n        this._startPosition = this._getCoordinates(t);\n    }\n    handleTouchMove(t) {\n        if (!this._startPosition) return;\n        const e = this._getCoordinates(t), i = {\n            x: e.x - this._startPosition.x,\n            y: e.y - this._startPosition.y\n        }, n = this._getDirection(i);\n        if (this._options.direction === \"all\") {\n            if (n.y.value < this._options.threshold && n.x.value < this._options.threshold) return;\n            const r = n.y.value > n.x.value ? n.y.direction : n.x.direction;\n            c.trigger(this._element, `swipe${r}`), c.trigger(this._element, \"swipe\", {\n                direction: r\n            }), this._startPosition = null;\n            return;\n        }\n        const o = this._options.direction === \"left\" || this._options === \"right\" ? \"x\" : \"y\";\n        n[o].direction === this._options.direction && n[o].value > this._options.threshold && (c.trigger(this._element, `swipe${n[o].direction}`), this._startPosition = null);\n    }\n    handleTouchEnd() {\n        this._startPosition = null;\n    }\n    _getCoordinates(t) {\n        const [e] = t.touches;\n        return {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n    _getDirection(t) {\n        return {\n            x: {\n                direction: t.x < 0 ? \"left\" : \"right\",\n                value: Math.abs(t.x)\n            },\n            y: {\n                direction: t.y < 0 ? \"up\" : \"down\",\n                value: Math.abs(t.y)\n            }\n        };\n    }\n}, $g = class {\n    constructor(t, e = \"swipe\", i = {}){\n        this._element = t, this._event = e, this.swipe = new Dg(t, i), this._touchStartHandler = this._handleTouchStart.bind(this), this._touchMoveHandler = this._handleTouchMove.bind(this), this._touchEndHandler = this._handleTouchEnd.bind(this);\n    }\n    dispose() {\n        this._element.removeEventListener(\"touchstart\", this._touchStartHandler), this._element.removeEventListener(\"touchmove\", this._touchMoveHandler), window.removeEventListener(\"touchend\", this._touchEndHandler);\n    }\n    init() {\n        this._element.addEventListener(\"touchstart\", (t)=>this._handleTouchStart(t)), this._element.addEventListener(\"touchmove\", (t)=>this._handleTouchMove(t)), window.addEventListener(\"touchend\", (t)=>this._handleTouchEnd(t));\n    }\n    _handleTouchStart(t) {\n        this[this._event].handleTouchStart(t);\n    }\n    _handleTouchMove(t) {\n        this[this._event].handleTouchMove(t);\n    }\n    _handleTouchEnd(t) {\n        this[this._event].handleTouchEnd(t);\n    }\n};\nconst hl = \"sidenav\", ws = \"te.sidenav\", Lg = \"data-te-sidenav-rotate-icon-ref\", fo = \"[data-te-sidenav-toggle-ref]\", Ng = \"[data-te-collapse-init]\", Mg = '[data-te-sidenav-slim=\"true\"]', Rg = '[data-te-sidenav-slim=\"false\"]', Pg = \"[data-te-sidenav-menu-ref]\", Le = \"[data-te-sidenav-collapse-ref]\", gi = \"[data-te-sidenav-link-ref]\", Bg = W() ? 100 : -100, Hg = W() ? -100 : 100, Vg = {\n    sidenavAccordion: \"(boolean)\",\n    sidenavBackdrop: \"(boolean)\",\n    sidenavBackdropClass: \"(null|string)\",\n    sidenavCloseOnEsc: \"(boolean)\",\n    sidenavColor: \"(string)\",\n    sidenavContent: \"(null|string)\",\n    sidenavExpandable: \"(boolean)\",\n    sidenavExpandOnHover: \"(boolean)\",\n    sidenavFocusTrap: \"(boolean)\",\n    sidenavHidden: \"(boolean)\",\n    sidenavMode: \"(string)\",\n    sidenavModeBreakpointOver: \"(null|string|number)\",\n    sidenavModeBreakpointSide: \"(null|string|number)\",\n    sidenavModeBreakpointPush: \"(null|string|number)\",\n    sidenavBreakpointSm: \"(number)\",\n    sidenavBreakpointMd: \"(number)\",\n    sidenavBreakpointLg: \"(number)\",\n    sidenavBreakpointXl: \"(number)\",\n    sidenavBreakpoint2xl: \"(number)\",\n    sidenavScrollContainer: \"(null|string)\",\n    sidenavSlim: \"(boolean)\",\n    sidenavSlimCollapsed: \"(boolean)\",\n    sidenavSlimWidth: \"(number)\",\n    sidenavPosition: \"(string)\",\n    sidenavRight: \"(boolean)\",\n    sidenavTransitionDuration: \"(number)\",\n    sidenavWidth: \"(number)\"\n}, Wg = {\n    sidenavAccordion: !1,\n    sidenavBackdrop: !0,\n    sidenavBackdropClass: null,\n    sidenavCloseOnEsc: !0,\n    sidenavColor: \"primary\",\n    sidenavContent: null,\n    sidenavExpandable: !0,\n    sidenavExpandOnHover: !1,\n    sidenavFocusTrap: !0,\n    sidenavHidden: !0,\n    sidenavMode: \"over\",\n    sidenavModeBreakpointOver: null,\n    sidenavModeBreakpointSide: null,\n    sidenavModeBreakpointPush: null,\n    sidenavBreakpointSm: 640,\n    sidenavBreakpointMd: 768,\n    sidenavBreakpointLg: 1024,\n    sidenavBreakpointXl: 1280,\n    sidenavBreakpoint2xl: 1536,\n    sidenavScrollContainer: null,\n    sidenavSlim: !1,\n    sidenavSlimCollapsed: !1,\n    sidenavSlimWidth: 77,\n    sidenavPosition: \"fixed\",\n    sidenavRight: !1,\n    sidenavTransitionDuration: 300,\n    sidenavWidth: 240\n};\nclass Ci {\n    constructor(t, e = {}){\n        wt(this, \"_addBackdropOnInit\", ()=>{\n            this._options.sidenavHidden || (this._backdrop.show(), c.off(this._element, \"transitionend\", this._addBackdropOnInit));\n        });\n        this._element = t, this._options = e, this._ID = et(\"\"), this._content = null, this._initialContentStyle = null, this._slimCollapsed = !1, this._activeNode = null, this._tempSlim = !1, this._backdrop = this._initializeBackDrop(), this._focusTrap = null, this._perfectScrollbar = null, this._touch = null, this._setModeFromBreakpoints(), this.escHandler = (i)=>{\n            i.keyCode === we && this.toggler && Mt(this.toggler) && (this._update(!1), c.off(window, \"keydown\", this.escHandler));\n        }, this.hashHandler = ()=>{\n            this._setActiveElements();\n        }, t && (A.setData(t, ws, this), this._setup()), this.options.sidenavBackdrop && !this.options.sidenavHidden && this.options.sidenavMode === \"over\" && c.on(this._element, \"transitionend\", this._addBackdropOnInit), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return hl;\n    }\n    get container() {\n        if (this.options.sidenavPosition === \"fixed\") return d.findOne(\"body\");\n        const t = (e)=>!e.parentNode || e.parentNode === document ? e : e.parentNode.style.position === \"relative\" || e.parentNode.classList.contains(\"relative\") ? e.parentNode : t(e.parentNode);\n        return t(this._element);\n    }\n    get isVisible() {\n        let t = 0, e = window.innerWidth;\n        if (this.options.sidenavPosition !== \"fixed\") {\n            const n = this.container.getBoundingClientRect();\n            t = n.x, e = n.x + n.width;\n        }\n        const { x: i } = this._element.getBoundingClientRect();\n        if (this.options.sidenavRight && !W() || !this.options.sidenavRight && W()) {\n            let n = 0;\n            if (this.container.scrollHeight > this.container.clientHeight && (n = this.container.offsetWidth - this.container.clientWidth), this.container.tagName === \"BODY\") {\n                const o = document.documentElement.clientWidth;\n                n = Math.abs(window.innerWidth - o);\n            }\n            return Math.abs(i + n - e) > 10;\n        }\n        return Math.abs(i - t) < 10;\n    }\n    get links() {\n        return d.find(gi, this._element);\n    }\n    get navigation() {\n        return d.find(Pg, this._element);\n    }\n    get options() {\n        const t = {\n            ...Wg,\n            ...h.getDataAttributes(this._element),\n            ...this._options\n        };\n        return I(hl, t, Vg), t;\n    }\n    get sidenavStyle() {\n        return {\n            width: `${this.width}px`,\n            height: this.options.sidenavPosition === \"fixed\" ? \"100vh\" : \"100%\",\n            position: this.options.sidenavPosition,\n            transition: `all ${this.transitionDuration} linear`\n        };\n    }\n    get toggler() {\n        return d.find(fo).find((e)=>{\n            const i = h.getDataAttribute(e, \"target\");\n            return d.findOne(i) === this._element;\n        });\n    }\n    get transitionDuration() {\n        return `${this.options.sidenavTransitionDuration / 1e3}s`;\n    }\n    get translation() {\n        return this.options.sidenavRight ? Hg : Bg;\n    }\n    get width() {\n        return this._slimCollapsed ? this.options.sidenavSlimWidth : this.options.sidenavWidth;\n    }\n    get isBackdropVisible() {\n        return !!this._backdrop._element;\n    }\n    // Public\n    changeMode(t) {\n        this._setMode(t);\n    }\n    dispose() {\n        c.off(window, \"keydown\", this.escHandler), this.options.sidenavBackdrop && this._backdrop.dispose(), c.off(window, \"hashchange\", this.hashHandler), this._touch.dispose(), A.removeData(this._element, ws), this._element = null;\n    }\n    hide() {\n        this._emitEvents(!1), this._update(!1), this._options.sidenavBackdrop && this.isBackdropVisible && this._backdrop.hide();\n    }\n    show() {\n        this._emitEvents(!0), this._update(!0), this._options.sidenavBackdrop && this._options.sidenavMode === \"over\" && this._backdrop.show();\n    }\n    toggle() {\n        this._emitEvents(!this.isVisible), this._update(!this.isVisible);\n    }\n    toggleSlim() {\n        this._setSlim(!this._slimCollapsed);\n    }\n    update(t) {\n        this._options = t, this._setup();\n    }\n    getBreakpoint(t) {\n        return this._transformBreakpointValuesToObject()[t];\n    }\n    // Private\n    _init() {\n        this._didInit || (c.on(document, \"click\", fo, Ci.toggleSidenav()), this._didInit = !0);\n    }\n    _transformBreakpointValuesToObject() {\n        return {\n            sm: this.options.sidenavBreakpointSm,\n            md: this.options.sidenavBreakpointMd,\n            lg: this.options.sidenavBreakpointLg,\n            xl: this.options.sidenavBreakpointXl,\n            \"2xl\": this.options.sidenavBreakpoint2xl\n        };\n    }\n    _setModeFromBreakpoints() {\n        const t = window.innerWidth, e = this._transformBreakpointValuesToObject();\n        if (t === void 0 || !e) return;\n        const i = typeof this.options.sidenavModeBreakpointOver == \"number\" ? t - this.options.sidenavModeBreakpointOver : t - e[this.options.sidenavModeBreakpointOver], n = typeof this.options.sidenavModeBreakpointSide == \"number\" ? t - this.options.sidenavModeBreakpointSide : t - e[this.options.sidenavModeBreakpointSide], o = typeof this.options.sidenavModeBreakpointPush == \"number\" ? t - this.options.sidenavModeBreakpointPush : t - e[this.options.sidenavModeBreakpointPush], r = (l, p)=>l - p < 0 ? -1 : p - l < 0 ? 1 : 0, a = [\n            i,\n            n,\n            o\n        ].filter((l)=>l != null && l >= 0).sort(r)[0];\n        i > 0 && i === a ? (this._options.sidenavMode = \"over\", this._options.sidenavHidden = !0) : n > 0 && n === a ? this._options.sidenavMode = \"side\" : o > 0 && o === a && (this._options.sidenavMode = \"push\");\n    }\n    _collapseItems() {\n        this.navigation.forEach((t)=>{\n            d.find(Le, t).forEach((i)=>{\n                Qt.getInstance(i).hide();\n            });\n        });\n    }\n    _getOffsetValue(t, { index: e, property: i, offsets: n }) {\n        const o = this._getPxValue(this._initialContentStyle[e][n[i].property]), r = t ? n[i].value : 0;\n        return o + r;\n    }\n    _getProperty(...t) {\n        return t.map((e, i)=>i === 0 ? e : e[0].toUpperCase().concat(e.slice(1))).join(\"\");\n    }\n    _getPxValue(t) {\n        return t ? parseFloat(t) : 0;\n    }\n    _handleSwipe(t, e) {\n        e && this._slimCollapsed && this.options.sidenavSlim && this.options.sidenavExpandable ? this.toggleSlim() : e || (this._slimCollapsed || !this.options.sidenavSlim || !this.options.sidenavExpandable ? this.toggler && Mt(this.toggler) && this.toggle() : this.toggleSlim());\n    }\n    _isActive(t, e) {\n        return e ? e === t : t.attributes.href ? new URL(t, window.location.href).href === window.location.href : !1;\n    }\n    _isAllToBeCollapsed() {\n        return d.find(Ng, this._element).filter((i)=>i.getAttribute(\"aria-expanded\") === \"true\").length === 0;\n    }\n    _isAllCollapsed() {\n        return d.find(Le, this._element).filter((t)=>Mt(t)).length === 0;\n    }\n    _initializeBackDrop() {\n        if (!this.options.sidenavBackdrop) return;\n        const t = this.options.sidenavBackdropClass ? this.options.sidenavBackdropClass.split(\" \") : this.options.sidenavPosition ? [\n            \"opacity-50\",\n            \"transition-all\",\n            \"duration-300\",\n            \"ease-in-out\",\n            this.options.sidenavPosition,\n            \"top-0\",\n            \"left-0\",\n            \"z-50\",\n            \"bg-black/10\",\n            \"dark:bg-black-60\",\n            \"w-full\",\n            \"h-full\",\n            this._element.id\n        ] : null;\n        return new Cr({\n            isVisible: this.options.sidenavBackdrop,\n            isAnimated: !0,\n            rootElement: this._element.parentNode,\n            backdropClasses: t,\n            clickCallback: ()=>this.hide()\n        });\n    }\n    _updateBackdrop(t) {\n        if (this.options.sidenavMode === \"over\") {\n            t ? this._backdrop.show() : this.isBackdropVisible && this._backdrop.hide();\n            return;\n        }\n        this.isBackdropVisible && this._backdrop.hide();\n    }\n    _setup() {\n        this._setupTouch(), this.options.sidenavFocusTrap && this._setupFocusTrap(), this._setupCollapse(), this.options.sidenavSlim && this._setupSlim(), this._setupInitialStyling(), this._setupScrolling(), this.options.sidenavContent && this._setupContent(), this._setupActiveState(), this._setupRippleEffect(), this.options.sidenavHidden || this._updateOffsets(!0, !0), this.options.sidenavMode === \"over\" && this._setTabindex(!0);\n    }\n    _setupActiveState() {\n        this._setActiveElements(), this.links.forEach((t)=>{\n            c.on(t, \"click\", ()=>this._setActiveElements(t)), c.on(t, \"keydown\", (e)=>{\n                e.keyCode === it && this._setActiveElements(t);\n            });\n        }), c.on(window, \"hashchange\", this.hashHandler);\n    }\n    _setupCollapse() {\n        this.navigation.forEach((t, e)=>{\n            d.find(Le, t).forEach((n, o)=>this._setupCollapseList({\n                    list: n,\n                    index: o,\n                    menu: t,\n                    menuIndex: e\n                }));\n        });\n    }\n    _generateCollpaseID(t, e) {\n        return `sidenav-collapse-${this._ID}-${e}-${t}`;\n    }\n    _setupCollapseList({ list: t, index: e, menu: i, menuIndex: n }) {\n        const o = this._generateCollpaseID(e, n);\n        t.setAttribute(\"id\", o), t.setAttribute(\"data-te-collapse-item\", \"\");\n        const [r] = d.prev(t, gi);\n        h.setDataAttribute(r, \"collapse-init\", \"\"), r.setAttribute(\"href\", `#${o}`), r.setAttribute(\"role\", \"button\");\n        const a = Qt.getInstance(t) || new Qt(t, {\n            toggle: !1,\n            parent: this.options.sidenavAccordion ? i : t\n        });\n        (t.dataset.teSidenavStateShow === \"\" || t.dataset.teCollapseShow === \"\") && this._rotateArrow(r, !1), c.on(r, \"click\", (l)=>{\n            this._toggleCategory(l, a, t), this._tempSlim && this._isAllToBeCollapsed() && (this._setSlim(!0), this._tempSlim = !1), this.options.sidenavMode === \"over\" && this._focusTrap && this._focusTrap.update();\n        }), c.on(t, \"show.te.collapse\", ()=>this._rotateArrow(r, !1)), c.on(t, \"hide.te.collapse\", ()=>this._rotateArrow(r, !0)), c.on(t, \"shown.te.collapse\", ()=>{\n            this.options.sidenavMode === \"over\" && this._focusTrap && this._focusTrap.update();\n        }), c.on(t, \"hidden.te.collapse\", ()=>{\n            this._tempSlim && this._isAllCollapsed() && (this._setSlim(!0), this._tempSlim = !1), this.options.sidenavMode === \"over\" && this._focusTrap && this._focusTrap.update();\n        });\n    }\n    _setupContent() {\n        this._content = d.find(this.options.sidenavContent), this._content.forEach((t)=>{\n            const e = [\n                \"!p\",\n                \"!m\",\n                \"!px\",\n                \"!pl\",\n                \"!pr\",\n                \"!mx\",\n                \"!ml\",\n                \"!mr\",\n                \"!-p\",\n                \"!-m\",\n                \"!-px\",\n                \"!-pl\",\n                \"!-pr\",\n                \"!-mx\",\n                \"!-ml\",\n                \"!-mr\"\n            ];\n            [\n                ...t.classList\n            ].filter((n)=>e.findIndex((o)=>n.includes(o)) >= 0).forEach((n)=>t.classList.remove(n));\n        }), this._initialContentStyle = this._content.map((t)=>{\n            const { paddingLeft: e, paddingRight: i, marginLeft: n, marginRight: o, transition: r } = window.getComputedStyle(t);\n            return {\n                paddingLeft: e,\n                paddingRight: i,\n                marginLeft: n,\n                marginRight: o,\n                transition: r\n            };\n        });\n    }\n    _setupFocusTrap() {\n        this._focusTrap = new zi(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.keyCode === ke,\n            onlyVisible: !0\n        }, this.toggler);\n    }\n    _setupInitialStyling() {\n        this._setColor(), h.style(this._element, this.sidenavStyle);\n    }\n    _setupScrolling() {\n        let t = this._element;\n        if (this.options.sidenavScrollContainer) {\n            t = d.findOne(this.options.sidenavScrollContainer, this._element);\n            const i = fd(t.parentNode.children).filter((n)=>n !== t).reduce((n, o)=>n + o.clientHeight, 0);\n            h.style(t, {\n                maxHeight: `calc(100% - ${i}px)`,\n                position: \"relative\"\n            });\n        }\n        this._perfectScrollbar = new Bh(t, {\n            suppressScrollX: !0,\n            handlers: [\n                \"click-rail\",\n                \"drag-thumb\",\n                \"wheel\",\n                \"touch\"\n            ]\n        });\n    }\n    _setupSlim() {\n        this._slimCollapsed = this.options.sidenavSlimCollapsed, this._toggleSlimDisplay(this._slimCollapsed), this.options.sidenavExpandOnHover && (this._element.addEventListener(\"mouseenter\", ()=>{\n            this._slimCollapsed && this._setSlim(!1);\n        }), this._element.addEventListener(\"mouseleave\", ()=>{\n            this._slimCollapsed || this._setSlim(!0);\n        }));\n    }\n    _setupRippleEffect() {\n        this.links.forEach((t)=>{\n            let e = ei.getInstance(t), i = this.options.sidenavColor;\n            if (e && e._options.sidenavColor !== this.options.sidenavColor) e.dispose();\n            else if (e) return;\n            (localStorage.theme === \"dark\" || !(\"theme\" in localStorage) && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) && (i = \"white\"), e = new ei(t, {\n                rippleColor: i\n            });\n        });\n    }\n    _setupTouch() {\n        this._touch = new $g(this._element, \"swipe\", {\n            threshold: 20\n        }), this._touch.init(), c.on(this._element, \"swipeleft\", (t)=>this._handleSwipe(t, this.options.sidenavRight)), c.on(this._element, \"swiperight\", (t)=>this._handleSwipe(t, !this.options.sidenavRight));\n    }\n    _setActive(t, e) {\n        t.setAttribute(\"data-te-sidebar-state-active\", \"\"), this._activeNode && t.removeAttribute(\"data-te-sidebar-state-active\"), this._activeNode = t;\n        const [i] = d.parents(this._activeNode, Le);\n        if (!i) {\n            this._setActiveCategory();\n            return;\n        }\n        const [n] = d.prev(i, gi);\n        this._setActiveCategory(n), !e && !this._slimCollapsed && Qt.getInstance(i).show();\n    }\n    _setActiveCategory(t) {\n        this.navigation.forEach((e)=>{\n            d.find(Le, e).forEach((n)=>{\n                const [o] = d.prev(n, gi);\n                o !== t ? o.removeAttribute(\"data-te-sidenav-state-active\") : o.setAttribute(\"data-te-sidenav-state-active\", \"\");\n            });\n        });\n    }\n    _setActiveElements(t) {\n        this.navigation.forEach((e)=>{\n            d.find(gi, e).filter((n)=>d.next(n, Le).length === 0).forEach((n)=>{\n                this._isActive(n, t) && n !== this._activeNode && this._setActive(n, t);\n            });\n        }), t && this._updateFocus(this.isVisible);\n    }\n    _setColor() {\n        const t = [\n            \"primary\",\n            \"secondary\",\n            \"success\",\n            \"info\",\n            \"warning\",\n            \"danger\",\n            \"light\",\n            \"dark\"\n        ], { sidenavColor: e } = this.options, i = t.includes(e) ? e : \"primary\";\n        t.forEach((n)=>{\n            this._element.classList.remove(`sidenav-${n}`);\n        }), h.addClass(this._element, `sidenav-${i}`);\n    }\n    _setContentOffsets(t, e, i) {\n        this._content.forEach((n, o)=>{\n            const r = this._getOffsetValue(t, {\n                index: o,\n                property: \"padding\",\n                offsets: e\n            }), a = this._getOffsetValue(t, {\n                index: o,\n                property: \"margin\",\n                offsets: e\n            }), l = {};\n            if (i || (l.transition = `all ${this.transitionDuration} linear`), l[e.padding.property] = `${r}px`, l[e.margin.property] = `${a}px`, h.style(n, l), !!t) {\n                if (i) {\n                    h.style(n, {\n                        transition: this._initialContentStyle[o].transition\n                    });\n                    return;\n                }\n                c.on(n, \"transitionend\", ()=>{\n                    h.style(n, {\n                        transition: this._initialContentStyle[o].transition\n                    });\n                });\n            }\n        });\n    }\n    _setMode(t) {\n        this.options.sidenavMode !== t && (this._options.sidenavMode = t, this._update(this.isVisible));\n    }\n    _setSlim(t) {\n        const e = t ? [\n            \"collapse\",\n            \"collapsed\"\n        ] : [\n            \"expand\",\n            \"expanded\"\n        ];\n        this._triggerEvents(...e), t && this._collapseItems(), this._slimCollapsed = t, this._toggleSlimDisplay(t), h.style(this._element, {\n            width: `${this.width}px`\n        }), this._updateOffsets(this.isVisible);\n    }\n    _setTabindex(t) {\n        this.links.forEach((e)=>{\n            e.tabIndex = t ? 0 : -1;\n        });\n    }\n    _emitEvents(t) {\n        const e = t ? [\n            \"show\",\n            \"shown\"\n        ] : [\n            \"hide\",\n            \"hidden\"\n        ];\n        this._triggerEvents(...e);\n    }\n    _rotateArrow(t, e) {\n        const [i] = d.children(t, `[${Lg}]`);\n        i && (e ? h.removeClass(i, \"rotate-180\") : h.addClass(i, \"rotate-180\"));\n    }\n    _toggleCategory(t, e) {\n        t.preventDefault(), e.toggle(), this._slimCollapsed && this.options.sidenavExpandable && (this._tempSlim = !0, this._setSlim(!1));\n    }\n    _toggleSlimDisplay(t) {\n        const e = d.find(Mg, this._element), i = d.find(Rg, this._element), n = ()=>{\n            e.forEach((o)=>{\n                h.style(o, {\n                    display: this._slimCollapsed ? \"unset\" : \"none\"\n                });\n            }), i.forEach((o)=>{\n                h.style(o, {\n                    display: this._slimCollapsed ? \"none\" : \"unset\"\n                });\n            });\n        };\n        t ? setTimeout(()=>n(), this.options.sidenavTransitionDuration) : n();\n    }\n    async _triggerEvents(t, e) {\n        c.trigger(this._element, `${t}.te.sidenav`), e && await setTimeout(()=>{\n            c.trigger(this._element, `${e}.te.sidenav`);\n        }, this.options.sidenavTransitionDuration + 5);\n    }\n    _isiPhone() {\n        return /iPhone|iPod/i.test(navigator.userAgent);\n    }\n    _update(t) {\n        t && this._isiPhone() && h.addClass(this._element, \"ps--scrolling-y\"), this.toggler && this._updateTogglerAria(t), this._updateDisplay(t), this.options.sidenavBackdrop && this._updateBackdrop(t), this._updateOffsets(t), t && this.options.sidenavCloseOnEsc && this.options.sidenavMode !== \"side\" && c.on(window, \"keydown\", this.escHandler), this.options.sidenavFocusTrap && this._updateFocus(t);\n    }\n    _updateDisplay(t) {\n        const e = t ? 0 : this.translation;\n        h.style(this._element, {\n            transform: `translateX(${e}%)`\n        });\n    }\n    _updateFocus(t) {\n        if (this._setTabindex(t), this.options.sidenavMode === \"over\" && this.options.sidenavFocusTrap) {\n            if (t) {\n                this._focusTrap.trap();\n                return;\n            }\n            this._focusTrap.disable();\n        }\n        this._focusTrap.disable();\n    }\n    _updateOffsets(t, e = !1) {\n        const [i, n] = this.options.sidenavRight ? [\n            \"right\",\n            \"left\"\n        ] : [\n            \"left\",\n            \"right\"\n        ], o = {\n            property: this._getProperty(\"padding\", i),\n            value: this.options.sidenavMode === \"over\" ? 0 : this.width\n        }, r = {\n            property: this._getProperty(\"margin\", n),\n            value: this.options.sidenavMode === \"push\" ? -1 * this.width : 0\n        };\n        c.trigger(this._element, \"update.te.sidenav\", {\n            margin: r,\n            padding: o\n        }), this._content && (this._content.className = \"\", this._setContentOffsets(t, {\n            padding: o,\n            margin: r\n        }, e));\n    }\n    _updateTogglerAria(t) {\n        this.toggler.setAttribute(\"aria-expanded\", t);\n    }\n    // Static\n    static toggleSidenav() {\n        return function(t) {\n            const e = d.closest(t.target, fo), i = h.getDataAttributes(e).target;\n            d.find(i).forEach((n)=>{\n                (Ci.getInstance(n) || new Ci(n)).toggle();\n            });\n        };\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, ws);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new Ci(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, ws);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Zo = \"stepper\", tn = \"te.stepper\", ai = `.${tn}`, Ui = `data-te-${Zo}`, Ai = \"horizontal\", Ot = \"vertical\", Fg = `onChangeStep${ai}`, Yg = `onChangedStep${ai}`, jg = {\n    stepperType: \"string\",\n    stepperLinear: \"boolean\",\n    stepperNoEditable: \"boolean\",\n    stepperActive: \"string\",\n    stepperCompleted: \"string\",\n    stepperInvalid: \"string\",\n    stepperDisabled: \"string\",\n    stepperVerticalBreakpoint: \"number\",\n    stepperMobileBreakpoint: \"number\",\n    stepperMobileBarBreakpoint: \"number\",\n    stepperAnimationDuration: \"number\",\n    slideInLeftAnimation: \"string\",\n    slideOutLeftAnimation: \"string\",\n    slideInRightAnimation: \"string\",\n    slideOutRightAnimation: \"string\"\n}, Kg = {\n    stepperType: Ai,\n    stepperLinear: !1,\n    stepperNoEditable: !1,\n    stepperActive: \"\",\n    stepperCompleted: \"\",\n    stepperInvalid: \"\",\n    stepperDisabled: \"\",\n    stepperVerticalBreakpoint: 0,\n    stepperMobileBreakpoint: 0,\n    stepperMobileBarBreakpoint: 4,\n    stepperAnimationDuration: 800,\n    slideInLeftAnimation: \"animate-[slide-in-left_0.8s_both]\",\n    slideOutLeftAnimation: \"animate-[slide-out-left_0.8s_both]\",\n    slideInRightAnimation: \"animate-[slide-in-right_0.8s_both]\",\n    slideOutRightAnimation: \"animate-[slide-out-right_0.8s_both]\"\n}, dl = `mousedown${ai}`, ul = `keydown${ai}`, zg = `keyup${ai}`, pl = `resize${ai}`, Kt = `[${Ui}-step-ref]`, Z = `[${Ui}-head-ref]`, _l = `[${Ui}-head-text-ref]`, ks = `[${Ui}-head-icon-ref]`, Q = `[${Ui}-content-ref]`;\nclass UA {\n    constructor(t, e){\n        this._element = t, this._options = this._getConfig(e), this._elementHeight = 0, this._steps = d.find(`${Kt}`, this._element), this._currentView = \"\", this._activeStepIndex = 0, this._verticalStepperStyles = [], this._timeout = 0, this._element && (A.setData(t, tn, this), this._init());\n    }\n    // Getters\n    static get NAME() {\n        return Zo;\n    }\n    get activeStep() {\n        return this._steps[this._activeStepIndex];\n    }\n    get activeStepIndex() {\n        return this._activeStepIndex;\n    }\n    // Public\n    dispose() {\n        this._steps.forEach((t)=>{\n            c.off(t, dl), c.off(t, ul);\n        }), c.off(window, pl), A.removeData(this._element, tn), this._element = null;\n    }\n    changeStep(t) {\n        this._toggleStep(t);\n    }\n    nextStep() {\n        this._toggleStep(this._activeStepIndex + 1);\n    }\n    previousStep() {\n        this._toggleStep(this._activeStepIndex - 1);\n    }\n    // Private\n    _init() {\n        const t = d.find(`${Kt}`, this._element)[this._activeStepIndex].setAttribute(\"data-te\", \"active-step\"), e = d.find(`${_l}`, this._element), i = d.find(`${ks}`, this._element);\n        switch(t ? (this._activeStepIndex = this._steps.indexOf(t), this._toggleStepClass(this._activeStepIndex, \"add\", this._options.stepperActive), e[this._activeStepIndex].classList.add(\"font-medium\"), i[this._activeStepIndex].classList.add(\"!bg-primary-100\"), i[this._activeStepIndex].classList.add(\"!text-primary-700\")) : (e[this._activeStepIndex].classList.add(\"font-medium\"), i[this._activeStepIndex].classList.add(\"!bg-primary-100\"), i[this._activeStepIndex].classList.add(\"!text-primary-700\"), this._toggleStepClass(this._activeStepIndex, \"add\", this._options.stepperActive)), this._bindMouseDown(), this._bindKeysNavigation(), this._options.stepperType){\n            case Ot:\n                this._toggleVertical();\n                break;\n            default:\n                this._toggleHorizontal();\n                break;\n        }\n        (this._options.stepperVerticalBreakpoint || this._options.stepperMobileBreakpoint) && this._toggleStepperView(), this._bindResize();\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...Kg,\n            ...e,\n            ...t\n        }, I(Zo, t, jg), t;\n    }\n    _bindMouseDown() {\n        this._steps.forEach((t)=>{\n            const e = d.findOne(`${Z}`, t);\n            c.on(e, dl, (i)=>{\n                const n = d.parents(i.target, `${Kt}`)[0], o = this._steps.indexOf(n);\n                i.preventDefault(), this._toggleStep(o);\n            });\n        });\n    }\n    _bindResize() {\n        c.on(window, pl, ()=>{\n            this._currentView === Ot && this._setSingleStepHeight(this.activeStep), this._currentView === Ai && this._setHeight(this.activeStep), (this._options.stepperVerticalBreakpoint || this._options.stepperMobileBreakpoint) && this._toggleStepperView();\n        });\n    }\n    _toggleStepperView() {\n        const t = this._options.stepperVerticalBreakpoint < window.innerWidth, e = this._options.stepperVerticalBreakpoint > window.innerWidth, i = this._options.stepperMobileBreakpoint > window.innerWidth;\n        t && this._currentView !== Ai && this._toggleHorizontal(), e && !i && this._currentView !== Ot && (this._steps.forEach((n)=>{\n            const o = d.findOne(`${Q}`, n);\n            this._resetStepperHeight(), this._showElement(o);\n        }), this._toggleVertical());\n    }\n    _toggleStep(t) {\n        if (this._activeStepIndex === t) return;\n        this._options.stepperNoEditable && this._toggleDisabled();\n        const e = this._activeStepIndex, i = c.trigger(this.activeStep, Fg, {\n            currentStep: this._activeStepIndex,\n            nextStep: t\n        });\n        t > this._activeStepIndex && i.defaultPrevented || (this._showElement(d.findOne(`${Q}`, this._steps[t])), this._toggleActive(t), t > this._activeStepIndex && this._toggleCompleted(this._activeStepIndex), this._currentView === Ai ? this._animateHorizontalStep(t) : (this._animateVerticalStep(t), this._setSingleStepHeight(this._steps[t])), this._toggleStepTabIndex(d.findOne(`${Z}`, this.activeStep), d.findOne(`${Z}`, this._steps[t])), this._activeStepIndex = t, this._steps[this._activeStepIndex].setAttribute(\"data-te\", \"active-step\"), this._steps.forEach((n, o)=>{\n            n[this._activeStepIndex] !== o && n.removeAttribute(\"data-te\");\n        }), c.trigger(this.activeStep, Yg, {\n            currentStep: this._activeStepIndex,\n            prevStep: e\n        }));\n    }\n    _resetStepperHeight() {\n        this._element.style.height = \"\";\n    }\n    _setStepsHeight() {\n        this._steps.forEach((t)=>{\n            const e = d.findOne(`${Q}`, t), i = window.getComputedStyle(e);\n            this._verticalStepperStyles.push({\n                paddingTop: parseFloat(i.paddingTop),\n                paddingBottom: parseFloat(i.paddingBottom)\n            });\n            const n = e.scrollHeight;\n            e.style.height = `${n}px`;\n        });\n    }\n    _setSingleStepHeight(t) {\n        const e = d.findOne(`${Q}`, t), i = this.activeStep === t, n = this._steps.indexOf(t);\n        let o;\n        i ? (e.style.height = \"\", o = e.scrollHeight) : o = e.scrollHeight + this._verticalStepperStyles[n].paddingTop + this._verticalStepperStyles[n].paddingBottom, e.style.height = `${o}px`;\n    }\n    _toggleVertical() {\n        this._currentView = Ot, this._setStepsHeight(), this._hideInactiveSteps();\n    }\n    _toggleHorizontal() {\n        this._currentView = Ai, this._setHeight(this.activeStep), this._hideInactiveSteps();\n    }\n    _toggleStepperClass() {\n        d.findOne(\"[data-te-stepper-type]\", this._element) !== null && this._steps.forEach((e)=>{\n            d.findOne(`${Q}`, e).classList.remove(\"!my-0\"), d.findOne(`${Q}`, e).classList.remove(\"!py-0\"), d.findOne(`${Q}`, e).classList.remove(\"!h-0\");\n        });\n    }\n    _toggleStepClass(t, e, i) {\n        i && this._steps[t].classList[e](i);\n    }\n    _bindKeysNavigation() {\n        this._toggleStepTabIndex(!1, d.findOne(`${Z}`, this.activeStep)), this._steps.forEach((t)=>{\n            const e = d.findOne(`${Z}`, t);\n            c.on(e, ul, (i)=>{\n                const n = d.parents(i.currentTarget, `${Kt}`)[0], o = d.next(n, `${Kt}`)[0], r = d.prev(n, `${Kt}`)[0], a = d.findOne(`${Z}`, n), l = d.findOne(`${Z}`, this.activeStep);\n                let p = null, u = null;\n                if (o && (p = d.findOne(`${Z}`, o)), r && (u = d.findOne(`${Z}`, r)), i.keyCode === Ke && this._currentView !== Ot && (u ? (this._toggleStepTabIndex(a, u), this._toggleOutlineStyles(a, u), u.focus()) : p && (this._toggleStepTabIndex(a, p), this._toggleOutlineStyles(a, p), p.focus())), i.keyCode === ze && this._currentView !== Ot && (p ? (this._toggleStepTabIndex(a, p), this._toggleOutlineStyles(a, p), p.focus()) : u && (this._toggleStepTabIndex(a, u), this._toggleOutlineStyles(a, u), u.focus())), i.keyCode === z && this._currentView === Ot && (i.preventDefault(), p && (this._toggleStepTabIndex(a, p), this._toggleOutlineStyles(a, p), p.focus())), i.keyCode === U && this._currentView === Ot && (i.preventDefault(), u && (this._toggleStepTabIndex(a, u), this._toggleOutlineStyles(a, u), u.focus())), i.keyCode === Te) {\n                    const _ = d.findOne(`${Z}`, this._steps[0]);\n                    this._toggleStepTabIndex(a, _), this._toggleOutlineStyles(a, _), _.focus();\n                }\n                if (i.keyCode === Ee) {\n                    const _ = this._steps[this._steps.length - 1], f = d.findOne(`${Z}`, _);\n                    this._toggleStepTabIndex(a, f), this._toggleOutlineStyles(a, f), f.focus();\n                }\n                (i.keyCode === it || i.keyCode === Zs) && (i.preventDefault(), this.changeStep(this._steps.indexOf(n))), i.keyCode === ke && (this._toggleStepTabIndex(a, l), this._toggleOutlineStyles(a, !1), l.focus());\n            }), c.on(e, zg, (i)=>{\n                const n = d.parents(i.currentTarget, `${Kt}`)[0], o = d.findOne(`${Z}`, n), r = d.findOne(`${Z}`, this.activeStep);\n                i.keyCode === ke && (this._toggleStepTabIndex(o, r), this._toggleOutlineStyles(!1, r), r.focus());\n            });\n        });\n    }\n    _toggleStepTabIndex(t, e) {\n        t && t.setAttribute(\"tabIndex\", -1), e && e.setAttribute(\"tabIndex\", 0);\n    }\n    _toggleOutlineStyles(t, e) {\n        t && (t.style.outline = \"\"), e && (e.style.outline = \"revert\");\n    }\n    _toggleDisabled() {\n        const t = d.find(`${Z}`, this._element), e = d.find(`${ks}`, this._element);\n        t[this._activeStepIndex].classList.add(\"color-[#858585]\"), t[this._activeStepIndex].classList.add(\"cursor-default\"), e[this._activeStepIndex].classList.add(\"!bg-[#858585]\"), this._toggleStepClass(this._activeStepIndex, \"add\", this._options.stepperDisabled);\n    }\n    _toggleActive(t) {\n        const e = d.find(`${_l}`, this._element), i = d.find(`${ks}`, this._element);\n        e[t].classList.add(\"font-medium\"), i[t].classList.add(\"!bg-primary-100\"), i[t].classList.add(\"!text-primary-700\"), i[t].classList.remove(\"!bg-success-100\"), i[t].classList.remove(\"!text-success-700\"), e[this._activeStepIndex].classList.remove(\"font-medium\"), i[this._activeStepIndex].classList.remove(\"!bg-primary-100\"), i[this._activeStepIndex].classList.remove(\"!text-primary-700\"), this._toggleStepClass(t, \"add\", this._options.stepperActive), this._toggleStepClass(this._activeStepIndex, \"remove\", this._options.stepperActive);\n    }\n    _toggleCompleted(t) {\n        const e = d.find(`${ks}`, this._element);\n        this._options.stepperNoEditable ? this._steps[t].classList.add(\"pointer-events-none\") : (e[t].classList.add(\"!bg-success-100\"), e[t].classList.add(\"!text-success-700\")), e[t].classList.remove(\"!bg-danger-100\"), e[t].classList.remove(\"!text-danger-700\"), this._toggleStepClass(t, \"add\", this._options.stepperCompleted), this._toggleStepClass(t, \"remove\", this._options.stepperInvalid);\n    }\n    _hideInactiveSteps() {\n        this._steps.forEach((t)=>{\n            if (!t.getAttribute(\"data-te\")) {\n                const e = d.findOne(`${Q}`, t);\n                e.classList.remove(\"translate-x-[150%]\"), this._hideElement(e);\n            }\n        });\n    }\n    _setHeight(t) {\n        const e = d.findOne(`${Q}`, t), i = getComputedStyle(e), n = d.findOne(`${Z}`, t), o = getComputedStyle(n), r = e.offsetHeight + parseFloat(i.marginTop) + parseFloat(i.marginBottom), a = n.offsetHeight + parseFloat(o.marginTop) + parseFloat(o.marginBottom);\n        this._element.style.height = `${a + r}px`;\n    }\n    _hideElement(t) {\n        !d.parents(t, `${Kt}`)[0].getAttribute(\"data-te\") && this._currentView !== Ot ? t.style.display = \"none\" : (t.classList.add(\"!my-0\"), t.classList.add(\"!py-0\"), t.classList.add(\"!h-0\"));\n    }\n    _showElement(t) {\n        this._currentView === Ot ? (t.classList.remove(\"!my-0\"), t.classList.remove(\"!py-0\"), t.classList.remove(\"!h-0\")) : t.style.display = \"block\";\n    }\n    _animateHorizontalStep(t) {\n        clearTimeout(this._timeout), this._clearStepsAnimation();\n        const e = t > this._activeStepIndex, i = d.findOne(`${Q}`, this._steps[t]), n = d.findOne(`${Q}`, this.activeStep);\n        let o, r;\n        this._steps.forEach((a, l)=>{\n            const p = d.findOne(`${Q}`, a);\n            l !== t && l !== this._activeStepIndex && this._hideElement(p);\n        }), e ? (r = this._options.slideOutLeftAnimation, o = this._options.slideInRightAnimation) : (r = this._options.slideOutRightAnimation, o = this._options.slideInLeftAnimation), n.classList.add(r), i.classList.add(o), this._setHeight(this._steps[t]), this._timeout = setTimeout(()=>{\n            this._hideElement(n), this._clearStepsAnimation();\n        }, this._options.stepperAnimationDuration);\n    }\n    _clearStepsAnimation() {\n        this._steps.forEach((t)=>{\n            d.findOne(`${Q}`, t).classList.remove(this._options.slideInLeftAnimation, this._options.slideOutLeftAnimation, this._options.slideInRightAnimation, this._options.slideOutRightAnimation);\n        });\n    }\n    _animateVerticalStep(t) {\n        const e = d.findOne(`${Q}`, this._steps[t]), i = d.findOne(`${Q}`, this.activeStep);\n        this._hideElement(i), this._showElement(e);\n    }\n    static getInstance(t) {\n        return A.getData(t, tn);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst fl = \"data-te-input-state-active\", xs = \"data-te-input-selected\", ml = \"data-te-input-multiple-active\", gl = \"[data-te-form-check-input]\";\nclass bl {\n    constructor(t, e, i, n, o, r, a, l, p, u, _){\n        this.id = t, this.nativeOption = e, this.multiple = i, this.value = n, this.label = o, this.selected = r, this.disabled = a, this.hidden = l, this.secondaryText = p, this.groupId = u, this.icon = _, this.node = null, this.active = !1;\n    }\n    select() {\n        this.multiple ? this._selectMultiple() : this._selectSingle();\n    }\n    _selectSingle() {\n        this.selected || (this.node.setAttribute(xs, \"\"), this.node.setAttribute(\"aria-selected\", !0), this.selected = !0, this.nativeOption && (this.nativeOption.selected = !0));\n    }\n    _selectMultiple() {\n        if (!this.selected) {\n            const t = d.findOne(gl, this.node);\n            t.checked = !0, this.node.setAttribute(xs, \"\"), this.node.setAttribute(\"aria-selected\", !0), this.selected = !0, this.nativeOption && (this.nativeOption.selected = !0);\n        }\n    }\n    deselect() {\n        this.multiple ? this._deselectMultiple() : this._deselectSingle();\n    }\n    _deselectSingle() {\n        this.selected && (this.node.removeAttribute(xs), this.node.setAttribute(\"aria-selected\", !1), this.selected = !1, this.nativeOption && (this.nativeOption.selected = !1));\n    }\n    _deselectMultiple() {\n        if (this.selected) {\n            const t = d.findOne(gl, this.node);\n            t.checked = !1, this.node.removeAttribute(xs), this.node.setAttribute(\"aria-selected\", !1), this.selected = !1, this.nativeOption && (this.nativeOption.selected = !1);\n        }\n    }\n    setNode(t) {\n        this.node = t;\n    }\n    setActiveStyles() {\n        if (!this.active) {\n            if (this.multiple) {\n                this.node.setAttribute(ml, \"\");\n                return;\n            }\n            this.active = !0, this.node.setAttribute(fl, \"\");\n        }\n    }\n    removeActiveStyles() {\n        this.active && (this.active = !1, this.node.removeAttribute(fl)), this.multiple && this.node.removeAttribute(ml);\n    }\n}\nclass Ug {\n    constructor(t = !1){\n        this._multiple = t, this._selections = [];\n    }\n    select(t) {\n        this._multiple ? this._selections.push(t) : this._selections = [\n            t\n        ];\n    }\n    deselect(t) {\n        if (this._multiple) {\n            const e = this._selections.findIndex((i)=>t === i);\n            this._selections.splice(e, 1);\n        } else this._selections = [];\n    }\n    clear() {\n        this._selections = [];\n    }\n    get selection() {\n        return this._selections[0];\n    }\n    get selections() {\n        return this._selections;\n    }\n    get label() {\n        return this._selections[0] && this.selection.label;\n    }\n    get labels() {\n        return this._selections.map((t)=>t.label).join(\", \");\n    }\n    get value() {\n        return this.selections[0] && this.selection.value;\n    }\n    get values() {\n        return this._selections.map((t)=>t.value);\n    }\n}\nfunction Qo(s) {\n    return s.filter((t)=>!t.disabled).every((t)=>t.selected);\n}\nconst Xg = \"data-te-select-form-outline-ref\", Gg = \"data-te-select-wrapper-ref\", qg = \"data-te-select-input-ref\", Zg = \"data-te-select-clear-btn-ref\", Qg = \"data-te-select-dropdown-container-ref\", Jg = \"data-te-select-dropdown-ref\", tb = \"data-te-select-options-wrapper-ref\", eb = \"data-te-select-options-list-ref\", ib = \"data-te-select-input-filter-ref\", Eh = \"data-te-select-option-ref\", sb = \"data-te-select-option-all-ref\", nb = \"data-te-select-option-text-ref\", ob = \"data-te-form-check-input\", rb = \"data-te-select-option-group-ref\", ab = \"data-te-select-option-group-label-ref\", Ch = \"data-te-select-selected\", lb = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\n</svg>\n`, cb = (s)=>{\n    s.code === \"Tab\" || s.code === \"Esc\" || s.preventDefault();\n};\nfunction Os(s, t, e, i, n) {\n    t.selectSize === \"default\" && h.addClass(s, e), t.selectSize === \"sm\" && h.addClass(s, i), t.selectSize === \"lg\" && h.addClass(s, n);\n}\nfunction hb(s, t, e, i, n) {\n    const o = document.createElement(\"div\");\n    o.setAttribute(\"id\", s), o.setAttribute(Gg, \"\");\n    const r = $(\"div\");\n    r.setAttribute(Xg, \"\"), h.addClass(r, i.formOutline);\n    const a = $(\"input\"), l = t.selectFilter ? \"combobox\" : \"listbox\", p = t.multiple ? \"true\" : \"false\", u = t.disabled ? \"true\" : \"false\";\n    a.setAttribute(qg, \"\"), h.addClass(a, i.selectInput), Os(a, t, i.selectInputSizeDefault, i.selectInputSizeSm, i.selectInputSizeLg), t.selectFormWhite && h.addClass(a, i.selectInputWhite), a.setAttribute(\"type\", \"text\"), a.setAttribute(\"role\", l), a.setAttribute(\"aria-multiselectable\", p), a.setAttribute(\"aria-disabled\", u), a.setAttribute(\"aria-haspopup\", \"true\"), a.setAttribute(\"aria-expanded\", !1), t.tabIndex && a.setAttribute(\"tabIndex\", t.tabIndex), t.disabled && a.setAttribute(\"disabled\", \"\"), t.selectPlaceholder !== \"\" && a.setAttribute(\"placeholder\", t.selectPlaceholder), t.selectValidation ? (h.addStyle(a, {\n        \"pointer-events\": \"none\",\n        \"caret-color\": \"transparent\"\n    }), h.addStyle(r, {\n        cursor: \"pointer\"\n    })) : a.setAttribute(\"readonly\", \"true\"), t.selectValidation && (a.setAttribute(\"required\", \"true\"), a.setAttribute(\"aria-required\", \"true\"), a.addEventListener(\"keydown\", cb));\n    const _ = $(\"div\");\n    h.addClass(_, i.selectValidationValid);\n    const f = document.createTextNode(`${t.selectValidFeedback}`);\n    _.appendChild(f);\n    const g = $(\"div\");\n    h.addClass(g, i.selectValidationInvalid);\n    const m = document.createTextNode(`${t.selectInvalidFeedback}`);\n    g.appendChild(m);\n    const b = $(\"span\");\n    b.setAttribute(Zg, \"\"), h.addClass(b, i.selectClearBtn), Os(b, t, i.selectClearBtnDefault, i.selectClearBtnSm, i.selectClearBtnLg), t.selectFormWhite && h.addClass(b, i.selectClearBtnWhite);\n    const v = document.createTextNode(\"✕\");\n    b.appendChild(v), b.setAttribute(\"tabindex\", \"0\");\n    const T = $(\"span\");\n    return h.addClass(T, i.selectArrow), Os(T, t, i.selectArrowDefault, i.selectArrowSm, i.selectArrowLg), t.selectFormWhite && h.addClass(T, i.selectArrowWhite), T.innerHTML = n || lb, r.appendChild(a), e && (h.addClass(e, i.selectLabel), Os(e, t, i.selectLabelSizeDefault, i.selectLabelSizeSm, i.selectLabelSizeLg), t.selectFormWhite && h.addClass(e, i.selectLabelWhite), r.appendChild(e)), t.selectValidation && (r.appendChild(_), r.appendChild(g)), t.selectClearButton && r.appendChild(b), r.appendChild(T), o.appendChild(r), o;\n}\nfunction vl(s, t, e, i, n, o, r, a) {\n    const l = document.createElement(\"div\");\n    l.setAttribute(Qg, \"\"), h.addClass(l, a.selectDropdownContainer), l.setAttribute(\"id\", `${s}`), l.style.width = `${e}px`;\n    const p = document.createElement(\"div\");\n    p.setAttribute(\"tabindex\", 0), p.setAttribute(Jg, \"\"), h.addClass(p, a.dropdown);\n    const u = $(\"div\");\n    u.setAttribute(tb, \"\"), h.addClass(u, a.optionsWrapper), h.addClass(u, a.optionsWrapperScrollbar), u.style.maxHeight = `${i}px`;\n    const _ = Ah(o, n, t, a);\n    return u.appendChild(_), t.selectFilter && p.appendChild(db(t.selectSearchPlaceholder, a)), p.appendChild(u), r && p.appendChild(r), l.appendChild(p), l;\n}\nfunction Ah(s, t, e, i) {\n    const n = $(\"div\");\n    n.setAttribute(eb, \"\"), h.addClass(n, i.optionsList);\n    let o;\n    return e.multiple ? o = pb(s, t, e, i) : o = ub(s, e, i), o.forEach((r)=>{\n        n.appendChild(r);\n    }), n;\n}\nfunction db(s, t) {\n    const e = $(\"div\");\n    h.addClass(e, t.inputGroup);\n    const i = $(\"input\");\n    return i.setAttribute(ib, \"\"), h.addClass(i, t.selectFilterInput), i.placeholder = s, i.setAttribute(\"role\", \"searchbox\"), i.setAttribute(\"type\", \"text\"), e.appendChild(i), e;\n}\nfunction ub(s, t, e) {\n    return yh(s, t, e);\n}\nfunction pb(s, t, e, i) {\n    let n = null;\n    e.selectAll && (n = _b(t, s, e, i));\n    const o = yh(s, e, i);\n    return n ? [\n        n,\n        ...o\n    ] : o;\n}\nfunction yh(s, t, e) {\n    const i = [];\n    return s.forEach((n)=>{\n        if (Object.prototype.hasOwnProperty.call(n, \"options\")) {\n            const r = bb(n, t, e);\n            i.push(r);\n        } else i.push(wh(n, t, e));\n    }), i;\n}\nfunction _b(s, t, e, i) {\n    const n = Qo(t), o = $(\"div\");\n    o.setAttribute(Eh, \"\");\n    const r = i.selectAllOption || i.selectOption;\n    return h.addClass(o, r), o.setAttribute(sb, \"\"), h.addStyle(o, {\n        height: `${e.selectOptionHeight}px`\n    }), o.setAttribute(\"role\", \"option\"), o.setAttribute(\"aria-selected\", n), n && o.setAttribute(Ch, \"\"), o.appendChild(kh(s, e, i)), s.setNode(o), o;\n}\nfunction wh(s, t, e) {\n    if (s.node) return s.node;\n    const i = $(\"div\");\n    return i.setAttribute(Eh, \"\"), h.addClass(i, e.selectOption), h.addStyle(i, {\n        height: `${t.selectOptionHeight}px`\n    }), h.setDataAttribute(i, \"id\", s.id), i.setAttribute(\"role\", \"option\"), i.setAttribute(\"aria-selected\", s.selected), i.setAttribute(\"aria-disabled\", s.disabled), s.selected && i.setAttribute(Ch, \"\"), s.disabled && i.setAttribute(\"data-te-select-option-disabled\", !0), s.hidden && h.addClass(i, \"hidden\"), i.appendChild(kh(s, t, e)), s.icon && i.appendChild(gb(s, e)), s.setNode(i), i;\n}\nfunction kh(s, t, e) {\n    const i = $(\"span\");\n    i.setAttribute(nb, \"\"), h.addClass(i, e.selectOptionText);\n    const n = document.createTextNode(s.label);\n    return t.multiple && i.appendChild(mb(s, e)), i.appendChild(n), (s.secondaryText || typeof s.secondaryText == \"number\") && i.appendChild(fb(s.secondaryText, e)), i;\n}\nfunction fb(s, t) {\n    const e = $(\"span\");\n    h.addClass(e, t.selectOptionSecondaryText);\n    const i = document.createTextNode(s);\n    return e.appendChild(i), e;\n}\nfunction mb(s, t) {\n    const e = $(\"input\");\n    e.setAttribute(\"type\", \"checkbox\"), h.addClass(e, t.formCheckInput), e.setAttribute(ob, \"\");\n    const i = $(\"label\");\n    return s.selected && e.setAttribute(\"checked\", !0), s.disabled && e.setAttribute(\"disabled\", !0), e.appendChild(i), e;\n}\nfunction gb(s, t) {\n    const e = $(\"span\"), i = $(\"img\");\n    return h.addClass(i, t.selectOptionIcon), i.src = s.icon, e.appendChild(i), e;\n}\nfunction bb(s, t, e) {\n    const i = $(\"div\");\n    i.setAttribute(rb, \"\"), h.addClass(i, e.selectOptionGroup), i.setAttribute(\"role\", \"group\"), i.setAttribute(\"id\", s.id), s.hidden && h.addClass(i, \"hidden\");\n    const n = $(\"label\");\n    return n.setAttribute(ab, \"\"), h.addClass(n, e.selectOptionGroupLabel), h.addStyle(n, {\n        height: `${t.selectOptionHeight}px`\n    }), n.setAttribute(\"for\", s.id), n.textContent = s.label, i.appendChild(n), s.options.forEach((o)=>{\n        i.appendChild(wh(o, t, e));\n    }), i;\n}\nfunction vb(s, t) {\n    const e = $(\"div\");\n    return e.textContent = s, h.addClass(e, t.selectLabel), h.addClass(e, t.selectFakeValue), e;\n}\nconst mo = \"select\", yi = \"te.select\", Xi = `.${yi}`, Tb = `close${Xi}`, Eb = `open${Xi}`, Tl = `optionSelect${Xi}`, El = `optionDeselect${Xi}`, Cb = `valueChange${Xi}`, Ab = \"change\", Cl = \"data-te-select-init\", xh = \"data-te-select-no-results-ref\", Al = \"data-te-select-open\", J = \"data-te-input-state-active\", zt = \"data-te-input-focused\", go = \"data-te-input-disabled\", yb = \"data-te-select-option-group-label-ref\", wb = \"data-te-select-option-all-ref\", bi = \"data-te-select-selected\", kb = \"[data-te-select-label-ref]\", yl = \"[data-te-select-input-ref]\", xb = \"[data-te-select-input-filter-ref]\", Ob = \"[data-te-select-dropdown-ref]\", Sb = \"[data-te-select-options-wrapper-ref]\", wl = \"[data-te-select-options-list-ref]\", Ib = \"[data-te-select-option-ref]\", Db = \"[data-te-select-clear-btn-ref]\", $b = \"[data-te-select-custom-content-ref]\", Lb = `[${xh}]`, kl = \"[data-te-select-form-outline-ref]\", Nb = \"[data-te-select-toggle]\", bo = \"[data-te-input-notch-ref]\", Mb = {\n    selectAutoSelect: !1,\n    selectContainer: \"body\",\n    selectClearButton: !1,\n    disabled: !1,\n    selectDisplayedLabels: 5,\n    selectFormWhite: !1,\n    multiple: !1,\n    selectOptionsSelectedLabel: \"options selected\",\n    selectOptionHeight: 38,\n    selectAll: !0,\n    selectAllLabel: \"Select all\",\n    selectSearchPlaceholder: \"Search...\",\n    selectSize: \"default\",\n    selectVisibleOptions: 5,\n    selectFilter: !1,\n    selectFilterDebounce: 300,\n    selectNoResultText: \"No results\",\n    selectValidation: !1,\n    selectValidFeedback: \"Valid\",\n    selectInvalidFeedback: \"Invalid\",\n    selectPlaceholder: \"\"\n}, Rb = {\n    selectAutoSelect: \"boolean\",\n    selectContainer: \"string\",\n    selectClearButton: \"boolean\",\n    disabled: \"boolean\",\n    selectDisplayedLabels: \"number\",\n    selectFormWhite: \"boolean\",\n    multiple: \"boolean\",\n    selectOptionsSelectedLabel: \"string\",\n    selectOptionHeight: \"number\",\n    selectAll: \"boolean\",\n    selectAllLabel: \"string\",\n    selectSearchPlaceholder: \"string\",\n    selectSize: \"string\",\n    selectVisibleOptions: \"number\",\n    selectFilter: \"boolean\",\n    selectFilterDebounce: \"number\",\n    selectNoResultText: \"string\",\n    selectValidation: \"boolean\",\n    selectValidFeedback: \"string\",\n    selectInvalidFeedback: \"string\",\n    selectPlaceholder: \"string\"\n}, Pb = {\n    dropdown: \"relative outline-none min-w-[100px] m-0 scale-y-[0.8] opacity-0 bg-white shadow-[0_2px_5px_0_rgba(0,0,0,0.16),_0_2px_10px_0_rgba(0,0,0,0.12)] transition duration-200 motion-reduce:transition-none data-[te-select-open]:scale-100 data-[te-select-open]:opacity-100 dark:bg-zinc-700\",\n    formCheckInput: \"relative float-left mt-[0.15rem] mr-[8px] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 dark:border-neutral-600 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary dark:checked:border-primary checked:bg-primary dark:checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:ml-[0.25rem] checked:after:-mt-px checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-t-0 checked:after:border-l-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:ml-[0.25rem] checked:focus:after:-mt-px checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-t-0 checked:focus:after:border-l-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent\",\n    formOutline: \"relative\",\n    initialized: \"hidden\",\n    inputGroup: \"flex items-center whitespace-nowrap p-2.5 text-center text-base font-normal leading-[1.6] text-gray-700 dark:bg-zinc-800 dark:text-gray-200 dark:placeholder:text-gray-200\",\n    noResult: \"flex items-center px-4\",\n    optionsList: \"list-none m-0 p-0\",\n    optionsWrapper: \"overflow-y-auto\",\n    optionsWrapperScrollbar: \"[&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar]:h-1 [&::-webkit-scrollbar-button]:block [&::-webkit-scrollbar-button]:h-0 [&::-webkit-scrollbar-button]:bg-transparent [&::-webkit-scrollbar-track-piece]:bg-transparent [&::-webkit-scrollbar-track-piece]:rounded-none [&::-webkit-scrollbar-track-piece]: [&::-webkit-scrollbar-track-piece]:rounded-l [&::-webkit-scrollbar-thumb]:h-[50px] [&::-webkit-scrollbar-thumb]:bg-[#999] [&::-webkit-scrollbar-thumb]:rounded\",\n    selectArrow: \"absolute right-3 text-[0.8rem] cursor-pointer peer-focus:text-primary peer-data-[te-input-focused]:text-primary group-data-[te-was-validated]/validation:peer-valid:text-green-600 group-data-[te-was-validated]/validation:peer-invalid:text-[rgb(220,76,100)] w-5 h-5\",\n    selectArrowWhite: \"text-gray-50 peer-focus:!text-white peer-data-[te-input-focused]:!text-white\",\n    selectArrowDefault: \"top-2\",\n    selectArrowLg: \"top-[13px]\",\n    selectArrowSm: \"top-1\",\n    selectClearBtn: \"absolute top-2 right-9 text-black cursor-pointer focus:text-primary outline-none dark:text-gray-200\",\n    selectClearBtnWhite: \"!text-gray-50\",\n    selectClearBtnDefault: \"top-2 text-base\",\n    selectClearBtnLg: \"top-[11px] text-base\",\n    selectClearBtnSm: \"top-1 text-[0.8rem]\",\n    selectDropdownContainer: \"z-[1070]\",\n    selectFakeValue: \"transform-none hidden data-[te-input-state-active]:block\",\n    selectFilterInput: \"relative m-0 block w-full min-w-0 flex-auto rounded border border-solid border-gray-300 bg-transparent bg-clip-padding px-3 py-1.5 text-base font-normal text-gray-700 transition duration-300 ease-in-out motion-reduce:transition-none focus:border-primary focus:text-gray-700 focus:shadow-te-primary focus:outline-none dark:text-gray-200 dark:placeholder:text-gray-200\",\n    selectInput: \"peer block min-h-[auto] w-full rounded border-0 bg-transparent outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-gray-200 dark:placeholder:text-gray-200 [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0 cursor-pointer data-[te-input-disabled]:bg-[#e9ecef] data-[te-input-disabled]:cursor-default group-data-[te-was-validated]/validation:mb-4 dark:data-[te-input-disabled]:bg-zinc-600\",\n    selectInputWhite: \"!text-gray-50\",\n    selectInputSizeDefault: \"py-[0.32rem] px-3 leading-[1.6]\",\n    selectInputSizeLg: \"py-[0.32rem] px-3 leading-[2.15]\",\n    selectInputSizeSm: \"py-[0.33rem] px-3 text-xs leading-[1.5]\",\n    selectLabel: \"pointer-events-none absolute top-0 left-3 mb-0 max-w-[90%] origin-[0_0] truncate text-gray-500 transition-all duration-200 ease-out peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-gray-200 dark:peer-focus:text-gray-200 data-[te-input-state-active]:scale-[0.8] dark:peer-focus:text-primary\",\n    selectLabelWhite: \"!text-gray-50\",\n    selectLabelSizeDefault: \"pt-[0.37rem] leading-[1.6] peer-focus:-translate-y-[0.9rem] peer-data-[te-input-state-active]:-translate-y-[0.9rem] data-[te-input-state-active]:-translate-y-[0.9rem]\",\n    selectLabelSizeLg: \"pt-[0.37rem] leading-[2.15] peer-focus:-translate-y-[1.15rem] peer-data-[te-input-state-active]:-translate-y-[1.15rem] data-[te-input-state-active]:-translate-y-[1.15rem]\",\n    selectLabelSizeSm: \"pt-[0.37rem] text-xs leading-[1.5] peer-focus:-translate-y-[0.75rem] peer-data-[te-input-state-active]:-translate-y-[0.75rem] data-[te-input-state-active]:-translate-y-[0.75rem]\",\n    selectOption: \"flex flex-row items-center justify-between w-full px-4 truncate text-gray-700 bg-transparent select-none cursor-pointer data-[te-input-multiple-active]:bg-black/5 hover:[&:not([data-te-select-option-disabled])]:bg-black/5 data-[te-input-state-active]:bg-black/5 data-[te-select-option-selected]:data-[te-input-state-active]:bg-black/5 data-[te-select-selected]:data-[te-select-option-disabled]:cursor-default data-[te-select-selected]:data-[te-select-option-disabled]:text-gray-400 data-[te-select-selected]:data-[te-select-option-disabled]:bg-transparent data-[te-select-option-selected]:bg-black/[0.02] data-[te-select-option-disabled]:text-gray-400 data-[te-select-option-disabled]:cursor-default group-data-[te-select-option-group-ref]/opt:pl-7 dark:text-gray-200 dark:hover:[&:not([data-te-select-option-disabled])]:bg-white/30 dark:data-[te-input-state-active]:bg-white/30 dark:data-[te-select-option-selected]:data-[te-input-state-active]:bg-white/30 dark:data-[te-select-option-disabled]:text-gray-400 dark:data-[te-input-multiple-active]:bg-white/30\",\n    selectAllOption: \"\",\n    selectOptionGroup: \"group/opt\",\n    selectOptionGroupLabel: \"flex flex-row items-center w-full px-4 truncate bg-transparent text-black/50 select-none dark:text-gray-300\",\n    selectOptionIcon: \"w-7 h-7 rounded-full\",\n    selectOptionSecondaryText: \"block text-[0.8rem] text-gray-500 dark:text-gray-300\",\n    selectOptionText: \"group\",\n    selectValidationValid: \"hidden absolute -mt-3 w-auto text-sm text-green-600 cursor-pointer group-data-[te-was-validated]/validation:peer-valid:block\",\n    selectValidationInvalid: \"hidden absolute -mt-3 w-auto text-sm text-[rgb(220,76,100)] cursor-pointer group-data-[te-was-validated]/validation:peer-invalid:block\"\n}, Bb = {\n    dropdown: \"string\",\n    formCheckInput: \"string\",\n    formOutline: \"string\",\n    initialized: \"string\",\n    inputGroup: \"string\",\n    noResult: \"string\",\n    optionsList: \"string\",\n    optionsWrapper: \"string\",\n    optionsWrapperScrollbar: \"string\",\n    selectArrow: \"string\",\n    selectArrowDefault: \"string\",\n    selectArrowLg: \"string\",\n    selectArrowSm: \"string\",\n    selectClearBtn: \"string\",\n    selectClearBtnDefault: \"string\",\n    selectClearBtnLg: \"string\",\n    selectClearBtnSm: \"string\",\n    selectDropdownContainer: \"string\",\n    selectFakeValue: \"string\",\n    selectFilterInput: \"string\",\n    selectInput: \"string\",\n    selectInputSizeDefault: \"string\",\n    selectInputSizeLg: \"string\",\n    selectInputSizeSm: \"string\",\n    selectLabel: \"string\",\n    selectLabelSizeDefault: \"string\",\n    selectLabelSizeLg: \"string\",\n    selectLabelSizeSm: \"string\",\n    selectOption: \"string\",\n    selectAllOption: \"string\",\n    selectOptionGroup: \"string\",\n    selectOptionGroupLabel: \"string\",\n    selectOptionIcon: \"string\",\n    selectOptionSecondaryText: \"string\",\n    selectOptionText: \"string\"\n};\nclass kr {\n    constructor(t, e, i){\n        this._element = t, this._config = this._getConfig(e), this._classes = this._getClasses(i), this._config.selectPlaceholder && !this._config.multiple && this._addPlaceholderOption(), this._optionsToRender = this._getOptionsToRender(t), this._plainOptions = this._getPlainOptions(this._optionsToRender), this._filteredOptionsList = null, this._selectionModel = new Ug(this.multiple), this._activeOptionIndex = -1, this._activeOption = null, this._wrapperId = et(\"select-wrapper-\"), this._dropdownContainerId = et(\"select-dropdown-container-\"), this._selectAllId = et(\"select-all-\"), this._debounceTimeoutId = null, this._dropdownHeight = this._config.selectOptionHeight * this._config.selectVisibleOptions, this._popper = null, this._input = null, this._label = d.next(this._element, kb)[0], this._notch = null, this._fakeValue = null, this._isFakeValueActive = !1, this._customContent = d.next(t, $b)[0], this._toggleButton = null, this._elementToggle = null, this._wrapper = null, this._inputEl = null, this._dropdownContainer = null, this._container = null, this._selectAllOption = null, this._init(), this._mutationObserver = null, this._isOpen = !1, this._addMutationObserver(), this._element && A.setData(t, yi, this);\n    }\n    static get NAME() {\n        return mo;\n    }\n    get filterInput() {\n        return d.findOne(xb, this._dropdownContainer);\n    }\n    get dropdown() {\n        return d.findOne(Ob, this._dropdownContainer);\n    }\n    get optionsList() {\n        return d.findOne(wl, this._dropdownContainer);\n    }\n    get optionsWrapper() {\n        return d.findOne(Sb, this._dropdownContainer);\n    }\n    get clearButton() {\n        return d.findOne(Db, this._wrapper);\n    }\n    get options() {\n        return this._filteredOptionsList ? this._filteredOptionsList : this._plainOptions;\n    }\n    get value() {\n        return this.multiple ? this._selectionModel.values : this._selectionModel.value;\n    }\n    get multiple() {\n        return this._config.multiple;\n    }\n    get hasSelectAll() {\n        return this.multiple && this._config.selectAll;\n    }\n    get hasSelection() {\n        return this._selectionModel.selection || this._selectionModel.selections.length > 0;\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...Mb,\n            ...e,\n            ...t\n        }, this._element.hasAttribute(\"multiple\") && (t.multiple = !0), this._element.hasAttribute(\"disabled\") && (t.disabled = !0), this._element.tabIndex && (t.tabIndex = this._element.getAttribute(\"tabIndex\")), I(mo, t, Rb), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...Pb,\n            ...e,\n            ...t\n        }, I(mo, t, Bb), t;\n    }\n    _addPlaceholderOption() {\n        const t = new Option(\"\", \"\", !0, !0);\n        t.hidden = !0, t.selected = !0, this._element.prepend(t);\n    }\n    _getOptionsToRender(t) {\n        const e = [];\n        return t.childNodes.forEach((n)=>{\n            if (n.nodeName === \"OPTGROUP\") {\n                const o = {\n                    id: et(\"group-\"),\n                    label: n.label,\n                    disabled: n.hasAttribute(\"disabled\"),\n                    hidden: n.hasAttribute(\"hidden\"),\n                    options: []\n                };\n                n.childNodes.forEach((a)=>{\n                    a.nodeName === \"OPTION\" && o.options.push(this._createOptionObject(a, o));\n                }), e.push(o);\n            } else n.nodeName === \"OPTION\" && e.push(this._createOptionObject(n));\n        }), e;\n    }\n    _getPlainOptions(t) {\n        if (!d.findOne(\"optgroup\", this._element)) return t;\n        const i = [];\n        return t.forEach((n)=>{\n            Object.prototype.hasOwnProperty.call(n, \"options\") ? n.options.forEach((r)=>{\n                i.push(r);\n            }) : i.push(n);\n        }), i;\n    }\n    _createOptionObject(t, e = {}) {\n        const i = et(\"option-\"), n = e.id ? e.id : null, o = e.disabled ? e.disabled : !1, r = t.selected || t.hasAttribute(bi), a = t.hasAttribute(\"disabled\") || o, l = t.hasAttribute(\"hidden\") || e && e.hidden, p = this.multiple, u = t.value, _ = t.label, f = h.getDataAttribute(t, \"selectSecondaryText\"), g = h.getDataAttribute(t, \"select-icon\");\n        return new bl(i, t, p, u, _, r, a, l, f, n, g);\n    }\n    _getNavigationOptions() {\n        const t = this.options.filter((e)=>!e.hidden);\n        return this.hasSelectAll ? [\n            this._selectAllOption,\n            ...t\n        ] : t;\n    }\n    _init() {\n        this._renderMaterialWrapper(), this._wrapper = d.findOne(`#${this._wrapperId}`), this._input = d.findOne(yl, this._wrapper), this._config.disabled && this._input.setAttribute(go, \"\");\n        const t = this._config.selectContainer;\n        t === \"body\" ? this._container = document.body : this._container = d.findOne(t), this._initOutlineInput(), this._setDefaultSelections(), this._updateInputValue(), this._appendFakeValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._bindComponentEvents(), this.hasSelectAll && (this._selectAllOption = this._createSelectAllOption()), this._dropdownContainer = vl(this._dropdownContainerId, this._config, this._input.offsetWidth, this._dropdownHeight, this._selectAllOption, this._optionsToRender, this._customContent, this._classes), this._setFirstActiveOption(), this._listenToFocusChange();\n    }\n    _renderMaterialWrapper() {\n        const t = hb(this._wrapperId, this._config, this._label, this._classes, this._config.customArrow);\n        this._element.parentNode.insertBefore(t, this._element), h.addClass(this._element, this._classes.initialized), t.appendChild(this._element);\n    }\n    _initOutlineInput() {\n        const t = d.findOne(kl, this._wrapper);\n        new V(t, {\n            inputFormWhite: this._config.selectFormWhite\n        }, this._classes).init(), this._notch = d.findOne(bo, this._wrapper);\n    }\n    _bindComponentEvents() {\n        this._listenToComponentKeydown(), this._listenToWrapperClick(), this._listenToClearBtnClick(), this._listenToClearBtnKeydown();\n    }\n    _setDefaultSelections() {\n        this.options.forEach((t)=>{\n            t.selected && this._selectionModel.select(t);\n        });\n    }\n    _listenToComponentKeydown() {\n        c.on(this._wrapper, \"keydown\", this._handleKeydown.bind(this));\n    }\n    _handleKeydown(t) {\n        this._isOpen && !this._config.selectFilter ? this._handleOpenKeydown(t) : this._handleClosedKeydown(t);\n    }\n    _handleOpenKeydown(t) {\n        const e = t.keyCode, i = e === we || e === U && t.altKey || e === ke;\n        if (e === ke && this._config.selectAutoSelect && !this.multiple && this._handleAutoSelection(this._activeOption), i) {\n            this.close(), this._input.focus();\n            return;\n        }\n        switch(e){\n            case z:\n                this._setNextOptionActive(), this._scrollToOption(this._activeOption);\n                break;\n            case U:\n                this._setPreviousOptionActive(), this._scrollToOption(this._activeOption);\n                break;\n            case Te:\n                this._setFirstOptionActive(), this._scrollToOption(this._activeOption);\n                break;\n            case Ee:\n                this._setLastOptionActive(), this._scrollToOption(this._activeOption);\n                break;\n            case it:\n                t.preventDefault(), this._activeOption && (this.hasSelectAll && this._activeOptionIndex === 0 ? this._handleSelectAll() : this._handleSelection(this._activeOption));\n                return;\n            default:\n                return;\n        }\n        t.preventDefault();\n    }\n    _handleClosedKeydown(t) {\n        const e = t.keyCode;\n        if (e === it && t.preventDefault(), (e === it || e === z && t.altKey || e === z && this.multiple) && this.open(), this.multiple) switch(e){\n            case z:\n                this.open();\n                break;\n            case U:\n                this.open();\n                break;\n            default:\n                return;\n        }\n        else switch(e){\n            case z:\n                this._setNextOptionActive(), this._handleSelection(this._activeOption);\n                break;\n            case U:\n                this._setPreviousOptionActive(), this._handleSelection(this._activeOption);\n                break;\n            case Te:\n                this._setFirstOptionActive(), this._handleSelection(this._activeOption);\n                break;\n            case Ee:\n                this._setLastOptionActive(), this._handleSelection(this._activeOption);\n                break;\n            default:\n                return;\n        }\n        t.preventDefault();\n    }\n    _scrollToOption(t) {\n        if (!t) return;\n        let e;\n        const i = this.options.filter((u)=>!u.hidden);\n        this.hasSelectAll ? e = i.indexOf(t) + 1 : e = i.indexOf(t);\n        const n = this._getNumberOfGroupsBeforeOption(e), o = e + n, r = this.optionsWrapper, a = r.offsetHeight, l = this._config.selectOptionHeight, p = r.scrollTop;\n        if (e > -1) {\n            const u = o * l, _ = u + l > p + a;\n            u < p ? r.scrollTop = u : _ ? r.scrollTop = u - a + l : r.scrollTop = p;\n        }\n    }\n    _getNumberOfGroupsBeforeOption(t) {\n        const e = this.options.filter((r)=>!r.hidden), i = this._optionsToRender.filter((r)=>!r.hidden), n = this.hasSelectAll ? t - 1 : t;\n        let o = 0;\n        for(let r = 0; r <= n; r++)e[r].groupId && i[o] && i[o].id && e[r].groupId === i[o].id && o++;\n        return o;\n    }\n    _setNextOptionActive() {\n        let t = this._activeOptionIndex + 1;\n        const e = this._getNavigationOptions();\n        if (e[t]) {\n            for(; e[t].disabled;)if (t += 1, !e[t]) return;\n            this._updateActiveOption(e[t], t);\n        }\n    }\n    _setPreviousOptionActive() {\n        let t = this._activeOptionIndex - 1;\n        const e = this._getNavigationOptions();\n        if (e[t]) {\n            for(; e[t].disabled;)if (t -= 1, !e[t]) return;\n            this._updateActiveOption(e[t], t);\n        }\n    }\n    _setFirstOptionActive() {\n        const e = this._getNavigationOptions();\n        this._updateActiveOption(e[0], 0);\n    }\n    _setLastOptionActive() {\n        const t = this._getNavigationOptions(), e = t.length - 1;\n        this._updateActiveOption(t[e], e);\n    }\n    _updateActiveOption(t, e) {\n        const i = this._activeOption;\n        i && i.removeActiveStyles(), t.setActiveStyles(), this._activeOptionIndex = e, this._activeOption = t;\n    }\n    _listenToWrapperClick() {\n        c.on(this._wrapper, \"click\", ()=>{\n            this.toggle();\n        });\n    }\n    _listenToClearBtnClick() {\n        c.on(this.clearButton, \"click\", (t)=>{\n            t.preventDefault(), t.stopPropagation(), this._handleClear();\n        });\n    }\n    _listenToClearBtnKeydown() {\n        c.on(this.clearButton, \"keydown\", (t)=>{\n            t.keyCode === it && (this._handleClear(), t.preventDefault(), t.stopPropagation());\n        });\n    }\n    _handleClear() {\n        if (this.multiple) this._selectionModel.clear(), this._deselectAllOptions(this.options), this.hasSelectAll && this._updateSelectAllState();\n        else {\n            const t = this._selectionModel.selection;\n            this._selectionModel.clear(), t.deselect();\n        }\n        this._fakeValue.textContent = \"\", this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._emitValueChangeEvent(null), this._emitNativeChangeEvent();\n    }\n    _listenToOptionsClick() {\n        c.on(this.optionsWrapper, \"click\", (t)=>{\n            if (t.target.hasAttribute(yb)) return;\n            const i = t.target.nodeName === \"DIV\" ? t.target : d.closest(t.target, Ib);\n            if (i.hasAttribute(wb)) {\n                this._handleSelectAll();\n                return;\n            }\n            const o = i.dataset.teId, r = this.options.find((a)=>a.id === o);\n            r && !r.disabled && this._handleSelection(r);\n        });\n    }\n    _handleSelectAll() {\n        this._selectAllOption.selected ? (this._deselectAllOptions(this.options), this._selectAllOption.deselect()) : (this._selectAllOptions(this.options), this._selectAllOption.select()), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent();\n    }\n    _selectAllOptions(t) {\n        t.forEach((e)=>{\n            !e.selected && !e.disabled && (this._selectionModel.select(e), e.select());\n        });\n    }\n    _deselectAllOptions(t) {\n        t.forEach((e)=>{\n            e.selected && !e.disabled && (this._selectionModel.deselect(e), e.deselect());\n        });\n    }\n    _handleSelection(t) {\n        this.multiple ? (this._handleMultiSelection(t), this.hasSelectAll && this._updateSelectAllState()) : this._handleSingleSelection(t), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility();\n    }\n    _handleAutoSelection(t) {\n        this._singleOptionSelect(t), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility();\n    }\n    _handleSingleSelection(t) {\n        this._singleOptionSelect(t), this.close(), this._input.focus();\n    }\n    _singleOptionSelect(t) {\n        const e = this._selectionModel.selections[0];\n        e && e !== t && (this._selectionModel.deselect(e), e.deselect(), e.node.setAttribute(bi, !1), c.trigger(this._element, El, {\n            value: e.value\n        })), (!e || e && t !== e) && (this._selectionModel.select(t), t.select(), t.node.setAttribute(bi, !0), c.trigger(this._element, Tl, {\n            value: t.value\n        }), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent());\n    }\n    _handleMultiSelection(t) {\n        t.selected ? (this._selectionModel.deselect(t), t.deselect(), t.node.setAttribute(bi, !1), c.trigger(this._element, El, {\n            value: t.value\n        })) : (this._selectionModel.select(t), t.select(), t.node.setAttribute(bi, !0), c.trigger(this._element, Tl, {\n            value: t.value\n        })), this._emitValueChangeEvent(this.value), this._emitNativeChangeEvent();\n    }\n    _emitValueChangeEvent(t) {\n        c.trigger(this._element, Cb, {\n            value: t\n        });\n    }\n    _emitNativeChangeEvent() {\n        c.trigger(this._element, Ab);\n    }\n    _updateInputValue() {\n        const t = this.multiple ? this._selectionModel.labels : this._selectionModel.label;\n        let e;\n        this.multiple && this._config.selectDisplayedLabels !== -1 && this._selectionModel.selections.length > this._config.selectDisplayedLabels ? e = `${this._selectionModel.selections.length} ${this._config.selectOptionsSelectedLabel}` : e = t, !this.multiple && !this._isSelectionValid(this._selectionModel.selection) ? this._input.value = \"\" : this._isLabelEmpty(this._selectionModel.selection) ? this._input.value = \" \" : e ? this._input.value = e : this.multiple || !this._optionsToRender[0] ? this._input.value = \"\" : this._input.value = this._optionsToRender[0].label;\n    }\n    _isSelectionValid(t) {\n        return !(t && (t.disabled || t.value === \"\"));\n    }\n    _isLabelEmpty(t) {\n        return !!(t && t.label === \"\");\n    }\n    _appendFakeValue() {\n        if (!this._selectionModel.selection || this._selectionModel._multiple) return;\n        const t = this._selectionModel.selection.label;\n        this._fakeValue = vb(t, this._classes), d.findOne(kl, this._wrapper).appendChild(this._fakeValue);\n    }\n    _updateLabelPosition() {\n        const t = this._element.hasAttribute(Cl), e = this._input.value !== \"\";\n        this._label && (t && (e || this._isOpen || this._isFakeValueActive) ? (this._label.setAttribute(J, \"\"), this._notch.setAttribute(J, \"\")) : (this._label.removeAttribute(J), this._notch.removeAttribute(J, \"\")));\n    }\n    _updateLabelPositionWhileClosing() {\n        this._label && (this._input.value !== \"\" || this._isFakeValueActive ? (this._label.setAttribute(J, \"\"), this._notch.setAttribute(J, \"\")) : (this._label.removeAttribute(J), this._notch.removeAttribute(J)));\n    }\n    _updateFakeLabelPosition() {\n        this._fakeValue && (this._input.value === \"\" && this._fakeValue.innerHTML !== \"\" && !this._config.selectPlaceholder ? (this._isFakeValueActive = !0, this._fakeValue.setAttribute(J, \"\")) : (this._isFakeValueActive = !1, this._fakeValue.removeAttribute(J)));\n    }\n    _updateClearButtonVisibility() {\n        if (!this.clearButton) return;\n        this._selectionModel.selection || this._selectionModel.selections.length > 0 ? h.addStyle(this.clearButton, {\n            display: \"block\"\n        }) : h.addStyle(this.clearButton, {\n            display: \"none\"\n        });\n    }\n    _updateSelectAllState() {\n        const t = this._selectAllOption.selected, e = Qo(this.options);\n        !e && t ? this._selectAllOption.deselect() : e && !t && this._selectAllOption.select();\n    }\n    toggle() {\n        this._isOpen ? this.close() : this.open();\n    }\n    open() {\n        const t = this._config.disabled, e = c.trigger(this._element, Eb);\n        this._isOpen || t || e.defaultPrevented || (this._openDropdown(), this._updateDropdownWidth(), this._setFirstActiveOption(), this._scrollToOption(this._activeOption), this._config.selectFilter && (setTimeout(()=>{\n            this.filterInput.focus();\n        }, 0), this._listenToSelectSearch(), this._listenToDropdownKeydown()), this._listenToOptionsClick(), this._listenToOutsideClick(), this._listenToWindowResize(), this._isOpen = !0, this._updateLabelPosition(), this._setInputActiveStyles());\n    }\n    _openDropdown() {\n        this._popper = se(this._input, this._dropdownContainer, {\n            placement: \"bottom-start\",\n            modifiers: [\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: [\n                            0,\n                            1\n                        ]\n                    }\n                }\n            ]\n        }), this._container.appendChild(this._dropdownContainer), setTimeout(()=>{\n            this.dropdown.setAttribute(Al, \"\");\n        }, 0);\n    }\n    _updateDropdownWidth() {\n        const t = this._input.offsetWidth;\n        h.addStyle(this._dropdownContainer, {\n            width: `${t}px`\n        });\n    }\n    _setFirstActiveOption() {\n        const t = this._getNavigationOptions(), e = this._activeOption;\n        e && e.removeActiveStyles();\n        const i = this.multiple ? this._selectionModel.selections[0] : this._selectionModel.selection;\n        i ? (this._activeOption = i, i.setActiveStyles(), this._activeOptionIndex = t.findIndex((n)=>n === i)) : (this._activeOption = null, this._activeOptionIndex = -1);\n    }\n    _setInputActiveStyles() {\n        this._input.setAttribute(zt, \"\"), d.findOne(bo, this._wrapper).setAttribute(zt, \"\");\n    }\n    _listenToWindowResize() {\n        c.on(window, \"resize\", this._handleWindowResize.bind(this));\n    }\n    _handleWindowResize() {\n        this._dropdownContainer && this._updateDropdownWidth();\n    }\n    _listenToSelectSearch() {\n        this.filterInput.addEventListener(\"input\", (t)=>{\n            const e = t.target.value, i = this._config.selectFilterDebounce;\n            this._debounceFilter(e, i);\n        });\n    }\n    _debounceFilter(t, e) {\n        this._debounceTimeoutId && clearTimeout(this._debounceTimeoutId), this._debounceTimeoutId = setTimeout(()=>{\n            this._filterOptions(t);\n        }, e);\n    }\n    _filterOptions(t) {\n        const e = [];\n        this._optionsToRender.forEach((o)=>{\n            const r = Object.prototype.hasOwnProperty.call(o, \"options\"), a = !r && o.label.toLowerCase().includes(t.toLowerCase()), l = {};\n            r && (l.label = o.label, l.options = this._filter(t, o.options), l.options.length > 0 && e.push(l)), a && e.push(o);\n        });\n        const i = this._config.selectNoResultText !== \"\", n = e.length !== 0;\n        if (n) this._updateOptionsListTemplate(e), this._popper.forceUpdate(), this._filteredOptionsList = this._getPlainOptions(e), this.hasSelectAll && this._updateSelectAllState(), this._setFirstActiveOption();\n        else if (!n && i) {\n            const o = this._getNoResultTemplate();\n            this.optionsWrapper.innerHTML = o;\n        }\n    }\n    _updateOptionsListTemplate(t) {\n        const e = d.findOne(wl, this._dropdownContainer) || d.findOne(Lb, this._dropdownContainer), i = Ah(t, this._selectAllOption, this._config, this._classes);\n        this.optionsWrapper.removeChild(e), this.optionsWrapper.appendChild(i);\n    }\n    _getNoResultTemplate() {\n        return `<div class=\"${this._classes.noResult}\" ${xh} style=\"height: ${this._config.selectOptionHeight}px\">${this._config.selectNoResultText}</div>`;\n    }\n    _filter(t, e) {\n        const i = t.toLowerCase();\n        return e.filter((n)=>n.label.toLowerCase().includes(i));\n    }\n    _listenToDropdownKeydown() {\n        c.on(this.dropdown, \"keydown\", this._handleOpenKeydown.bind(this));\n    }\n    _listenToOutsideClick() {\n        this._outsideClick = this._handleOutSideClick.bind(this), c.on(document, \"click\", this._outsideClick);\n    }\n    _listenToFocusChange(t = !0) {\n        if (t === !1) {\n            c.off(this._input, \"focus\", ()=>this._notch.setAttribute(zt, \"\")), c.off(this._input, \"blur\", ()=>this._notch.removeAttribute(zt));\n            return;\n        }\n        c.on(this._input, \"focus\", ()=>this._notch.setAttribute(zt, \"\")), c.on(this._input, \"blur\", ()=>this._notch.removeAttribute(zt));\n    }\n    _handleOutSideClick(t) {\n        const e = this._wrapper && this._wrapper.contains(t.target), i = t.target === this._dropdownContainer, n = this._dropdownContainer && this._dropdownContainer.contains(t.target);\n        let o;\n        this._toggleButton || (this._elementToggle = d.find(Nb)), this._elementToggle && this._elementToggle.forEach((r)=>{\n            const a = h.getDataAttribute(r, \"select-toggle\");\n            (a === this._element.id || this._element.classList.contains(a)) && (this._toggleButton = r, o = this._toggleButton.contains(t.target));\n        }), !e && !i && !n && !o && this.close();\n    }\n    close() {\n        const t = c.trigger(this._element, Tb), e = cn(this._dropdownContainer.children[0]);\n        !this._isOpen || t.defaultPrevented || (this._config.selectFilter && this.hasSelectAll && (this._resetFilterState(), this._updateOptionsListTemplate(this._optionsToRender), this._config.multiple && this._updateSelectAllState()), this._removeDropdownEvents(), this.dropdown.removeAttribute(Al), setTimeout(()=>{\n            this._input.removeAttribute(zt), this._input.blur(), d.findOne(bo, this._wrapper).removeAttribute(zt), this._label && !this.hasSelection && (this._label.removeAttribute(J), this._notch.setAttribute(J, \"\"), this._input.removeAttribute(J), this._notch.removeAttribute(J)), this._updateLabelPositionWhileClosing();\n        }, 0), setTimeout(()=>{\n            this._container && this._dropdownContainer.parentNode === this._container && this._container.removeChild(this._dropdownContainer), this._popper.destroy(), this._isOpen = !1, c.off(this.dropdown, \"transitionend\");\n        }, e));\n    }\n    _resetFilterState() {\n        this.filterInput.value = \"\", this._filteredOptionsList = null;\n    }\n    _removeDropdownEvents() {\n        c.off(document, \"click\", this._outsideClick), this._config.selectFilter && c.off(this.dropdown, \"keydown\"), c.off(this.optionsWrapper, \"click\");\n    }\n    _addMutationObserver() {\n        this._mutationObserver = new MutationObserver(()=>{\n            this._wrapper && (this._updateSelections(), this._updateDisabledState());\n        }), this._observeMutationObserver();\n    }\n    _updateSelections() {\n        this._optionsToRender = this._getOptionsToRender(this._element), this._plainOptions = this._getPlainOptions(this._optionsToRender), this._selectionModel.clear(), this._setDefaultSelections(), this._updateInputValue(), this._updateFakeLabelPosition(), this._updateLabelPosition(), this._updateClearButtonVisibility(), this.hasSelectAll && this._updateSelectAllState();\n        const t = this._config.filter && this.filterInput && this.filterInput.value;\n        this._isOpen && !t ? (this._updateOptionsListTemplate(this._optionsToRender), this._setFirstActiveOption()) : this._isOpen && t ? (this._filterOptions(this.filterInput.value), this._setFirstActiveOption()) : this._dropdownContainer = vl(this._dropdownContainerId, this._config, this._input.offsetWidth, this._dropdownHeight, this._selectAllOption, this._optionsToRender, this._customContent, this._classes);\n    }\n    _updateDisabledState() {\n        const t = d.findOne(yl, this._wrapper);\n        this._element.hasAttribute(\"disabled\") ? (this._config.disabled = !0, t.setAttribute(\"disabled\", \"\"), t.setAttribute(go, \"\")) : (this._config.disabled = !1, t.removeAttribute(\"disabled\"), t.removeAttribute(go));\n    }\n    _observeMutationObserver() {\n        this._mutationObserver && this._mutationObserver.observe(this._element, {\n            attributes: !0,\n            childList: !0,\n            characterData: !0,\n            subtree: !0\n        });\n    }\n    _disconnectMutationObserver() {\n        this.mutationObserver && (this._mutationObserver.disconnect(), this._mutationObserver = null);\n    }\n    _createSelectAllOption() {\n        const t = this._selectAllId, e = null, i = !0, n = \"select-all\", o = this._config.selectAllLabel, r = Qo(this.options), a = !1, l = !1, p = null, u = null, _ = null;\n        return new bl(t, e, i, n, o, r, a, l, p, u, _);\n    }\n    dispose() {\n        this._removeComponentEvents(), this._destroyMaterialSelect(), this._listenToFocusChange(!1), A.removeData(this._element, yi);\n    }\n    _removeComponentEvents() {\n        c.off(this.input, \"click\"), c.off(this.wrapper, this._handleKeydown.bind(this)), c.off(this.clearButton, \"click\"), c.off(this.clearButton, \"keydown\"), c.off(window, \"resize\", this._handleWindowResize.bind(this));\n    }\n    _destroyMaterialSelect() {\n        this._isOpen && this.close(), this._destroyMaterialTemplate();\n    }\n    _destroyMaterialTemplate() {\n        const t = this._wrapper.parentNode, e = d.find(\"label\", this._wrapper);\n        t.appendChild(this._element), e.forEach((i)=>{\n            t.appendChild(i);\n        }), e.forEach((i)=>{\n            i.removeAttribute(J);\n        }), h.removeClass(this._element, this._classes.initialized), this._element.removeAttribute(Cl), t.removeChild(this._wrapper);\n    }\n    setValue(t) {\n        this.options.filter((i)=>i.selected).forEach((i)=>i.nativeOption.selected = !1), Array.isArray(t) ? t.forEach((i)=>{\n            this._selectByValue(i);\n        }) : this._selectByValue(t), this._updateSelections(), this._emitValueChangeEvent(this.value);\n    }\n    _selectByValue(t) {\n        const e = this.options.find((i)=>i.value === t);\n        return e ? (e.nativeOption.selected = !0, !0) : !1;\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, yi);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new kr(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, yi);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Hb = ({ inputID: s, labelText: t }, e)=>`<div data-te-chips-input-wrapper data-te-input-wrapper-init class=\"${e.chipsInputWrapper}\">\n      <input\n          type=\"text\"\n          class=\"${e.chipsInput}\"\n          id=\"${s}\"\n          placeholder=\"Example label\" />\n        <label\n          for=\"${s}\"\n          class=\"${e.chipsLabel}\"\n          >${t}\n        </label>\n      </div>\n    </div>`, Vb = ({ text: s, iconSVG: t }, e)=>`<div data-te-chip-init data-te-ripple-init class=\"${e.chipElement}\">\n    <span data-te-chip-text>${s}</span> \n      <span data-te-chip-close class=\"${e.chipCloseIcon}\">\n        ${t}\n      </span>\n  </div>`, en = \"chip\", Wb = `te.${en}`, Oh = \"data-te-chip-close\", vo = `[${Oh}]`, Fb = \"delete.te.chips\", Yb = \"select.te.chip\", jb = '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-3 h-3\"> <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" /></svg>', Kb = {\n    text: \"string\",\n    closeIcon: \"boolean\",\n    img: \"object\",\n    iconSVG: \"string\"\n}, zb = {\n    text: \"\",\n    closeIcon: !1,\n    img: {\n        path: \"\",\n        alt: \"\"\n    },\n    iconSVG: jb\n}, Ub = {\n    icon: \"float-right pl-[8px] text-[16px] opacity-[.53] cursor-pointer fill-[#afafaf] hover:text-[#8b8b8b] transition-all duration-200 ease-in-out\",\n    chipElement: \"flex justify-between items-center h-[32px] leading-loose py-[5px] px-[12px] mr-4 my-[5px] text-[13px] font-normal text-[#4f4f4f] cursor-pointer bg-[#eceff1] dark:text-white dark:bg-neutral-600 rounded-[16px] transition-[opacity] duration-300 ease-linear [word-wrap: break-word] shadow-none normal-case hover:!shadow-none active:bg-[#cacfd1] inline-block font-medium leading-normal text-[#4f4f4f] text-center no-underline align-middle cursor-pointer select-none border-[.125rem] border-solid border-transparent py-1.5 px-3 text-xs rounded\",\n    chipCloseIcon: \"w-4 float-right pl-[8px] text-[16px] opacity-[.53] cursor-pointer fill-[#afafaf] hover:fill-[#8b8b8b] dark:fill-gray-400 dark:hover:fill-gray-100 transition-all duration-200 ease-in-out\"\n}, Xb = {\n    icon: \"string\",\n    chipElement: \"string\",\n    chipCloseIcon: \"string\"\n};\nclass vi {\n    constructor(t, e = {}, i){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i);\n    }\n    // Getters\n    static get NAME() {\n        return en;\n    }\n    // Public\n    init() {\n        this._appendCloseIcon(), this._handleDelete(), this._handleTextChip(), this._handleClickOnChip();\n    }\n    dispose() {\n        this._element = null, this._options = null, c.off(this._element, \"click\");\n    }\n    appendChip() {\n        const { text: t, closeIcon: e, iconSVG: i } = this._options;\n        return Vb({\n            text: t,\n            closeIcon: e,\n            iconSVG: i\n        }, this._classes);\n    }\n    // Private\n    _appendCloseIcon(t = this._element) {\n        if (!(d.find(vo, this._element).length > 0) && this._options.closeIcon) {\n            const e = $(\"span\");\n            e.classList = this._classes.icon, e.setAttribute(Oh), e.innerHTML = this._options.iconSVG, t.insertAdjacentElement(\"beforeend\", e);\n        }\n    }\n    _handleClickOnChip() {\n        c.on(this._element, \"click\", (t)=>{\n            const { textContent: e } = t.target, i = {};\n            i.tag = e.trim(), c.trigger(Yb, {\n                event: t,\n                obj: i\n            });\n        });\n    }\n    _handleDelete() {\n        d.find(vo, this._element).length !== 0 && c.on(this._element, \"click\", vo, ()=>{\n            c.trigger(this._element, Fb), this._element.remove();\n        });\n    }\n    _handleTextChip() {\n        this._element.innerText === \"\" && (this._element.innerText = this._options.text);\n    }\n    _getConfig(t) {\n        const e = {\n            ...zb,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(en, e, Kb), e;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...Ub,\n            ...e,\n            ...t\n        }, I(en, t, Xb), t;\n    }\n    static getInstance(t) {\n        return A.getData(t, Wb);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Hi = \"chips\", Gi = `data-te-${Hi}`, xl = `te.${Hi}`, Gb = `${Gi}-input-init`, bt = `${Gi}-active`, Ol = `${Gi}-initial`, Sh = `${Gi}-placeholder`, qb = `${Gi}-input-wrapper`, Jo = \"data-te-chip-init\", Ih = \"data-te-chip-close\", Dh = \"data-te-chip-text\", Zb = `[${bt}]`, tr = `[${Jo}]`, Qb = `${tr}${Zb}`, To = `[${Ih}]`, Jb = `[${qb}]`, tv = `[${Dh}]`, ev = `[${Sh}]`, iv = \"data-te-input-notch-leading-ref\", sv = \"data-te-input-notch-middle-ref\", nv = `[${iv}]`, ov = `[${sv}]`, Ne = \"data-te-input-state-active\", Eo = \"[data-te-input-notch-ref]\", rv = \"add.te.chips\", av = \"arrowDown.te.chips\", lv = \"arrowLeft.te.chips\", cv = \"arrowRight.te.chips\", hv = \"arrowUp.te.chips\", Sl = \"delete.te.chips\", Il = \"select.te.chips\", dv = {\n    inputID: \"string\",\n    parentSelector: \"string\",\n    initialValues: \"array\",\n    editable: \"boolean\",\n    labelText: \"string\",\n    inputClasses: \"object\",\n    inputOptions: \"object\"\n}, uv = {\n    inputID: et(\"chips-input-\"),\n    parentSelector: \"\",\n    initialValues: [\n        {\n            tag: \"init1\"\n        },\n        {\n            tag: \"init2\"\n        }\n    ],\n    editable: !1,\n    labelText: \"Example label\",\n    inputClasses: {},\n    inputOptions: {}\n}, pv = {\n    opacity: \"opacity-0\",\n    inputWrapperPadding: \"p-[5px]\",\n    transition: \"transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)]\",\n    contentEditable: \"outline-none !border-[3px] !border-solid !border-[#b2b3b4]\",\n    chipsInputWrapper: \"relative flex items-center flex-wrap transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)]\",\n    chipsInput: \"peer block min-h-[auto] w-[150px] rounded border-0 bg-transparent py-[0.32rem] px-3 leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-gray-200 dark:placeholder:text-gray-200 [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0\",\n    chipsLabel: \"pointer-events-none absolute top-0 left-3 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-gray-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-gray-200 dark:peer-focus:text-gray-200\"\n}, _v = {\n    opacity: \"string\",\n    inputWrapperPadding: \"string\",\n    transition: \"string\",\n    contentEditable: \"string\",\n    chipsInputWrapper: \"string\",\n    chipsInput: \"string\",\n    chipsLabel: \"string\"\n};\nclass XA extends vi {\n    constructor(e, i = {}, n){\n        super(e, i);\n        wt(this, \"_handleBlurInput\", ({ target: e })=>{\n            e.value.length > 0 && this._handleCreateChip(e, e.value), this.allChips.length > 0 ? (e.setAttribute(bt, \"\"), this.input.setAttribute(Ne, \"\"), d.findOne(Eo, this.input.parentNode).setAttribute(Ne, \"\"), this.chipsInputWrapper.classList.add(...this._classes.inputWrapperPadding.split(\" \"))) : (e.removeAttribute(bt), this.input.removeAttribute(Ne), d.findOne(Eo, this.input.parentNode).removeAttribute(Ne), this.chipsInputWrapper.classList.remove(...this._classes.inputWrapperPadding.split(\" \"))), this.allChips.forEach((i)=>i.removeAttribute(bt));\n        });\n        this._element = e, this._inputInstance = null, this._element && A.setData(e, xl, this), this._options = this._getConfig(i), this._classes = this._getClasses(n), this.numberClicks = 0, this.init();\n    }\n    // Getters\n    static get NAME() {\n        return Hi;\n    }\n    get activeChip() {\n        return d.findOne(Qb, this._element);\n    }\n    get input() {\n        return d.findOne(\"input\", this._element);\n    }\n    get allChips() {\n        return d.find(tr, this._element);\n    }\n    get chipsInputWrapper() {\n        return d.findOne(Jb, this._element);\n    }\n    // Public\n    init() {\n        this._setChipsClass(), this._appendInputToElement(Sh), this._handleInitialValue(), this._handleInputText(), this._handleKeyboard(), this._handleChipsOnSelect(), this._handleEditable(), this._handleChipsFocus(), this._handleClicksOnChips(), this._inputInstance._getLabelWidth(), this._inputInstance._applyNotch();\n    }\n    dispose() {\n        this._element = null, this._options = null;\n    }\n    // Private\n    _getNotchData() {\n        this._notchMiddle = d.findOne(ov, this._element), this._notchLeading = d.findOne(nv, this._element);\n    }\n    _setChipsClass() {\n        this._element.setAttribute(Gb, \"\");\n    }\n    _handleDeleteEvents(e) {\n        const [i] = this.allChips.slice(-1);\n        if (this.activeChip === null) i.remove(), this._handleEvents(e, Sl);\n        else {\n            const n = this.allChips.findIndex((a)=>a === this.activeChip), o = this._handleActiveChipAfterRemove(n), r = [];\n            if (this.activeChip === null) return;\n            this.activeChip.remove(), this._handleEvents(e, Sl), this.numberClicks = n, o.setAttribute(bt, \"\"), this.allChips.forEach((a)=>{\n                a.hasAttribute(bt) && (r.push(a), r.length > 1 && this.allChips.forEach((l)=>l.remove()));\n            });\n        }\n    }\n    _handleUpEvents(e) {\n        this.numberClicks += 1, this.numberClicks === this.allChips.length + 1 && (this.numberClicks = 0), this._handleRightKeyboardArrow(this.numberClicks), this._handleEvents(e, cv), this._handleEvents(e, hv);\n    }\n    _handleDownEvents(e) {\n        this.numberClicks -= 1, this.numberClicks <= 0 && (this.numberClicks = this.allChips.length), this._handleLeftKeyboardArrow(this.numberClicks), this._handleEvents(e, lv), this._handleEvents(e, av);\n    }\n    _keyboardEvents(e) {\n        const { target: i, keyCode: n, ctrlKey: o } = e;\n        i.value.length > 0 || this.allChips.length === 0 || (n === om || n === rm ? this._handleDeleteEvents(e) : n === ze || n === U ? this._handleUpEvents(e) : n === Ke || n === z ? this._handleDownEvents(e) : n === 65 && o && this._handleAddActiveClass());\n    }\n    _handleKeyboard() {\n        c.on(this.input, \"keydown\", (e)=>this._keyboardEvents(e));\n    }\n    _handleEditable() {\n        const { editable: e } = this._options;\n        e && this.allChips.forEach((i)=>{\n            c.on(i, \"dblclick\", (n)=>{\n                const o = d.findOne(To, i);\n                i.classList.add(...this._classes.contentEditable.split(\" \")), i.contentEditable = !0, i.focus(), setTimeout(()=>{\n                    h.addStyle(o, {\n                        display: \"none\"\n                    });\n                }, 200), o.classList.add(...this._classes.opacity.split(\" \")), n.target.textContent, c.trigger(i, Il, {\n                    event: n,\n                    allChips: this.allChips\n                });\n            }), c.on(document, \"click\", ({ target: n })=>{\n                const o = d.findOne(To, i), r = d.findOne(tv, i), a = n === i, l = i && i.contains(n);\n                !a && !l && (i.contentEditable = !1, i.classList.remove(...this._classes.contentEditable.split(\" \")), r.textContent !== \"\" && setTimeout(()=>{\n                    h.addStyle(o, {\n                        display: \"block\"\n                    }), o.classList.remove(...this._classes.opacity.split(\" \"));\n                }, 160)), r.textContent === \"\" && (setTimeout(()=>{\n                    i.classList.add(...this._classes.opacity.split(\" \"));\n                }, 200), setTimeout(()=>{\n                    i.remove();\n                }, 300));\n            });\n        });\n    }\n    _handleRemoveActiveClass() {\n        this.allChips.forEach((e)=>e.removeAttribute(bt));\n    }\n    _handleAddActiveClass() {\n        this.allChips.forEach((e)=>e.setAttribute(bt, \"\"));\n    }\n    _handleRightKeyboardArrow(e) {\n        this._handleRemoveActiveClass(), e === 0 && (e = 1), this._handleAddActiveClassWithKebyboard(e);\n    }\n    _handleLeftKeyboardArrow(e) {\n        this._handleRemoveActiveClass(), this._handleAddActiveClassWithKebyboard(e);\n    }\n    _handleActiveChipAfterRemove(e) {\n        const i = e === 0 ? 1 : e - 1;\n        return this.allChips[i];\n    }\n    _handleClicksOnChips() {\n        c.on(this._element, \"click\", ()=>{\n            this.allChips.length === 0 && (this.chipsInputWrapper.classList.remove(...this._classes.inputWrapperPadding.split(\" \")), this.input.removeAttribute(bt));\n        });\n    }\n    _handleTextContent() {\n        const e = [];\n        return this.allChips.forEach((i)=>e.push({\n                tag: i.textContent.trim()\n            })), e;\n    }\n    _handleEvents(e, i) {\n        const n = this._handleTextContent(), o = this.allChips.filter((r)=>r.hasAttribute(bt) && r);\n        c.trigger(this._element, i, {\n            event: e,\n            allChips: this.allChips,\n            arrOfObjects: n,\n            active: o,\n            activeObj: {\n                tag: o.length <= 0 ? \"\" : o[0].textContent.trim()\n            }\n        });\n    }\n    _handleChipsFocus() {\n        c.on(this._element, \"click\", ({ target: { attributes: e } })=>{\n            const i = [\n                ...e\n            ].map((n)=>n.name);\n            i.includes(Jo) || i.includes(Ih) || i.includes(Dh) || this.input.focus();\n        });\n    }\n    _handleInitialValue() {\n        if (this._appendInputToElement(Ol), this._element.hasAttribute(Ol)) {\n            const { initialValues: e } = this._options;\n            e.forEach(({ tag: i })=>this._handleCreateChip(this.input, i)), d.findOne(Eo, this.input.parentNode).setAttribute(Ne, \"\"), this.input.setAttribute(bt, \"\"), this.input.setAttribute(Ne, \"\");\n        }\n        this.allChips.length > 0 && (this.chipsInputWrapper.classList.add(...this._classes.inputWrapperPadding.split(\" \")), this.chipsInputWrapper.classList.add(...this._classes.transition.split(\" \")));\n    }\n    _handleKeysInputToElement(e) {\n        const { keyCode: i, target: n } = e;\n        if (n.hasAttribute(Jo)) {\n            const o = d.findOne(To, n);\n            i === it && (n.contentEditable = !1, n.classList.remove(...this._classes.contentEditable.split(\" \")), n.textContent !== \"\" ? setTimeout(()=>{\n                h.addStyle(o, {\n                    display: \"block\"\n                }), o.classList.remove(...this._classes.opacity.split(\" \"));\n            }, 160) : n.textContent === \"\" && (setTimeout(()=>{\n                n.classList.add(...this._classes.opacity.split(\" \"));\n            }, 200), setTimeout(()=>{\n                n.remove();\n            }, 300)));\n            return;\n        }\n        if (i === it) {\n            if (n.value === \"\") return;\n            this._handleCreateChip(n, n.value), this._handleRemoveActiveClass(), this.numberClicks = this.allChips.length + 1, this._handleEvents(e, rv);\n        }\n        this.allChips.length > 0 ? (this.chipsInputWrapper.classList.add(...this._classes.inputWrapperPadding.split(\" \")), this.chipsInputWrapper.classList.add(...this._classes.transition.split(\" \"))) : this.chipsInputWrapper.classList.remove(...this._classes.inputWrapperPadding.split(\" \"));\n    }\n    _handleInputText() {\n        const e = d.findOne(ev, this._element);\n        c.on(this._element, \"keyup\", e, (i)=>this._handleKeysInputToElement(i)), c.on(this.input, \"blur\", (i)=>this._handleBlurInput(i));\n    }\n    _appendInputToElement(e) {\n        if (!this._element.hasAttribute(e)) return;\n        const i = Hb(this._options, this._classes);\n        this._element.insertAdjacentHTML(\"beforeend\", i);\n        const n = d.findOne(\"[data-te-chips-input-wrapper]\", this._element);\n        this._inputInstance = new V(n, this._options.inputOptions, this._options.inputClasses);\n    }\n    _handleCreateChip(e, i) {\n        const n = $(\"div\"), o = vi.getInstance(n), r = new vi(o, {\n            text: i\n        }, this._classes);\n        this._options.parentSelector !== \"\" ? document.querySelector(this._options.parentSelector).insertAdjacentHTML(\"beforeend\", r.appendChip()) : e.insertAdjacentHTML(\"beforebegin\", r.appendChip()), e.value = \"\", d.find(tr).forEach((a)=>{\n            let l = vi.getInstance(a);\n            return l || (l = new vi(a, {}, this._classes)), l.init();\n        }), this._handleEditable();\n    }\n    _handleChipsOnSelect() {\n        this.allChips.forEach((e)=>{\n            c.on(this._element, \"click\", (i)=>{\n                c.trigger(e, Il, {\n                    event: i,\n                    allChips: this.allChips\n                });\n            });\n        });\n    }\n    _handleAddActiveClassWithKebyboard(e) {\n        let i;\n        this.allChips[e - 1] === void 0 ? i = this.allChips[e - 2] : i = this.allChips[e - 1], i.setAttribute(bt);\n    }\n    _getConfig(e) {\n        const i = {\n            ...uv,\n            ...h.getDataAttributes(this._element),\n            ...e\n        };\n        return I(Hi, i, dv), i;\n    }\n    _getClasses(e) {\n        const i = h.getDataClassAttributes(this._element);\n        return e = {\n            ...pv,\n            ...i,\n            ...e\n        }, I(Hi, e, _v), e;\n    }\n    static getInstance(e) {\n        return A.getData(e, xl);\n    }\n    static getOrCreateInstance(e, i = {}) {\n        return this.getInstance(e) || new this(e, typeof i == \"object\" ? i : null);\n    }\n}\nconst Ut = {\n    plugins: {\n        legend: {\n            labels: {\n                color: \"rgb(102,102,102)\"\n            }\n        }\n    }\n}, wi = {\n    line: {\n        options: {\n            ...Ut,\n            elements: {\n                line: {\n                    backgroundColor: \"rgba(59, 112, 202, 0.0)\",\n                    borderColor: \"rgb(59, 112, 202)\",\n                    borderWidth: 2,\n                    tension: 0\n                },\n                point: {\n                    borderColor: \"rgb(59, 112, 202)\",\n                    backgroundColor: \"rgb(59, 112, 202)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            },\n            tooltips: {\n                intersect: !1,\n                mode: \"index\"\n            },\n            datasets: {\n                borderColor: \"red\"\n            },\n            scales: {\n                x: {\n                    stacked: !0,\n                    grid: {\n                        display: !1\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                },\n                y: {\n                    stacked: !1,\n                    grid: {\n                        borderDash: [\n                            2\n                        ],\n                        drawBorder: !1,\n                        zeroLineColor: \"rgba(0,0,0,0)\",\n                        zeroLineBorderDash: [\n                            2\n                        ],\n                        zeroLineBorderDashOffset: [\n                            2\n                        ]\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                }\n            }\n        }\n    },\n    bar: {\n        options: {\n            ...Ut,\n            backgroundColor: \"rgb(59, 112, 202)\",\n            borderWidth: 0,\n            responsive: !0,\n            legend: {\n                display: !0\n            },\n            tooltips: {\n                intersect: !1,\n                mode: \"index\"\n            },\n            scales: {\n                x: {\n                    stacked: !0,\n                    grid: {\n                        display: !1\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                },\n                y: {\n                    stacked: !0,\n                    grid: {\n                        borderDash: [\n                            2\n                        ],\n                        drawBorder: !1,\n                        zeroLineColor: \"rgba(0,0,0,0)\",\n                        zeroLineBorderDash: [\n                            2\n                        ],\n                        zeroLineBorderDashOffset: [\n                            2\n                        ]\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                }\n            }\n        }\n    },\n    pie: {\n        options: {\n            ...Ut,\n            elements: {\n                arc: {\n                    backgroundColor: \"rgb(59, 112, 202)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            }\n        }\n    },\n    doughnut: {\n        options: {\n            ...Ut,\n            elements: {\n                arc: {\n                    backgroundColor: \"rgb(59, 112, 202)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            }\n        }\n    },\n    polarArea: {\n        options: {\n            ...Ut,\n            elements: {\n                arc: {\n                    backgroundColor: \"rgba(59, 112, 202, 0.5)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            }\n        }\n    },\n    radar: {\n        options: {\n            ...Ut,\n            elements: {\n                line: {\n                    backgroundColor: \"rgba(59, 112, 202, 0.5)\",\n                    borderColor: \"rgb(59, 112, 202)\",\n                    borderWidth: 2\n                },\n                point: {\n                    borderColor: \"rgb(59, 112, 202)\",\n                    backgroundColor: \"rgb(59, 112, 202)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            }\n        }\n    },\n    scatter: {\n        options: {\n            ...Ut,\n            elements: {\n                line: {\n                    backgroundColor: \"rgba(59, 112, 202, 0.5)\",\n                    borderColor: \"rgb(59, 112, 202)\",\n                    borderWidth: 2,\n                    tension: 0\n                },\n                point: {\n                    borderColor: \"rgb(59, 112, 202)\",\n                    backgroundColor: \"rgba(59, 112, 202, 0.5)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            },\n            tooltips: {\n                intersect: !1,\n                mode: \"index\"\n            },\n            datasets: {\n                borderColor: \"red\"\n            },\n            scales: {\n                x: {\n                    stacked: !0,\n                    grid: {\n                        display: !1\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                },\n                y: {\n                    stacked: !1,\n                    grid: {\n                        borderDash: [\n                            2\n                        ],\n                        drawBorder: !1,\n                        zeroLineColor: \"rgba(0,0,0,0)\",\n                        zeroLineBorderDash: [\n                            2\n                        ],\n                        zeroLineBorderDashOffset: [\n                            2\n                        ]\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                }\n            }\n        }\n    },\n    bubble: {\n        options: {\n            ...Ut,\n            elements: {\n                point: {\n                    borderColor: \"rgb(59, 112, 202)\",\n                    backgroundColor: \"rgba(59, 112, 202, 0.5)\"\n                }\n            },\n            responsive: !0,\n            legend: {\n                display: !0\n            },\n            scales: {\n                x: {\n                    grid: {\n                        display: !1\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                },\n                y: {\n                    grid: {\n                        borderDash: [\n                            2\n                        ],\n                        drawBorder: !1,\n                        zeroLineColor: \"rgba(0,0,0,0)\",\n                        zeroLineBorderDash: [\n                            2\n                        ],\n                        zeroLineBorderDashOffset: [\n                            2\n                        ]\n                    },\n                    ticks: {\n                        fontColor: \"rgba(0,0,0, 0.5)\"\n                    }\n                }\n            }\n        }\n    }\n};\nvar fv = function(t) {\n    return mv(t) && !gv(t);\n};\nfunction mv(s) {\n    return !!s && typeof s == \"object\";\n}\nfunction gv(s) {\n    var t = Object.prototype.toString.call(s);\n    return t === \"[object RegExp]\" || t === \"[object Date]\" || Tv(s);\n}\nvar bv = typeof Symbol == \"function\" && Symbol.for, vv = bv ? Symbol.for(\"react.element\") : 60103;\nfunction Tv(s) {\n    return s.$$typeof === vv;\n}\nfunction Ev(s) {\n    return Array.isArray(s) ? [] : {};\n}\nfunction Yi(s, t) {\n    return t.clone !== !1 && t.isMergeableObject(s) ? ii(Ev(s), s, t) : s;\n}\nfunction Cv(s, t, e) {\n    return s.concat(t).map(function(i) {\n        return Yi(i, e);\n    });\n}\nfunction Av(s, t) {\n    if (!t.customMerge) return ii;\n    var e = t.customMerge(s);\n    return typeof e == \"function\" ? e : ii;\n}\nfunction yv(s) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(s).filter(function(t) {\n        return Object.propertyIsEnumerable.call(s, t);\n    }) : [];\n}\nfunction Dl(s) {\n    return Object.keys(s).concat(yv(s));\n}\nfunction $h(s, t) {\n    try {\n        return t in s;\n    } catch  {\n        return !1;\n    }\n}\nfunction wv(s, t) {\n    return $h(s, t) && !(Object.hasOwnProperty.call(s, t) && Object.propertyIsEnumerable.call(s, t));\n}\nfunction kv(s, t, e) {\n    var i = {};\n    return e.isMergeableObject(s) && Dl(s).forEach(function(n) {\n        i[n] = Yi(s[n], e);\n    }), Dl(t).forEach(function(n) {\n        wv(s, n) || ($h(s, n) && e.isMergeableObject(t[n]) ? i[n] = Av(n, e)(s[n], t[n], e) : i[n] = Yi(t[n], e));\n    }), i;\n}\nfunction ii(s, t, e) {\n    e = e || {}, e.arrayMerge = e.arrayMerge || Cv, e.isMergeableObject = e.isMergeableObject || fv, e.cloneUnlessOtherwiseSpecified = Yi;\n    var i = Array.isArray(t), n = Array.isArray(s), o = i === n;\n    return o ? i ? e.arrayMerge(s, t, e) : kv(s, t, e) : Yi(t, e);\n}\nii.all = function(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"first argument should be an array\");\n    return t.reduce(function(i, n) {\n        return ii(i, n, e);\n    }, {});\n};\nvar xv = ii, er = xv;\nconst $l = \"chart\", Ss = \"te.chart\", Ov = \"chart\", Co = (s, t, e)=>{\n    const i = (n, o, r)=>{\n        const a = n.slice();\n        return o.forEach((l, p)=>{\n            typeof a[p] > \"u\" ? a[p] = r.cloneUnlessOtherwiseSpecified(l, r) : r.isMergeableObject(l) ? a[p] = er(n[p], l, r) : n.indexOf(l) === -1 && a.push(l);\n        }), a;\n    };\n    return er(e[t], s, {\n        arrayMerge: i\n    });\n}, Sv = {\n    darkTicksColor: \"#fff\",\n    darkLabelColor: \"#fff\",\n    darkGridLinesColor: \"#555\",\n    darkmodeOff: \"undefined\",\n    darkMode: null,\n    darkBgColor: \"#262626\",\n    darkBgColorLight: \"#fff\",\n    options: null\n}, Iv = {\n    darkTicksColor: \"string\",\n    darkLabelColor: \"string\",\n    darkGridLinesColor: \"string\",\n    darkmodeOff: \"(string|null)\",\n    darkMode: \"(string|null)\",\n    darkBgColor: \"string\",\n    darkBgColorLight: \"string\",\n    options: \"(object|null)\"\n};\nclass Lh {\n    constructor(t, e, i = {}, n = {}){\n        this._waitForCharts(t, e, i, n);\n    }\n    async _getChartjs() {\n        const { Chart: t, ArcElement: e, LineElement: i, BarElement: n, PointElement: o, BarController: r, BubbleController: a, DoughnutController: l, LineController: p, PieController: u, PolarAreaController: _, RadarController: f, ScatterController: g, CategoryScale: m, LinearScale: b, LogarithmicScale: v, RadialLinearScale: T, TimeScale: y, TimeSeriesScale: C, Decimation: E, Filler: w, Legend: k, Title: D, Tooltip: O, SubTitle: x } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/tw-elements\").then(__webpack_require__.bind(__webpack_require__, /*! ./chart.es.js */ \"(ssr)/./node_modules/tw-elements/dist/js/chart.es.js\")).then((L)=>L.f);\n        return t.register(e, i, n, o, r, a, l, p, u, _, f, g, m, b, v, T, y, C, E, w, k, D, O, x), t;\n    }\n    async _getChartDataLabels() {\n        return await __webpack_require__.e(/*! import() */ \"vendor-chunks/tw-elements\").then(__webpack_require__.bind(__webpack_require__, /*! ./chartjs-plugin-datalabels.es.js */ \"(ssr)/./node_modules/tw-elements/dist/js/chartjs-plugin-datalabels.es.js\"));\n    }\n    async _waitForCharts(t, e, i = {}, n = {}) {\n        if (this._Chartjs = await this._getChartjs(), this._ChartDataLabels = await this._getChartDataLabels(), this._element = t, this._data = e, this._options = i, this._type = e.type, this._canvas = null, this._chart = null, this._darkOptions = this._getDarkConfig(n), this._darkModeClassContainer = document.querySelector(\"html\"), this._prevConfig = null, this._observer = null, this._element && (A.setData(t, Ss, this), h.addClass(this._element, Ov), this._chartConstructor()), this._darkOptions.darkmodeOff !== null) {\n            const o = this._darkOptions.darkMode === \"dark\" ? \"dark\" : this._darkOptions.darkMode === \"light\" ? \"light\" : this.systemColorMode;\n            this._handleMode(o), this._observer = new MutationObserver(this._observerCallback.bind(this)), this._observer.observe(this._darkModeClassContainer, {\n                attributes: !0\n            });\n        }\n    }\n    // Getters\n    static get NAME() {\n        return $l;\n    }\n    get systemColorMode() {\n        return localStorage.theme || (this._darkModeClassContainer.classList.contains(\"dark\") ? \"dark\" : \"light\");\n    }\n    // Public\n    dispose() {\n        this._observer.disconnect(), A.removeData(this._element, Ss), this._element = null;\n    }\n    update(t, e) {\n        t && (this._data = {\n            ...this._data,\n            ...t\n        }, this._chart.data = this._data);\n        const i = Object.prototype.hasOwnProperty.call(e, \"options\") ? e : {\n            options: {\n                ...e\n            }\n        };\n        this._options = er(this._options, i), this._chart.options = Co(this._options, this._type, wi).options, this._chart.update();\n    }\n    setTheme(t) {\n        t !== \"dark\" && t !== \"light\" || !this._data || this._handleMode(t);\n    }\n    // Private\n    _getDarkConfig(t) {\n        let e = {};\n        const i = h.getDataAttributes(this._element);\n        Object.keys(i).forEach((p)=>p.startsWith(\"dark\") && (e[p] = i[p])), e = {\n            ...Sv,\n            ...e\n        };\n        const n = {\n            y: {\n                ticks: {\n                    color: e.darkTicksColor\n                },\n                grid: {\n                    color: e.darkGridLinesColor\n                }\n            },\n            x: {\n                ticks: {\n                    color: e.darkTicksColor\n                },\n                grid: {\n                    color: e.darkGridLinesColor\n                }\n            }\n        }, o = {\n            r: {\n                ticks: {\n                    color: e.darkTicksColor,\n                    backdropColor: e.darkBgColor\n                },\n                grid: {\n                    color: e.darkGridLinesColor\n                },\n                pointLabels: {\n                    color: e.darkTicksColor\n                }\n            }\n        }, l = {\n            scales: [\n                \"pie\",\n                \"doughnut\",\n                \"polarArea\",\n                \"radar\"\n            ].includes(this._type) ? [\n                \"polarArea\",\n                \"radar\"\n            ].includes(this._type) ? o : {} : n,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: e.darkLabelColor\n                    }\n                }\n            }\n        };\n        return t = {\n            ...e,\n            options: {\n                ...l\n            },\n            ...t\n        }, I($l, t, Iv), t;\n    }\n    _chartConstructor() {\n        if (this._data) {\n            this._createCanvas();\n            const t = Co(this._options, this._type, wi), e = [];\n            t.dataLabelsPlugin && e.push(this._ChartDataLabels.default), this._prevConfig = t, this._chart = new this._Chartjs(this._canvas, {\n                ...this._data,\n                ...t,\n                plugins: e\n            });\n        }\n    }\n    _createCanvas() {\n        this._canvas || (this._element.nodeName === \"CANVAS\" ? this._canvas = this._element : (this._canvas = $(\"canvas\"), this._element.appendChild(this._canvas)));\n    }\n    _handleMode(t) {\n        t === \"dark\" ? (this._changeDatasetBorderColor(), this.update(null, this._darkOptions.options)) : (this._changeDatasetBorderColor(!1), this._prevConfig && this.update(null, this._prevConfig));\n    }\n    _observerCallback(t) {\n        for (const e of t)e.type === \"attributes\" && this._handleMode(this.systemColorMode);\n    }\n    _changeDatasetBorderColor(t = !0) {\n        [\n            ...this._data.data.datasets\n        ].forEach((e)=>[\n                \"pie\",\n                \"doughnut\",\n                \"polarArea\"\n            ].includes(this._type) && (e.borderColor = t ? this._darkOptions.darkBgColor : this._darkOptions.darkBgColorLight));\n    }\n    static jQueryInterface(t, e, i) {\n        return this.each(function() {\n            let n = A.getData(this, Ss);\n            if (!(!n && /dispose/.test(t))) {\n                if (!n) {\n                    const o = e ? Co(e, i, wi) : wi[i];\n                    n = new Lh(this, {\n                        ...t,\n                        ...o\n                    });\n                }\n                if (typeof t == \"string\") {\n                    if (typeof n[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                    n[t](e, i);\n                }\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, Ss);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\n/*!\n * perfect-scrollbar v1.5.3\n * Copyright 2021 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */ function Nt(s) {\n    return getComputedStyle(s);\n}\nfunction ct(s, t) {\n    for(var e in t){\n        var i = t[e];\n        typeof i == \"number\" && (i = i + \"px\"), s.style[e] = i;\n    }\n    return s;\n}\nfunction Is(s) {\n    var t = document.createElement(\"div\");\n    return t.className = s, t;\n}\nvar Ll = typeof Element < \"u\" && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector);\nfunction Jt(s, t) {\n    if (!Ll) throw new Error(\"No element matching method supported\");\n    return Ll.call(s, t);\n}\nfunction Ye(s) {\n    s.remove ? s.remove() : s.parentNode && s.parentNode.removeChild(s);\n}\nfunction Nl(s, t) {\n    return Array.prototype.filter.call(s.children, function(e) {\n        return Jt(e, t);\n    });\n}\nvar j = {\n    main: \"ps\",\n    rtl: \"ps__rtl\",\n    element: {\n        thumb: function(s) {\n            return \"ps__thumb-\" + s;\n        },\n        rail: function(s) {\n            return \"ps__rail-\" + s;\n        },\n        consuming: \"ps__child--consume\"\n    },\n    state: {\n        focus: \"ps--focus\",\n        clicking: \"ps--clicking\",\n        active: function(s) {\n            return \"ps--active-\" + s;\n        },\n        scrolling: function(s) {\n            return \"ps--scrolling-\" + s;\n        }\n    }\n}, Nh = {\n    x: null,\n    y: null\n};\nfunction Mh(s, t) {\n    var e = s.element.classList, i = j.state.scrolling(t);\n    e.contains(i) ? clearTimeout(Nh[t]) : e.add(i);\n}\nfunction Rh(s, t) {\n    Nh[t] = setTimeout(function() {\n        return s.isAlive && s.element.classList.remove(j.state.scrolling(t));\n    }, s.settings.scrollingThreshold);\n}\nfunction Dv(s, t) {\n    Mh(s, t), Rh(s, t);\n}\nvar qi = function(t) {\n    this.element = t, this.handlers = {};\n}, Ph = {\n    isEmpty: {\n        configurable: !0\n    }\n};\nqi.prototype.bind = function(t, e) {\n    typeof this.handlers[t] > \"u\" && (this.handlers[t] = []), this.handlers[t].push(e), this.element.addEventListener(t, e, !1);\n};\nqi.prototype.unbind = function(t, e) {\n    var i = this;\n    this.handlers[t] = this.handlers[t].filter(function(n) {\n        return e && n !== e ? !0 : (i.element.removeEventListener(t, n, !1), !1);\n    });\n};\nqi.prototype.unbindAll = function() {\n    for(var t in this.handlers)this.unbind(t);\n};\nPh.isEmpty.get = function() {\n    var s = this;\n    return Object.keys(this.handlers).every(function(t) {\n        return s.handlers[t].length === 0;\n    });\n};\nObject.defineProperties(qi.prototype, Ph);\nvar li = function() {\n    this.eventElements = [];\n};\nli.prototype.eventElement = function(t) {\n    var e = this.eventElements.filter(function(i) {\n        return i.element === t;\n    })[0];\n    return e || (e = new qi(t), this.eventElements.push(e)), e;\n};\nli.prototype.bind = function(t, e, i) {\n    this.eventElement(t).bind(e, i);\n};\nli.prototype.unbind = function(t, e, i) {\n    var n = this.eventElement(t);\n    n.unbind(e, i), n.isEmpty && this.eventElements.splice(this.eventElements.indexOf(n), 1);\n};\nli.prototype.unbindAll = function() {\n    this.eventElements.forEach(function(t) {\n        return t.unbindAll();\n    }), this.eventElements = [];\n};\nli.prototype.once = function(t, e, i) {\n    var n = this.eventElement(t), o = function(r) {\n        n.unbind(e, o), i(r);\n    };\n    n.bind(e, o);\n};\nfunction Ds(s) {\n    if (typeof window.CustomEvent == \"function\") return new CustomEvent(s);\n    var t = document.createEvent(\"CustomEvent\");\n    return t.initCustomEvent(s, !1, !1, void 0), t;\n}\nfunction fn(s, t, e, i, n) {\n    i === void 0 && (i = !0), n === void 0 && (n = !1);\n    var o;\n    if (t === \"top\") o = [\n        \"contentHeight\",\n        \"containerHeight\",\n        \"scrollTop\",\n        \"y\",\n        \"up\",\n        \"down\"\n    ];\n    else if (t === \"left\") o = [\n        \"contentWidth\",\n        \"containerWidth\",\n        \"scrollLeft\",\n        \"x\",\n        \"left\",\n        \"right\"\n    ];\n    else throw new Error(\"A proper axis should be provided\");\n    $v(s, e, o, i, n);\n}\nfunction $v(s, t, e, i, n) {\n    var o = e[0], r = e[1], a = e[2], l = e[3], p = e[4], u = e[5];\n    i === void 0 && (i = !0), n === void 0 && (n = !1);\n    var _ = s.element;\n    s.reach[l] = null, _[a] < 1 && (s.reach[l] = \"start\"), _[a] > s[o] - s[r] - 1 && (s.reach[l] = \"end\"), t && (_.dispatchEvent(Ds(\"ps-scroll-\" + l)), t < 0 ? _.dispatchEvent(Ds(\"ps-scroll-\" + p)) : t > 0 && _.dispatchEvent(Ds(\"ps-scroll-\" + u)), i && Dv(s, l)), s.reach[l] && (t || n) && _.dispatchEvent(Ds(\"ps-\" + l + \"-reach-\" + s.reach[l]));\n}\nfunction F(s) {\n    return parseInt(s, 10) || 0;\n}\nfunction Lv(s) {\n    return Jt(s, \"input,[contenteditable]\") || Jt(s, \"select,[contenteditable]\") || Jt(s, \"textarea,[contenteditable]\") || Jt(s, \"button,[contenteditable]\");\n}\nfunction Nv(s) {\n    var t = Nt(s);\n    return F(t.width) + F(t.paddingLeft) + F(t.paddingRight) + F(t.borderLeftWidth) + F(t.borderRightWidth);\n}\nvar Ve = {\n    isWebKit: typeof document < \"u\" && \"WebkitAppearance\" in document.documentElement.style,\n    supportsTouch:  false && (0),\n    supportsIePointer: typeof navigator < \"u\" && navigator.msMaxTouchPoints,\n    isChrome: typeof navigator < \"u\" && /Chrome/i.test(navigator && navigator.userAgent)\n};\nfunction Ht(s) {\n    var t = s.element, e = Math.floor(t.scrollTop), i = t.getBoundingClientRect();\n    s.containerWidth = Math.round(i.width), s.containerHeight = Math.round(i.height), s.contentWidth = t.scrollWidth, s.contentHeight = t.scrollHeight, t.contains(s.scrollbarXRail) || (Nl(t, j.element.rail(\"x\")).forEach(function(n) {\n        return Ye(n);\n    }), t.appendChild(s.scrollbarXRail)), t.contains(s.scrollbarYRail) || (Nl(t, j.element.rail(\"y\")).forEach(function(n) {\n        return Ye(n);\n    }), t.appendChild(s.scrollbarYRail)), !s.settings.suppressScrollX && s.containerWidth + s.settings.scrollXMarginOffset < s.contentWidth ? (s.scrollbarXActive = !0, s.railXWidth = s.containerWidth - s.railXMarginWidth, s.railXRatio = s.containerWidth / s.railXWidth, s.scrollbarXWidth = Ml(s, F(s.railXWidth * s.containerWidth / s.contentWidth)), s.scrollbarXLeft = F((s.negativeScrollAdjustment + t.scrollLeft) * (s.railXWidth - s.scrollbarXWidth) / (s.contentWidth - s.containerWidth))) : s.scrollbarXActive = !1, !s.settings.suppressScrollY && s.containerHeight + s.settings.scrollYMarginOffset < s.contentHeight ? (s.scrollbarYActive = !0, s.railYHeight = s.containerHeight - s.railYMarginHeight, s.railYRatio = s.containerHeight / s.railYHeight, s.scrollbarYHeight = Ml(s, F(s.railYHeight * s.containerHeight / s.contentHeight)), s.scrollbarYTop = F(e * (s.railYHeight - s.scrollbarYHeight) / (s.contentHeight - s.containerHeight))) : s.scrollbarYActive = !1, s.scrollbarXLeft >= s.railXWidth - s.scrollbarXWidth && (s.scrollbarXLeft = s.railXWidth - s.scrollbarXWidth), s.scrollbarYTop >= s.railYHeight - s.scrollbarYHeight && (s.scrollbarYTop = s.railYHeight - s.scrollbarYHeight), Mv(t, s), s.scrollbarXActive ? t.classList.add(j.state.active(\"x\")) : (t.classList.remove(j.state.active(\"x\")), s.scrollbarXWidth = 0, s.scrollbarXLeft = 0, t.scrollLeft = s.isRtl === !0 ? s.contentWidth : 0), s.scrollbarYActive ? t.classList.add(j.state.active(\"y\")) : (t.classList.remove(j.state.active(\"y\")), s.scrollbarYHeight = 0, s.scrollbarYTop = 0, t.scrollTop = 0);\n}\nfunction Ml(s, t) {\n    return s.settings.minScrollbarLength && (t = Math.max(t, s.settings.minScrollbarLength)), s.settings.maxScrollbarLength && (t = Math.min(t, s.settings.maxScrollbarLength)), t;\n}\nfunction Mv(s, t) {\n    var e = {\n        width: t.railXWidth\n    }, i = Math.floor(s.scrollTop);\n    t.isRtl ? e.left = t.negativeScrollAdjustment + s.scrollLeft + t.containerWidth - t.contentWidth : e.left = s.scrollLeft, t.isScrollbarXUsingBottom ? e.bottom = t.scrollbarXBottom - i : e.top = t.scrollbarXTop + i, ct(t.scrollbarXRail, e);\n    var n = {\n        top: i,\n        height: t.railYHeight\n    };\n    t.isScrollbarYUsingRight ? t.isRtl ? n.right = t.contentWidth - (t.negativeScrollAdjustment + s.scrollLeft) - t.scrollbarYRight - t.scrollbarYOuterWidth - 9 : n.right = t.scrollbarYRight - s.scrollLeft : t.isRtl ? n.left = t.negativeScrollAdjustment + s.scrollLeft + t.containerWidth * 2 - t.contentWidth - t.scrollbarYLeft - t.scrollbarYOuterWidth : n.left = t.scrollbarYLeft + s.scrollLeft, ct(t.scrollbarYRail, n), ct(t.scrollbarX, {\n        left: t.scrollbarXLeft,\n        width: t.scrollbarXWidth - t.railBorderXWidth\n    }), ct(t.scrollbarY, {\n        top: t.scrollbarYTop,\n        height: t.scrollbarYHeight - t.railBorderYWidth\n    });\n}\nfunction Rv(s) {\n    s.element, s.event.bind(s.scrollbarY, \"mousedown\", function(t) {\n        return t.stopPropagation();\n    }), s.event.bind(s.scrollbarYRail, \"mousedown\", function(t) {\n        var e = t.pageY - window.pageYOffset - s.scrollbarYRail.getBoundingClientRect().top, i = e > s.scrollbarYTop ? 1 : -1;\n        s.element.scrollTop += i * s.containerHeight, Ht(s), t.stopPropagation();\n    }), s.event.bind(s.scrollbarX, \"mousedown\", function(t) {\n        return t.stopPropagation();\n    }), s.event.bind(s.scrollbarXRail, \"mousedown\", function(t) {\n        var e = t.pageX - window.pageXOffset - s.scrollbarXRail.getBoundingClientRect().left, i = e > s.scrollbarXLeft ? 1 : -1;\n        s.element.scrollLeft += i * s.containerWidth, Ht(s), t.stopPropagation();\n    });\n}\nfunction Pv(s) {\n    Rl(s, [\n        \"containerWidth\",\n        \"contentWidth\",\n        \"pageX\",\n        \"railXWidth\",\n        \"scrollbarX\",\n        \"scrollbarXWidth\",\n        \"scrollLeft\",\n        \"x\",\n        \"scrollbarXRail\"\n    ]), Rl(s, [\n        \"containerHeight\",\n        \"contentHeight\",\n        \"pageY\",\n        \"railYHeight\",\n        \"scrollbarY\",\n        \"scrollbarYHeight\",\n        \"scrollTop\",\n        \"y\",\n        \"scrollbarYRail\"\n    ]);\n}\nfunction Rl(s, t) {\n    var e = t[0], i = t[1], n = t[2], o = t[3], r = t[4], a = t[5], l = t[6], p = t[7], u = t[8], _ = s.element, f = null, g = null, m = null;\n    function b(y) {\n        y.touches && y.touches[0] && (y[n] = y.touches[0].pageY), _[l] = f + m * (y[n] - g), Mh(s, p), Ht(s), y.stopPropagation(), y.type.startsWith(\"touch\") && y.changedTouches.length > 1 && y.preventDefault();\n    }\n    function v() {\n        Rh(s, p), s[u].classList.remove(j.state.clicking), s.event.unbind(s.ownerDocument, \"mousemove\", b);\n    }\n    function T(y, C) {\n        f = _[l], C && y.touches && (y[n] = y.touches[0].pageY), g = y[n], m = (s[i] - s[e]) / (s[o] - s[a]), C ? s.event.bind(s.ownerDocument, \"touchmove\", b) : (s.event.bind(s.ownerDocument, \"mousemove\", b), s.event.once(s.ownerDocument, \"mouseup\", v), y.preventDefault()), s[u].classList.add(j.state.clicking), y.stopPropagation();\n    }\n    s.event.bind(s[r], \"mousedown\", function(y) {\n        T(y);\n    }), s.event.bind(s[r], \"touchstart\", function(y) {\n        T(y, !0);\n    });\n}\nfunction Bv(s) {\n    var t = s.element, e = function() {\n        return Jt(t, \":hover\");\n    }, i = function() {\n        return Jt(s.scrollbarX, \":focus\") || Jt(s.scrollbarY, \":focus\");\n    };\n    function n(o, r) {\n        var a = Math.floor(t.scrollTop);\n        if (o === 0) {\n            if (!s.scrollbarYActive) return !1;\n            if (a === 0 && r > 0 || a >= s.contentHeight - s.containerHeight && r < 0) return !s.settings.wheelPropagation;\n        }\n        var l = t.scrollLeft;\n        if (r === 0) {\n            if (!s.scrollbarXActive) return !1;\n            if (l === 0 && o < 0 || l >= s.contentWidth - s.containerWidth && o > 0) return !s.settings.wheelPropagation;\n        }\n        return !0;\n    }\n    s.event.bind(s.ownerDocument, \"keydown\", function(o) {\n        if (!(o.isDefaultPrevented && o.isDefaultPrevented() || o.defaultPrevented) && !(!e() && !i())) {\n            var r = document.activeElement ? document.activeElement : s.ownerDocument.activeElement;\n            if (r) {\n                if (r.tagName === \"IFRAME\") r = r.contentDocument.activeElement;\n                else for(; r.shadowRoot;)r = r.shadowRoot.activeElement;\n                if (Lv(r)) return;\n            }\n            var a = 0, l = 0;\n            switch(o.which){\n                case 37:\n                    o.metaKey ? a = -s.contentWidth : o.altKey ? a = -s.containerWidth : a = -30;\n                    break;\n                case 38:\n                    o.metaKey ? l = s.contentHeight : o.altKey ? l = s.containerHeight : l = 30;\n                    break;\n                case 39:\n                    o.metaKey ? a = s.contentWidth : o.altKey ? a = s.containerWidth : a = 30;\n                    break;\n                case 40:\n                    o.metaKey ? l = -s.contentHeight : o.altKey ? l = -s.containerHeight : l = -30;\n                    break;\n                case 32:\n                    o.shiftKey ? l = s.containerHeight : l = -s.containerHeight;\n                    break;\n                case 33:\n                    l = s.containerHeight;\n                    break;\n                case 34:\n                    l = -s.containerHeight;\n                    break;\n                case 36:\n                    l = s.contentHeight;\n                    break;\n                case 35:\n                    l = -s.contentHeight;\n                    break;\n                default:\n                    return;\n            }\n            s.settings.suppressScrollX && a !== 0 || s.settings.suppressScrollY && l !== 0 || (t.scrollTop -= l, t.scrollLeft += a, Ht(s), n(a, l) && o.preventDefault());\n        }\n    });\n}\nfunction Hv(s) {\n    var t = s.element;\n    function e(r, a) {\n        var l = Math.floor(t.scrollTop), p = t.scrollTop === 0, u = l + t.offsetHeight === t.scrollHeight, _ = t.scrollLeft === 0, f = t.scrollLeft + t.offsetWidth === t.scrollWidth, g;\n        return Math.abs(a) > Math.abs(r) ? g = p || u : g = _ || f, g ? !s.settings.wheelPropagation : !0;\n    }\n    function i(r) {\n        var a = r.deltaX, l = -1 * r.deltaY;\n        return (typeof a > \"u\" || typeof l > \"u\") && (a = -1 * r.wheelDeltaX / 6, l = r.wheelDeltaY / 6), r.deltaMode && r.deltaMode === 1 && (a *= 10, l *= 10), a !== a && l !== l && (a = 0, l = r.wheelDelta), r.shiftKey ? [\n            -l,\n            -a\n        ] : [\n            a,\n            l\n        ];\n    }\n    function n(r, a, l) {\n        if (!Ve.isWebKit && t.querySelector(\"select:focus\")) return !0;\n        if (!t.contains(r)) return !1;\n        for(var p = r; p && p !== t;){\n            if (p.classList.contains(j.element.consuming)) return !0;\n            var u = Nt(p);\n            if (l && u.overflowY.match(/(scroll|auto)/)) {\n                var _ = p.scrollHeight - p.clientHeight;\n                if (_ > 0 && (p.scrollTop > 0 && l < 0 || p.scrollTop < _ && l > 0)) return !0;\n            }\n            if (a && u.overflowX.match(/(scroll|auto)/)) {\n                var f = p.scrollWidth - p.clientWidth;\n                if (f > 0 && (p.scrollLeft > 0 && a < 0 || p.scrollLeft < f && a > 0)) return !0;\n            }\n            p = p.parentNode;\n        }\n        return !1;\n    }\n    function o(r) {\n        var a = i(r), l = a[0], p = a[1];\n        if (!n(r.target, l, p)) {\n            var u = !1;\n            s.settings.useBothWheelAxes ? s.scrollbarYActive && !s.scrollbarXActive ? (p ? t.scrollTop -= p * s.settings.wheelSpeed : t.scrollTop += l * s.settings.wheelSpeed, u = !0) : s.scrollbarXActive && !s.scrollbarYActive && (l ? t.scrollLeft += l * s.settings.wheelSpeed : t.scrollLeft -= p * s.settings.wheelSpeed, u = !0) : (t.scrollTop -= p * s.settings.wheelSpeed, t.scrollLeft += l * s.settings.wheelSpeed), Ht(s), u = u || e(l, p), u && !r.ctrlKey && (r.stopPropagation(), r.preventDefault());\n        }\n    }\n    typeof window.onwheel < \"u\" ? s.event.bind(t, \"wheel\", o) : typeof window.onmousewheel < \"u\" && s.event.bind(t, \"mousewheel\", o);\n}\nfunction Vv(s) {\n    if (!Ve.supportsTouch && !Ve.supportsIePointer) return;\n    var t = s.element;\n    function e(m, b) {\n        var v = Math.floor(t.scrollTop), T = t.scrollLeft, y = Math.abs(m), C = Math.abs(b);\n        if (C > y) {\n            if (b < 0 && v === s.contentHeight - s.containerHeight || b > 0 && v === 0) return window.scrollY === 0 && b > 0 && Ve.isChrome;\n        } else if (y > C && (m < 0 && T === s.contentWidth - s.containerWidth || m > 0 && T === 0)) return !0;\n        return !0;\n    }\n    function i(m, b) {\n        t.scrollTop -= b, t.scrollLeft -= m, Ht(s);\n    }\n    var n = {}, o = 0, r = {}, a = null;\n    function l(m) {\n        return m.targetTouches ? m.targetTouches[0] : m;\n    }\n    function p(m) {\n        return m.pointerType && m.pointerType === \"pen\" && m.buttons === 0 ? !1 : !!(m.targetTouches && m.targetTouches.length === 1 || m.pointerType && m.pointerType !== \"mouse\" && m.pointerType !== m.MSPOINTER_TYPE_MOUSE);\n    }\n    function u(m) {\n        if (p(m)) {\n            var b = l(m);\n            n.pageX = b.pageX, n.pageY = b.pageY, o = /* @__PURE__ */ new Date().getTime(), a !== null && clearInterval(a);\n        }\n    }\n    function _(m, b, v) {\n        if (!t.contains(m)) return !1;\n        for(var T = m; T && T !== t;){\n            if (T.classList.contains(j.element.consuming)) return !0;\n            var y = Nt(T);\n            if (v && y.overflowY.match(/(scroll|auto)/)) {\n                var C = T.scrollHeight - T.clientHeight;\n                if (C > 0 && (T.scrollTop > 0 && v < 0 || T.scrollTop < C && v > 0)) return !0;\n            }\n            if (b && y.overflowX.match(/(scroll|auto)/)) {\n                var E = T.scrollWidth - T.clientWidth;\n                if (E > 0 && (T.scrollLeft > 0 && b < 0 || T.scrollLeft < E && b > 0)) return !0;\n            }\n            T = T.parentNode;\n        }\n        return !1;\n    }\n    function f(m) {\n        if (p(m)) {\n            var b = l(m), v = {\n                pageX: b.pageX,\n                pageY: b.pageY\n            }, T = v.pageX - n.pageX, y = v.pageY - n.pageY;\n            if (_(m.target, T, y)) return;\n            i(T, y), n = v;\n            var C = /* @__PURE__ */ new Date().getTime(), E = C - o;\n            E > 0 && (r.x = T / E, r.y = y / E, o = C), e(T, y) && m.preventDefault();\n        }\n    }\n    function g() {\n        s.settings.swipeEasing && (clearInterval(a), a = setInterval(function() {\n            if (s.isInitialized) {\n                clearInterval(a);\n                return;\n            }\n            if (!r.x && !r.y) {\n                clearInterval(a);\n                return;\n            }\n            if (Math.abs(r.x) < 0.01 && Math.abs(r.y) < 0.01) {\n                clearInterval(a);\n                return;\n            }\n            if (!s.element) {\n                clearInterval(a);\n                return;\n            }\n            i(r.x * 30, r.y * 30), r.x *= 0.8, r.y *= 0.8;\n        }, 10));\n    }\n    Ve.supportsTouch ? (s.event.bind(t, \"touchstart\", u), s.event.bind(t, \"touchmove\", f), s.event.bind(t, \"touchend\", g)) : Ve.supportsIePointer && (window.PointerEvent ? (s.event.bind(t, \"pointerdown\", u), s.event.bind(t, \"pointermove\", f), s.event.bind(t, \"pointerup\", g)) : window.MSPointerEvent && (s.event.bind(t, \"MSPointerDown\", u), s.event.bind(t, \"MSPointerMove\", f), s.event.bind(t, \"MSPointerUp\", g)));\n}\nvar Wv = function() {\n    return {\n        handlers: [\n            \"click-rail\",\n            \"drag-thumb\",\n            \"keyboard\",\n            \"wheel\",\n            \"touch\"\n        ],\n        maxScrollbarLength: null,\n        minScrollbarLength: null,\n        scrollingThreshold: 1e3,\n        scrollXMarginOffset: 0,\n        scrollYMarginOffset: 0,\n        suppressScrollX: !1,\n        suppressScrollY: !1,\n        swipeEasing: !0,\n        useBothWheelAxes: !1,\n        wheelPropagation: !0,\n        wheelSpeed: 1\n    };\n}, Fv = {\n    \"click-rail\": Rv,\n    \"drag-thumb\": Pv,\n    keyboard: Bv,\n    wheel: Hv,\n    touch: Vv\n}, Zi = function(t, e) {\n    var i = this;\n    if (e === void 0 && (e = {}), typeof t == \"string\" && (t = document.querySelector(t)), !t || !t.nodeName) throw new Error(\"no element is specified to initialize PerfectScrollbar\");\n    this.element = t, t.classList.add(j.main), this.settings = Wv();\n    for(var n in e)this.settings[n] = e[n];\n    this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;\n    var o = function() {\n        return t.classList.add(j.state.focus);\n    }, r = function() {\n        return t.classList.remove(j.state.focus);\n    };\n    this.isRtl = Nt(t).direction === \"rtl\", this.isRtl === !0 && t.classList.add(j.rtl), this.isNegativeScroll = function() {\n        var p = t.scrollLeft, u = null;\n        return t.scrollLeft = -1, u = t.scrollLeft < 0, t.scrollLeft = p, u;\n    }(), this.negativeScrollAdjustment = this.isNegativeScroll ? t.scrollWidth - t.clientWidth : 0, this.event = new li(), this.ownerDocument = t.ownerDocument || document, this.scrollbarXRail = Is(j.element.rail(\"x\")), t.appendChild(this.scrollbarXRail), this.scrollbarX = Is(j.element.thumb(\"x\")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarX, \"focus\", o), this.event.bind(this.scrollbarX, \"blur\", r), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;\n    var a = Nt(this.scrollbarXRail);\n    this.scrollbarXBottom = parseInt(a.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = F(a.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = F(a.borderLeftWidth) + F(a.borderRightWidth), ct(this.scrollbarXRail, {\n        display: \"block\"\n    }), this.railXMarginWidth = F(a.marginLeft) + F(a.marginRight), ct(this.scrollbarXRail, {\n        display: \"\"\n    }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = Is(j.element.rail(\"y\")), t.appendChild(this.scrollbarYRail), this.scrollbarY = Is(j.element.thumb(\"y\")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarY, \"focus\", o), this.event.bind(this.scrollbarY, \"blur\", r), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;\n    var l = Nt(this.scrollbarYRail);\n    this.scrollbarYRight = parseInt(l.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = F(l.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? Nv(this.scrollbarY) : null, this.railBorderYWidth = F(l.borderTopWidth) + F(l.borderBottomWidth), ct(this.scrollbarYRail, {\n        display: \"block\"\n    }), this.railYMarginHeight = F(l.marginTop) + F(l.marginBottom), ct(this.scrollbarYRail, {\n        display: \"\"\n    }), this.railYHeight = null, this.railYRatio = null, this.reach = {\n        x: t.scrollLeft <= 0 ? \"start\" : t.scrollLeft >= this.contentWidth - this.containerWidth ? \"end\" : null,\n        y: t.scrollTop <= 0 ? \"start\" : t.scrollTop >= this.contentHeight - this.containerHeight ? \"end\" : null\n    }, this.isAlive = !0, this.settings.handlers.forEach(function(p) {\n        return Fv[p](i);\n    }), this.lastScrollTop = Math.floor(t.scrollTop), this.lastScrollLeft = t.scrollLeft, this.event.bind(this.element, \"scroll\", function(p) {\n        return i.onScroll(p);\n    }), Ht(this);\n};\nZi.prototype.update = function() {\n    this.isAlive && (this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, ct(this.scrollbarXRail, {\n        display: \"block\"\n    }), ct(this.scrollbarYRail, {\n        display: \"block\"\n    }), this.railXMarginWidth = F(Nt(this.scrollbarXRail).marginLeft) + F(Nt(this.scrollbarXRail).marginRight), this.railYMarginHeight = F(Nt(this.scrollbarYRail).marginTop) + F(Nt(this.scrollbarYRail).marginBottom), ct(this.scrollbarXRail, {\n        display: \"none\"\n    }), ct(this.scrollbarYRail, {\n        display: \"none\"\n    }), Ht(this), fn(this, \"top\", 0, !1, !0), fn(this, \"left\", 0, !1, !0), ct(this.scrollbarXRail, {\n        display: \"\"\n    }), ct(this.scrollbarYRail, {\n        display: \"\"\n    }));\n};\nZi.prototype.onScroll = function(t) {\n    this.isAlive && (Ht(this), fn(this, \"top\", this.element.scrollTop - this.lastScrollTop), fn(this, \"left\", this.element.scrollLeft - this.lastScrollLeft), this.lastScrollTop = Math.floor(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);\n};\nZi.prototype.destroy = function() {\n    this.isAlive && (this.event.unbindAll(), Ye(this.scrollbarX), Ye(this.scrollbarY), Ye(this.scrollbarXRail), Ye(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);\n};\nZi.prototype.removePsClasses = function() {\n    this.element.className = this.element.className.split(\" \").filter(function(t) {\n        return !t.match(/^ps([-_].+|)$/);\n    }).join(\" \");\n};\nconst Ao = \"perfectScrollbar\", Yv = \"perfect-scrollbar\", $s = \"te.perfectScrollbar\", St = \"te\", It = \"ps\", yo = [\n    {\n        te: `scrollX.${St}.${It}`,\n        ps: \"ps-scroll-x\"\n    },\n    {\n        te: `scrollY.${St}.${It}`,\n        ps: \"ps-scroll-y\"\n    },\n    {\n        te: `scrollUp.${St}.${It}`,\n        ps: \"ps-scroll-up\"\n    },\n    {\n        te: `scrollDown.${St}.${It}`,\n        ps: \"ps-scroll-down\"\n    },\n    {\n        te: `scrollLeft.${St}.${It}`,\n        ps: \"ps-scroll-left\"\n    },\n    {\n        te: `scrollRight.${St}.${It}`,\n        ps: \"ps-scroll-right\"\n    },\n    {\n        te: `scrollXEnd.${St}.${It}`,\n        ps: \"ps-x-reach-end\"\n    },\n    {\n        te: `scrollYEnd.${St}.${It}`,\n        ps: \"ps-y-reach-end\"\n    },\n    {\n        te: `scrollXStart.${St}.${It}`,\n        ps: \"ps-x-reach-start\"\n    },\n    {\n        te: `scrollYStart.${St}.${It}`,\n        ps: \"ps-y-reach-start\"\n    }\n], jv = {\n    handlers: [\n        \"click-rail\",\n        \"drag-thumb\",\n        \"keyboard\",\n        \"wheel\",\n        \"touch\"\n    ],\n    wheelSpeed: 1,\n    wheelPropagation: !0,\n    swipeEasing: !0,\n    minScrollbarLength: null,\n    maxScrollbarLength: null,\n    scrollingThreshold: 1e3,\n    useBothWheelAxes: !1,\n    suppressScrollX: !1,\n    suppressScrollY: !1,\n    scrollXMarginOffset: 0,\n    scrollYMarginOffset: 0,\n    positionRight: !0\n}, Kv = {\n    handlers: \"(string|array)\",\n    wheelSpeed: \"number\",\n    wheelPropagation: \"boolean\",\n    swipeEasing: \"boolean\",\n    minScrollbarLength: \"(number|null)\",\n    maxScrollbarLength: \"(number|null)\",\n    scrollingThreshold: \"number\",\n    useBothWheelAxes: \"boolean\",\n    suppressScrollX: \"boolean\",\n    suppressScrollY: \"boolean\",\n    scrollXMarginOffset: \"number\",\n    scrollYMarginOffset: \"number\",\n    positionRight: \"boolean\"\n}, zv = {\n    ps: \"group/ps overflow-hidden [overflow-anchor:none] touch-none\",\n    railX: \"group/x absolute bottom-0 h-[0.9375rem] hidden opacity-0 transition-[background-color,_opacity] duration-200 ease-linear motion-reduce:transition-none z-[1035] group-[&.ps--active-x]/ps:block group-hover/ps:opacity-60 group-focus/ps:opacity-60 group-[&.ps--scrolling-x]/ps:opacity-60 hover:!opacity-90 focus:!opacity-90 [&.ps--clicking]:!opacity-90 outline-none\",\n    railXColors: \"group-[&.ps--active-x]/ps:bg-transparent hover:!bg-[#eee] focus:!bg-[#eee] [&.ps--clicking]:!bg-[#eee] dark:hover:!bg-[#555] dark:focus:!bg-[#555] dark:[&.ps--clicking]:!bg-[#555]\",\n    railXThumb: \"absolute bottom-0.5 rounded-md h-1.5 group-focus/ps:opacity-100 group-active/ps:opacity-100 [transition:background-color_.2s_linear,_height_.2s_ease-in-out] group-hover/x:h-[11px] group-focus/x:h-[0.6875rem] group-[&.ps--clicking]/x:bg-[#999] group-[&.ps--clicking]/x:h-[11px] outline-none\",\n    railXThumbColors: \"bg-[#aaa] group-hover/x:bg-[#999] group-focus/x:bg-[#999]\",\n    railY: \"group/y absolute right-0 w-[0.9375rem] hidden opacity-0 transition-[background-color,_opacity] duration-200 ease-linear motion-reduce:transition-none z-[1035] group-[&.ps--active-y]/ps:block group-hover/ps:opacity-60 group-focus/ps:opacity-60 group-[&.ps--scrolling-y]/ps:opacity-60 hover:!opacity-90 focus:!opacity-90 [&.ps--clicking]:!opacity-90 outline-none\",\n    railYColors: \"group-[&.ps--active-y]/ps:bg-transparent hover:!bg-[#eee] focus:!bg-[#eee] [&.ps--clicking]:!bg-[#eee] dark:hover:!bg-[#555] dark:focus:!bg-[#555] dark:[&.ps--clicking]:!bg-[#555]\",\n    railYThumb: \"absolute right-0.5 rounded-md w-1.5 group-focus/ps:opacity-100 group-active/ps:opacity-100 [transition:background-color_.2s_linear,_width_.2s_ease-in-out,_opacity] group-hover/y:w-[11px] group-focus/y:w-[0.6875rem] group-[&.ps--clicking]/y:w-[11px] outline-none\",\n    railYThumbColors: \"bg-[#aaa] group-hover/y:bg-[#999] group-focus/y:bg-[#999] group-[&.ps--clicking]/y:bg-[#999]\"\n}, Uv = {\n    ps: \"string\",\n    railX: \"string\",\n    railXColors: \"string\",\n    railXThumb: \"string\",\n    railXThumbColors: \"string\",\n    railY: \"string\",\n    railYColors: \"string\",\n    railYThumb: \"string\",\n    railYThumbColors: \"string\"\n};\nclass xr {\n    constructor(t, e = {}, i = {}){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this.perfectScrollbar = null, this._observer = null, this._psClasses = [\n            {\n                ps: \"ps__rail-x\",\n                te: this._classes.railX,\n                teColor: this._classes.railXColors\n            },\n            {\n                ps: \"ps__rail-y\",\n                te: this._classes.railY,\n                teColor: this._classes.railYColors\n            },\n            {\n                ps: \"ps__thumb-x\",\n                te: this._classes.railXThumb,\n                teColor: this._classes.railXThumbColors\n            },\n            {\n                ps: \"ps__thumb-y\",\n                te: this._classes.railYThumb,\n                teColor: this._classes.railYThumbColors\n            }\n        ], this._element && (A.setData(t, $s, this), h.addClass(this._element, Yv)), this.init();\n    }\n    // Getters\n    static get NAME() {\n        return Ao;\n    }\n    get railX() {\n        return d.findOne(\".ps__rail-x\", this._element);\n    }\n    get railY() {\n        return d.findOne(\".ps__rail-y\", this._element);\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return e.handlers !== void 0 && (e.handlers = e.handlers.split(\" \")), t = {\n            ...jv,\n            ...e,\n            ...t\n        }, I(Ao, t, Kv), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...zv,\n            ...e,\n            ...t\n        }, I(Ao, t, Uv), t;\n    }\n    // Public\n    dispose() {\n        this._options.positionRight && this._observer.disconnect(), A.removeData(this._element, $s), this._element = null, this._dataAttrOptions = null, this._options = null, this.perfectScrollbar.destroy(), this.removeEvent(yo), this.perfectScrollbar = null;\n    }\n    init() {\n        if (this.perfectScrollbar = new Zi(this._element, this._options), this._addPerfectScrollbarStyles(), this._updateScrollPosition(), this.perfectScrollbar.update(), this._initEvents(yo), this._options.positionRight) {\n            this._observer = new ResizeObserver(()=>{\n                setTimeout(()=>{\n                    this._updateScrollPosition();\n                }, 100);\n            });\n            const t = {\n                attributes: !0,\n                attributeFilter: [\n                    \"class\",\n                    \"className\"\n                ]\n            };\n            this._observer.observe(this._element, t);\n        }\n    }\n    _updateScrollPosition() {\n        const t = getComputedStyle(this._element).getPropertyValue(\"height\"), e = getComputedStyle(this._element).getPropertyValue(\"width\");\n        this.railX && (this.railX.style.transform = `translateY(calc(-100% + ${this._canTransform(t) ? t : \"0px\"}))`), this.railY && (this.railY.style.transform = `translateX(calc(-100% + ${this._canTransform(e) ? e : \"0px\"}))`);\n    }\n    _canTransform(t) {\n        return t && t.includes(\"px\");\n    }\n    update() {\n        return this.perfectScrollbar.update();\n    }\n    _initEvents(t = []) {\n        t.forEach(({ ps: e, te: i })=>c.on(this._element, e, (n)=>c.trigger(this._element, i, {\n                    e: n\n                })));\n    }\n    _addPerfectScrollbarStyles() {\n        this._psClasses.forEach((t)=>{\n            const e = d.findOne(`.${t.ps}`, this._element);\n            h.addClass(e, t.te), h.addClass(e, t.teColor);\n        }), h.addClass(this._element, this._classes.ps), h.removeClass(this._element, \"ps\");\n    }\n    removeEvent(t) {\n        let e = [];\n        typeof t == \"string\" && (e = yo.filter(({ te: i })=>i === t)), e.forEach(({ ps: i, te: n })=>{\n            c.off(this._element, i), c.off(this._element, n);\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, $s);\n            const i = typeof t == \"object\" && t;\n            if (!(!e && /dispose|hide/.test(t)) && (e || (e = new xr(this, i)), typeof t == \"string\")) {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, $s);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Bh = xr, Xv = \"data-te-datatable-select-ref\", Gv = \"data-te-datatable-pagination-nav-ref\", qv = \"data-te-datatable-pagination-right-ref\", Zv = \"data-te-datatable-pagination-left-ref\", Qv = \"data-te-datatable-pagination-start-ref\", Jv = \"data-te-datatable-pagination-end-ref\", tT = ({ text: s, entries: t, entriesOptions: e, fullPagination: i, rowsText: n, allText: o, paginationStartIconTemplate: r, paginationLeftIconTemplate: a, paginationRightIconTemplate: l, paginationEndIconTemplate: p, classes: u }, _, f)=>{\n    const g = e.map((m)=>m === \"All\" ? `<option value=\"${m}\" ${m === t ? \"selected\" : \"\"}>${o}</option>` : `<option value=\"${m}\" ${m === t ? \"selected\" : \"\"}>${m}</option>`).join(`\n`);\n    return `\n<div class=\"${u.pagination} ${f ? `${u.paginationBordered}` : \"\"} ${u.borderColor} ${u.color}\">\n  <div class=\"${u.selectItemsWrapper}\">  \n    <p class=\"${u.paginationRowsText} ${_ ? `${u.loadingPaginationRowsText}` : \"\"}\">${n}</p>\n    <div class=\"${u.selectWrapper} ${_ ? `${u.loadingPaginationSelectWrapper}` : \"\"}\">\n      <select name=\"entries\"\n        ${_ ? \"disabled\" : \"\"} class=\"select\" ${Xv}>\n        ${g}\n      </select>\n    </div>\n  </div>\n  <div class=\"${u.paginationNav} ${_ ? `${u.loadingPaginationNav}` : \"\"}\" ${Gv}>\n  ${s}\n  </div>\n  <div class=\"${u.paginationButtonsWrapper}\">\n    ${i ? `<button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${u.paginationStartButton}\" ${Qv}>\n           ${r}\n          </button>` : \"\"}\n    <button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${u.paginationLeftButton}\" ${Zv}>\n      ${a}\n  </button>\n    <button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${u.paginationRightButton}\" ${qv}>\n      ${l}\n  </button>\n    ${i ? `<button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${u.paginationEndButton}\" ${Jv}>\n           ${p}\n          </button>` : \"\"}\n  </div>\n</div>\n`;\n}, eT = \"data-te-datatable-sort-icon-ref\", iT = \"data-te-datatable-header-checkbox-ref\", sT = (s, t, e, i, n, o, r, a)=>{\n    const l = e ? `\n  <th scope=\"col\">\n    <div class=\"${a.checkboxHeaderWrapper}\">\n      <input\n        class=\"${a.checkboxHeader}\"\n        type=\"checkbox\"\n        value=\"\"\n        ${iT}\n        />\n    </div>\n  </th>\n  ` : '<th scope=\"col\"></th>', p = s.map((u, _)=>{\n        const f = u.fixed ? s.filter((g, m)=>g.fixed === u.fixed && m < _).reduce((g, m)=>g + m.width, 0) : null;\n        return `<th class=\"${a.column} ${i ? `${a.tableBordered}` : \"\"} ${a.borderColor} ${n ? `${a.sm}` : \"\"} ${u.fixed ? `${a.fixedHeader} ${a.color}` : \"\"} ${o ? `${a.loadingColumn}` : \"\"}\" style=\"${u.fixed ? `${u.fixed === \"right\" ? \"right\" : \"left\"}: ${f}px;` : \"\"}\" scope=\"col\">${u.sort ? `<div class=\"${a.sortIconWrapper}\"><span class=\"${a.sortIcon} ${o ? \"invisible\" : \"\"}\" data-te-sort=\"${u.field}\" ${eT}>${r}</span>` : \"\"} <span class=\"${u.sort ? \"\" : \"pl-[18px]\"}\">${u.label}</span></div></th>`;\n    });\n    return [\n        t ? l : \"\",\n        ...p\n    ].join(`\n`);\n}, nT = \"data-te-datatable-row-ref\", oT = \"data-te-datatable-row-checkbox-ref\", rT = \"data-te-datatable-cell-ref\", aT = ({ rows: s, columns: t, noFoundMessage: e, edit: i, selectable: n, loading: o, bordered: r, borderless: a, striped: l, hover: p, sm: u, classes: _ })=>{\n    const f = s.map((g)=>{\n        const m = `\n      <td data-te-field=\"checkbox\" class=\"${r ? `${_.tableBordered} ${_.borderColor}` : \"\"}\">\n        <div class=\"${_.checkboxRowWrapper}\">\n          <input\n            class=\"${_.checkboxRow}\"\n            type=\"checkbox\"\n            value=\"\"\n            data-te-row-index=\"${g.rowIndex}\"  ${oT}/>\n        </div>\n      </td>`, b = t.map((v, T)=>{\n            const y = {};\n            if (v.width && (y[\"min-width\"] = `${v.width - 1}px`, y[\"max-width\"] = `${v.width}px`, y.width = `${v.width}px`), v.fixed) {\n                const E = t.filter((w, k)=>w.fixed === v.fixed && k < T).reduce((w, k)=>w + k.width, 0);\n                y[v.fixed === \"right\" ? \"right\" : \"left\"] = `${E}px`;\n            }\n            return `<td style=\"${Object.keys(y).map((E)=>`${E}: ${y[E]}`).join(\"; \")}\" class=\"${_.rowItem} ${_.borderColor} ${i ? `${_.edit}` : \"\"} ${r ? `${_.tableBordered}` : \"\"} ${u ? `${_.sm}` : \"\"} ${v.fixed ? `${_.fixedHeader} ${_.color}` : \"\"}\" ${rT} data-te-field=\"${v.field}\" ${i && 'contenteditable=\"true\"'}>${g[v.field]}</td>`;\n        }).join(\"\");\n        return `<tr scope=\"row\" class=\"${_.row} ${_.borderColor} ${_.rowAnimation} ${l ? `${_.striped}` : \"\"} ${a ? `${_.borderless}` : \"\"} ${p ? `${_.hoverRow}` : \"\"}\" data-te-index=\"${g.rowIndex}\" ${nT}>${n ? m : \"\"}${b}</tr>`;\n    });\n    return s.length > 0 || o ? f.join(`\n`) : `<tr class=\"${_.noFoundMessageWrapper} ${_.borderColor}\"><td class=\"${_.noFoundMessage}\">${e}</td></tr>`;\n}, lT = \"data-te-datatable-inner-ref\", cT = \"data-te-datatable-header-ref\", Pl = ({ columns: s, rows: t, noFoundMessage: e, edit: i, multi: n, selectable: o, loading: r, loadingMessage: a, pagination: l, bordered: p, borderless: u, striped: _, hover: f, fixedHeader: g, sm: m, sortIconTemplate: b, classes: v })=>{\n    const T = aT({\n        rows: t,\n        columns: s,\n        noFoundMessage: e,\n        edit: i,\n        loading: r,\n        selectable: o,\n        bordered: p,\n        borderless: u,\n        striped: _,\n        hover: f,\n        sm: m,\n        classes: v\n    }), y = sT(s, o, n, p, m, r, b, v);\n    return {\n        table: `\n<div class=\"${v.color}\" ${lT}>\n  <table class=\"${v.table}\">\n    <thead class=\"${v.tableHeader} ${p ? `${v.tableBordered}` : \"\"} ${u ? `${v.borderless}` : \"\"} ${v.borderColor}\" ${cT}>\n      <tr>\n        ${y}\n      </tr>\n    </thead>\n    <tbody class=\"${g ? `${v.fixedHeaderBody}` : \"\"}\">\n      ${r ? \"\" : T}\n    </tbody>\n  </table>\n</div>\n${r ? `\n  <div class=\"${v.loadingItemsWrapper}\">\n    <div class=\"${v.loadingProgressBarWrapper}\">\n      <div class=\"${v.loadingProgressBar}\"></div>\n    </div>\n  </div>\n<p class=\"${v.loadingMessage}\">${a}</p>\n` : \"\"}\n${l.enable ? tT(l, r, p) : \"\"}\n  `,\n        rows: T,\n        column: y\n    };\n}, hT = ({ rows: s, field: t, order: e })=>s.sort((n, o)=>{\n        let r = n[t], a = o[t];\n        return typeof r == \"string\" && (r = r.toLowerCase()), typeof a == \"string\" && (a = a.toLowerCase()), r < a ? e === \"desc\" ? 1 : -1 : r > a ? e === \"desc\" ? -1 : 1 : 0;\n    }), dT = (s, t, e)=>{\n    if (!t) return s;\n    const i = (n)=>{\n        const o = document.createElement(\"div\");\n        return o.innerHTML = n, n = o.textContent || o.innerText || \"\", n.toString().toLowerCase().match(t.toLowerCase());\n    };\n    return s.filter((n)=>{\n        if (e && typeof e == \"string\") return i(n[e]);\n        let o = Object.values(n);\n        return e && Array.isArray(e) && (o = Object.keys(n).filter((r)=>e.includes(r)).map((r)=>n[r])), o.filter((r)=>i(r)).length > 0;\n    });\n}, Bl = ({ rows: s, entries: t, activePage: e })=>{\n    const i = e * t;\n    return s.slice(i, i + Number(t));\n}, Vi = \"datatable\", gt = `data-te-${Vi}`, ki = `te.${Vi}`, An = `.${ki}`, uT = `[${gt}-inner-ref]`, wo = `[${gt}-cell-ref]`, pT = `[${gt}-header-ref]`, _T = `[${gt}-header-checkbox-ref]`, fT = `[${gt}-pagination-right-ref]`, mT = `[${gt}-pagination-left-ref]`, gT = `[${gt}-pagination-start-ref]`, bT = `[${gt}-pagination-end-ref]`, vT = `[${gt}-pagination-nav-ref]`, TT = `[${gt}-select-ref]`, ko = `[${gt}-sort-icon-ref]`, Ti = `[${gt}-row-ref]`, xo = `[${gt}-row-checkbox-ref]`, ET = `selectRows${An}`, Hl = `render${An}`, CT = `rowClick${An}`, AT = `update${An}`, yT = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 10.5L12 3m0 0l7.5 7.5M12 3v18\" />\n</svg>`, wT = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\" />\n</svg>`, kT = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\n</svg>`, xT = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\n</svg>`, OT = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5\"/>\n</svg>`, ST = \"border-neutral-200 dark:border-neutral-500\", IT = \"border-none\", DT = \"relative float-left -ml-[1.5rem] mr-[6px] mt-[0.15rem] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:border-neutral-400\", $T = \"mb-[0.125rem] min-h-[1.5rem] pl-[1.5rem] ml-3 flex items-center\", LT = \"relative float-left -ml-[1.5rem] mr-[6px] mt-[0.15rem] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:border-neutral-400\", NT = \"mb-[0.125rem] min-h-[1.5rem] pl-[1.5rem] ml-3 flex items-center\", MT = \"bg-white dark:bg-neutral-800\", RT = \"py-4 pl-1 text-clip overflow-hidden text-[#212529] dark:text-white\", PT = \"focus:outline-none\", BT = \"sticky top-0 z-30\", HT = \"sticky z-10 bg-inherit\", VT = \"hover:bg-neutral-100 dark:hover:bg-neutral-700\", WT = \"pointer-events-none cursor-none text-neutral-400 dark:text-neutral-300\", FT = \"h-[2px] relative w-full overflow-hidden\", YT = \"text-center text-neutral-500 font-ligh text-sm my-4 dark:text-neutral-400\", jT = \"text-neutral-500 dark:text-neutral-300\", KT = \"text-neutral-500 dark:text-neutral-300\", zT = \"pointer-events-none cursor-none\", UT = \"h-full w-[45%] bg-primary-400 dark:bg-primary-600\", XT = \"h-full animate-[progress_3s_ease-in-out_infinite]\", GT = \"pl-2 py-3 font-light text-sm dark:text-neutral-300\", qT = \"border-b\", ZT = \"flex md:flex-row justify-end items-center py-2 space-x-4 text-sm flex-col leading-[1.6]\", QT = \"border border-t-0\", JT = \"order-1 my-3 md:order-none md:my-0 md:pr-1\", tE = \"inline-block rounded p-2.5 text-xs font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\", eE = \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\", iE = \"font-normal order-2 mb-3 md:order-none md:mb-0\", sE = \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\", nE = \"font-light\", oE = \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\", rE = \"border-b\", aE = \"transition ease-in-out duration-300 motion-reduce:transition-none\", lE = \"whitespace-nowrap text-clip overflow-auto px-[1.4rem] py-4\", cE = \"relative\", hE = \"!bg-neutral-100 dark:!bg-neutral-600\", dE = \"flex items-center space-x-4 order-3 md:order-none\", uE = \"w-[70px]\", pE = \"!py-2\", _E = \"w-[15px] h-[10px] origin-bottom font-black mr-1 opacity-0 text-neutral-500 group-hover:opacity-100 transition hover:ease-in-out transform ease-linear duration-300 motion-reduce:transition-none dark:text-neutral-400\", fE = \"flex flex-row group\", mE = \"[&:nth-child(odd)]:bg-neutral-50 [&:nth-child(odd)]:dark:bg-neutral-700\", gE = \"border\", bE = \"border-b font-normal px-[1.4rem]\", vE = \"text-left text-sm font-light w-full leading-[1.6]\", TE = {\n    bordered: \"boolean\",\n    borderless: \"boolean\",\n    clickableRows: \"boolean\",\n    defaultValue: \"string\",\n    edit: \"boolean\",\n    entries: \"(number|string)\",\n    entriesOptions: \"array\",\n    fullPagination: \"boolean\",\n    hover: \"boolean\",\n    loading: \"boolean\",\n    loadingMessage: \"string\",\n    maxWidth: \"(null|number|string)\",\n    maxHeight: \"(null|number|string)\",\n    multi: \"boolean\",\n    noFoundMessage: \"string\",\n    pagination: \"boolean\",\n    selectable: \"boolean\",\n    sm: \"boolean\",\n    sortField: \"(null|string)\",\n    sortOrder: \"string\",\n    fixedHeader: \"boolean\",\n    striped: \"boolean\",\n    rowsText: \"string\",\n    ofText: \"string\",\n    allText: \"string\",\n    forceSort: \"boolean\",\n    sortIconTemplate: \"string\",\n    paginationStartIconTemplate: \"string\",\n    paginationEndIconTemplate: \"string\",\n    paginationLeftIconTemplate: \"string\",\n    paginationRightIconTemplate: \"string\"\n}, EE = {\n    bordered: !1,\n    borderless: !1,\n    clickableRows: !1,\n    defaultValue: \"-\",\n    edit: !1,\n    entries: 10,\n    entriesOptions: [\n        10,\n        25,\n        50,\n        200\n    ],\n    fixedHeader: !1,\n    fullPagination: !1,\n    hover: !1,\n    loading: !1,\n    loadingMessage: \"Loading results...\",\n    maxWidth: null,\n    maxHeight: null,\n    multi: !1,\n    noFoundMessage: \"No matching results found\",\n    pagination: !0,\n    selectable: !1,\n    sm: !1,\n    sortField: null,\n    sortOrder: \"asc\",\n    striped: !1,\n    rowsText: \"Rows per page:\",\n    ofText: \"of\",\n    allText: \"All\",\n    forceSort: !1,\n    sortIconTemplate: yT,\n    paginationStartIconTemplate: wT,\n    paginationEndIconTemplate: OT,\n    paginationLeftIconTemplate: kT,\n    paginationRightIconTemplate: xT\n}, CE = {\n    label: \"string\",\n    field: \"string\",\n    fixed: \"(boolean|string)\",\n    format: \"(function|null)\",\n    width: \"(number|null)\",\n    sort: \"boolean\",\n    columnIndex: \"number\"\n}, AE = {\n    label: \"\",\n    field: \"\",\n    fixed: !1,\n    format: null,\n    width: null,\n    sort: !0,\n    columnIndex: 0\n}, yE = {\n    table: vE,\n    tableHeader: bE,\n    column: RT,\n    pagination: ZT,\n    selectWrapper: uE,\n    scroll: cE,\n    tableBordered: gE,\n    paginationBordered: QT,\n    borderless: IT,\n    checkboxRowWrapper: NT,\n    checkboxRow: LT,\n    checkboxHeaderWrapper: $T,\n    checkboxHeader: DT,\n    row: rE,\n    rowItem: lE,\n    striped: mE,\n    sortIconWrapper: fE,\n    sortIcon: _E,\n    paginationRowsText: nE,\n    paginationNav: iE,\n    paginationButtonsWrapper: JT,\n    hoverRow: VT,\n    borderColor: ST,\n    color: MT,\n    fixedHeader: BT,\n    fixedHeaderBody: HT,\n    selectableRow: hE,\n    rowAnimation: aE,\n    sm: pE,\n    edit: PT,\n    selectItemsWrapper: dE,\n    paginationStartButton: oE,\n    paginationLeftButton: eE,\n    paginationRightButton: sE,\n    paginationEndButton: tE,\n    loadingItemsWrapper: FT,\n    loadingProgressBarWrapper: XT,\n    loadingProgressBar: UT,\n    loadingMessage: YT,\n    loadingPaginationRowsText: KT,\n    loadingPaginationSelectWrapper: zT,\n    loadingPaginationNav: jT,\n    loadingColumn: WT,\n    noFoundMessageWrapper: qT,\n    noFoundMessage: GT\n}, wE = {\n    table: \"string\",\n    tableHeader: \"string\",\n    column: \"string\",\n    pagination: \"string\",\n    selectWrapper: \"string\",\n    scroll: \"string\",\n    tableBordered: \"string\",\n    paginationBordered: \"string\",\n    borderless: \"string\",\n    checkboxRowWrapper: \"string\",\n    checkboxRow: \"string\",\n    checkboxHeaderWrapper: \"string\",\n    checkboxHeader: \"string\",\n    row: \"string\",\n    rowItem: \"string\",\n    striped: \"string\",\n    sortIconWrapper: \"string\",\n    sortIcon: \"string\",\n    paginationRowsText: \"string\",\n    paginationNav: \"string\",\n    paginationButtonsWrapper: \"string\",\n    hoverRow: \"string\",\n    borderColor: \"string\",\n    color: \"string\",\n    fixedHeader: \"string\",\n    fixedHeaderBody: \"string\",\n    selectableRow: \"string\",\n    rowAnimation: \"string\",\n    sm: \"string\",\n    edit: \"string\",\n    selectItemsWrapper: \"string\",\n    paginationStartButton: \"string\",\n    paginationLeftButton: \"string\",\n    paginationRightButton: \"string\",\n    paginationEndButton: \"string\",\n    loadingItemsWrapper: \"string\",\n    loadingProgressBarWrapper: \"string\",\n    loadingProgressBar: \"string\",\n    loadingMessage: \"string\",\n    loadingPaginationRowsText: \"string\",\n    loadingPaginationSelectWrapper: \"string\",\n    loadingPaginationNav: \"string\",\n    loadingColumn: \"string\",\n    noFoundMessageWrapper: \"string\",\n    noFoundMessage: \"string\"\n};\nclass Hh {\n    constructor(t, e = {}, i = {}, n = {}){\n        this._element = t, this._options = this._getOptions(i), this._classes = this._getClasses(n), this._sortReverse = !1, this._activePage = 0, this._search = \"\", this._searchColumn = null, this._paginationLeft = null, this._paginationRight = null, this._paginationStart = null, this._paginationEnd = null, this._select = null, this._selectInstance = null, this._selected = [], this._checkboxes = null, this._headerCheckbox = null, this._rows = this._getRows(e.rows), this._columns = this._getColumns(e.columns), this._element && (A.setData(t, ki, this), this._perfectScrollbar = null, this._setup());\n    }\n    // Getters\n    static get NAME() {\n        return Vi;\n    }\n    get columns() {\n        return this._columns.map((t, e)=>{\n            let i = {\n                ...AE,\n                field: `field_${e}`,\n                columnIndex: e\n            };\n            return typeof t == \"string\" ? i.label = t : typeof t == \"object\" && (i = {\n                ...i,\n                ...t\n            }), I(\"column\", i, CE), i;\n        });\n    }\n    get rows() {\n        return this._rows.map((t, e)=>{\n            const i = {\n                rowIndex: e\n            };\n            return Array.isArray(t) ? this.columns.forEach((n, o)=>{\n                t[o] === 0 ? i[n.field] = t[o] : i[n.field] = t[o] || this._options.defaultValue;\n            }) : typeof t == \"object\" && this.columns.forEach((n)=>{\n                t[n.field] === 0 ? i[n.field] = t[n.field] : i[n.field] = t[n.field] || this._options.defaultValue;\n            }), i;\n        });\n    }\n    get searchResult() {\n        return dT(this.rows, this._search, this._searchColumn);\n    }\n    get computedRows() {\n        let t = [\n            ...this.searchResult\n        ];\n        return this._options.sortOrder && (t = hT({\n            rows: t,\n            field: this._options.sortField,\n            order: this._options.sortOrder\n        })), this._options.pagination && (this._options.entries === \"All\" ? t = Bl({\n            rows: t,\n            entries: t.length,\n            activePage: this._activePage\n        }) : t = Bl({\n            rows: t,\n            entries: this._options.entries,\n            activePage: this._activePage\n        })), t;\n    }\n    get pages() {\n        return this._options.entries === \"All\" ? 1 : Math.ceil(this.searchResult.length / this._options.entries);\n    }\n    get navigationText() {\n        const t = this._activePage * this._options.entries;\n        return this.searchResult.length === 0 ? `0 ${this._options.ofText} 0` : this._options.entries === \"All\" ? `1 - ${this.searchResult.length} ${this._options.ofText} ${this.searchResult.length}` : `${t + 1} - ${this.computedRows.length + t} ${this._options.ofText} ${this.searchResult.length}`;\n    }\n    get tableOptions() {\n        return {\n            classes: this._classes,\n            columns: this.columns,\n            rows: this.computedRows,\n            noFoundMessage: this._options.noFoundMessage,\n            edit: this._options.edit,\n            loading: this._options.loading,\n            loaderClass: this._options.loaderClass,\n            loadingMessage: this._options.loadingMessage,\n            selectable: this._options.selectable,\n            multi: this._options.multi,\n            bordered: this._options.bordered,\n            borderless: this._options.borderless,\n            striped: this._options.striped,\n            hover: this._options.hover,\n            fixedHeader: this._options.fixedHeader,\n            sm: this._options.sm,\n            sortIconTemplate: this._options.sortIconTemplate,\n            pagination: {\n                enable: this._options.pagination,\n                text: this.navigationText,\n                entries: this._options.entries,\n                entriesOptions: this._options.entriesOptions,\n                fullPagination: this._options.fullPagination,\n                rowsText: this._options.rowsText,\n                ofText: this._options.ofText,\n                allText: this._options.allText,\n                paginationStartIconTemplate: this._options.paginationStartIconTemplate,\n                paginationLeftIconTemplate: this._options.paginationLeftIconTemplate,\n                paginationRightIconTemplate: this._options.paginationRightIconTemplate,\n                paginationEndIconTemplate: this._options.paginationEndIconTemplate,\n                classes: this._classes\n            },\n            forceSort: this._options.forceSort\n        };\n    }\n    // Public\n    update(t, e = {}) {\n        t && t.rows && (this._rows = t.rows), t && t.columns && (this._columns = t.columns), this._clearClassList(e), this._options = this._getOptions({\n            ...this._options,\n            ...e\n        }), this._setup(), this._performSort();\n    }\n    dispose() {\n        this._selectInstance && this._selectInstance.dispose(), A.removeData(this._element, ki), this._removeEventListeners(), this._perfectScrollbar.destroy(), this._element = null;\n    }\n    search(t, e) {\n        this._search = t, this._searchColumn = e, this._activePage = 0, this._options.pagination && this._toggleDisableState(), this._renderRows(), this._options.maxHeight && (this._perfectScrollbar.element.scrollTop = 0, this._perfectScrollbar.update());\n    }\n    sort(t, e = \"asc\") {\n        this._options.sortOrder = e, typeof t == \"string\" ? this._options.sortField = this.columns.find((n)=>n.label === t).field : this._options.sortField = t.field;\n        const i = d.findOne(`[data-te-sort=\"${this._options.sortField}\"]`, this._element);\n        this._activePage = 0, this._toggleDisableState(), this._renderRows(), this._setActiveSortIcon(i);\n    }\n    setActivePage(t) {\n        t < this.pages && this._changeActivePage(t);\n    }\n    // Private\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...yE,\n            ...e,\n            ...t\n        }, I(Vi, t, wE), t;\n    }\n    _changeActivePage(t) {\n        this._activePage = t, this._toggleDisableState(), this._renderRows();\n    }\n    _clearClassList(t) {\n        [\n            \"hover\",\n            \"bordered\",\n            \"borderless\",\n            \"sm\",\n            \"striped\"\n        ].forEach((e)=>{\n            this._options[e] && !t[e] && h.removeDataAttribute(`data-te-${e}`);\n        });\n    }\n    _emitSelectEvent() {\n        c.trigger(this._element, ET, {\n            selectedRows: this.rows.filter((t)=>this._selected.indexOf(t.rowIndex) !== -1),\n            selectedIndexes: this._selected,\n            allSelected: this._selected.length === this.rows.length\n        });\n    }\n    _getRows(t = []) {\n        const e = d.findOne(\"tbody\", this._element);\n        return e ? [\n            ...d.find(\"tr\", e).map((n)=>d.find(\"td\", n).map((o)=>o.innerHTML)),\n            ...t\n        ] : t;\n    }\n    _getColumns(t = []) {\n        const e = d.findOne(\"thead\", this._element);\n        if (!e) return t;\n        const i = d.findOne(\"tr\", e);\n        return [\n            ...d.find(\"th\", i).map((o)=>({\n                    label: o.innerHTML,\n                    ...h.getDataAttributes(o)\n                })),\n            ...t\n        ];\n    }\n    _getCSSValue(t) {\n        return typeof t == \"string\" ? t : `${t}px`;\n    }\n    _getOptions(t) {\n        const e = {\n            ...EE,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Vi, e, TE), e;\n    }\n    _setActiveRows() {\n        d.find(Ti, this._element).forEach((t)=>{\n            this._selected.includes(h.getDataAttribute(t, \"index\")) ? h.addClass(t, `active ${this._classes.selectableRow}`) : h.removeClass(t, `active ${this._classes.selectableRow}`);\n        });\n    }\n    _setEntries(t) {\n        this._options = this._getOptions({\n            ...this._options,\n            entries: t.target.value\n        }), this._activePage > this.pages - 1 && (this._activePage = this.pages - 1), this._toggleDisableState(), this._renderRows();\n    }\n    _setSelected() {\n        d.find(xo, this._element).forEach((t)=>{\n            const e = h.getDataAttribute(t, \"rowIndex\");\n            t.checked = this._selected.includes(e);\n        }), this._setActiveRows();\n    }\n    _setActiveSortIcon(t) {\n        d.find(ko, this._element).forEach((e)=>{\n            const i = this._options.sortOrder === \"desc\" && e === t ? 180 : 0;\n            h.style(e, {\n                transform: `rotate(${i}deg)`\n            }), e === t && this._options.sortOrder ? h.addClass(e, \"opacity-100\") : h.removeClass(e, \"opacity-100\");\n        });\n    }\n    _setup() {\n        this._renderTable(), this._options.pagination && this._setupPagination(), this._options.edit && this._setupEditable(), this._options.clickableRows && this._setupClickableRows(), this._options.selectable && this._setupSelectable(), this._setupScroll(), this._setupSort();\n    }\n    _setupClickableRows() {\n        d.find(Ti, this._element).forEach((t)=>{\n            const e = h.getDataAttribute(t, \"index\");\n            h.addClass(t, \"cursor-pointer\"), c.on(t, \"click\", (i)=>{\n                d.matches(i.target, xo) || c.trigger(this._element, CT, {\n                    index: e,\n                    row: this.rows[e]\n                });\n            });\n        });\n    }\n    _setupEditable() {\n        d.find(Ti, this._element).forEach((t)=>{\n            const e = h.getDataAttribute(t, \"index\");\n            d.find(wo, t).forEach((i)=>{\n                c.on(i, \"input\", (n)=>this._updateRow(n, e));\n            });\n        });\n    }\n    _setupScroll() {\n        const t = d.findOne(uT, this._element), e = {};\n        if (this._options.maxHeight && (e.maxHeight = this._getCSSValue(this._options.maxHeight)), this._options.maxWidth) {\n            const i = this._getCSSValue(this._options.maxWidth);\n            e.maxWidth = i, h.style(this._element, {\n                maxWidth: i\n            });\n        }\n        if (h.style(t, e), h.addClass(t, `${this._classes.scroll}`), this._options.fixedHeader) {\n            let i = d.find(pT, this._element);\n            this._options.selectable && (i = i.filter((n, o)=>(h.addClass(n, `${this._classes.fixedHeader} ${this._classes.color}`), o !== 0))), i.forEach((n, o)=>{\n                h.addClass(n, `${this._classes.fixedHeader} ${this._classes.color}`), this.columns[o].fixed && h.addClass(n, \"!z-40\");\n            });\n        }\n        this._perfectScrollbar = new Bh(t);\n    }\n    _setupSort() {\n        d.find(ko, this._element).forEach((t)=>{\n            const e = h.getDataAttribute(t, \"sort\"), [i] = d.parents(t, \"th\");\n            if (this.columns.sort) h.addClass(i, \"cursor-pointer\");\n            else return;\n            e === this._options.sortField && this._setActiveSortIcon(t), c.on(i, \"click\", ()=>{\n                this._options.sortField === e && this._options.sortOrder === \"asc\" ? this._options.sortOrder = \"desc\" : this._options.sortField === e && this._options.sortOrder === \"desc\" ? this._options.sortOrder = this._options.forceSort ? \"asc\" : null : this._options.sortOrder = \"asc\", this._options.sortField = e, this._activePage = 0, this._performSort(), this._setActiveSortIcon(t);\n            });\n        });\n    }\n    _performSort() {\n        this._toggleDisableState(), this._renderRows();\n    }\n    _setupSelectable() {\n        this._checkboxes = d.find(xo, this._element), this._headerCheckbox = d.findOne(_T, this._element), c.on(this._headerCheckbox, \"input\", (t)=>this._toggleSelectAll(t)), this._checkboxes.forEach((t)=>{\n            const e = h.getDataAttribute(t, \"rowIndex\");\n            c.on(t, \"input\", (i)=>this._toggleSelectRow(i, e));\n        });\n    }\n    _setupPagination() {\n        this._paginationRight = d.findOne(fT, this._element), this._paginationLeft = d.findOne(mT, this._element), c.on(this._paginationRight, \"click\", ()=>this._changeActivePage(this._activePage + 1)), c.on(this._paginationLeft, \"click\", ()=>this._changeActivePage(this._activePage - 1)), this._options.fullPagination && (this._paginationStart = d.findOne(gT, this._element), this._paginationEnd = d.findOne(bT, this._element), c.on(this._paginationStart, \"click\", ()=>this._changeActivePage(0)), c.on(this._paginationEnd, \"click\", ()=>this._changeActivePage(this.pages - 1))), this._toggleDisableState(), this._setupPaginationSelect();\n    }\n    _setupPaginationSelect() {\n        this._select = d.findOne(TT, this._element), this._selectInstance = new kr(this._select), c.on(this._select, \"valueChange.te.select\", (t)=>this._setEntries(t));\n    }\n    _removeEventListeners() {\n        this._options.pagination && (c.off(this._paginationRight, \"click\"), c.off(this._paginationLeft, \"click\"), c.off(this._select, \"valueChange.te.select\"), this._options.fullPagination && (c.off(this._paginationStart, \"click\"), c.off(this._paginationEnd, \"click\"))), this._options.edit && d.find(wo, this._element).forEach((t)=>{\n            c.off(t, \"input\");\n        }), this._options.clickableRows && d.find(Ti, this._element).forEach((t)=>{\n            c.off(t, \"click\");\n        }), d.find(ko, this._element).forEach((t)=>{\n            const [e] = d.parents(t, \"th\");\n            c.off(e, \"click\");\n        }), this._options.selectable && (c.off(this._headerCheckbox, \"input\"), this._checkboxes.forEach((t)=>{\n            c.off(t, \"input\");\n        }));\n    }\n    _renderTable() {\n        this._element.innerHTML = Pl(this.tableOptions).table, this._formatCells(), c.trigger(this._element, Hl);\n    }\n    _renderRows() {\n        const t = d.findOne(\"tbody\", this._element);\n        if (this._options.pagination) {\n            const e = d.findOne(vT, this._element);\n            e.innerText = this.navigationText;\n        }\n        t.innerHTML = Pl(this.tableOptions).rows, this._formatCells(), this._options.edit && this._setupEditable(), this._options.selectable && (this._setupSelectable(), this._setSelected()), this._options.clickableRows && this._setupClickableRows(), c.trigger(this._element, Hl);\n    }\n    _formatCells() {\n        d.find(Ti, this._element).forEach((e)=>{\n            const i = h.getDataAttribute(e, \"index\");\n            d.find(wo, e).forEach((o)=>{\n                const r = h.getDataAttribute(o, \"field\"), a = this.columns.find((l)=>l.field === r);\n                a && a.format !== null && a.format(o, this.rows[i][r]);\n            });\n        });\n    }\n    _toggleDisableState() {\n        this._options.pagination !== !1 && (this._activePage === 0 || this._options.loading ? (this._paginationLeft.setAttribute(\"disabled\", \"\"), this._options.fullPagination && this._paginationStart.setAttribute(\"disabled\", \"\")) : (this._paginationLeft.removeAttribute(\"disabled\"), this._options.fullPagination && this._paginationStart.removeAttribute(\"disabled\")), this._activePage === this.pages - 1 || this._options.loading || this.pages === 0 ? (this._paginationRight.setAttribute(\"disabled\", \"\"), this._options.fullPagination && this._paginationEnd.setAttribute(\"disabled\", \"\")) : (this._paginationRight.removeAttribute(\"disabled\"), this._options.fullPagination && this._paginationEnd.removeAttribute(\"disabled\")));\n    }\n    _toggleSelectAll(t) {\n        t.target.checked ? this._selected = this.rows.map((e)=>e.rowIndex) : this._selected = [], this._setSelected(), this._emitSelectEvent();\n    }\n    _toggleSelectRow(t, e) {\n        t.target.checked ? this._options.multi && !this._selected.includes(e) ? this._selected = [\n            ...this._selected,\n            e\n        ] : (this._selected = [\n            e\n        ], this._checkboxes.forEach((i)=>{\n            i !== t.target && (i.checked = !1);\n        })) : this._selected = this._selected.filter((i)=>i !== e), this._options.multi && !t.target.checked && (this._headerCheckbox.checked = !1), this._setActiveRows(), this._emitSelectEvent();\n    }\n    _updateRow(t, e) {\n        const i = h.getDataAttribute(t.target, \"field\"), n = t.target.textContent, o = this._rows[e];\n        if (Array.isArray(o)) {\n            const a = this.columns.find((l)=>l.field === i).columnIndex;\n            o[a] = n;\n        } else o[i] = n;\n        c.trigger(this._element, AT, {\n            rows: this._rows,\n            columns: this._columns\n        });\n    }\n    static jQueryInterface(t, e, i) {\n        return this.each(function() {\n            let n = A.getData(this, ki);\n            const o = typeof t == \"object\" && t;\n            if (!(!n && /dispose/.test(t)) && (n || (n = new Hh(this, o, e)), typeof t == \"string\")) {\n                if (typeof n[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                n[t](e, i);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, ki);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Vl = \"rating\", sn = \"te.rating\", kE = \"data-te-rating-init\", xE = \"[data-te-rating-icon-ref]\", ci = `.${sn}`, OE = \"ArrowLeft\", SE = \"ArrowRight\", IE = {\n    tooltip: \"string\",\n    value: \"(string|number)\",\n    readonly: \"boolean\",\n    after: \"string\",\n    before: \"string\",\n    dynamic: \"boolean\",\n    active: \"string\"\n}, DE = {\n    tooltip: \"top\",\n    value: \"\",\n    readonly: !1,\n    after: \"\",\n    before: \"\",\n    dynamic: !1,\n    active: \"fill-current\"\n}, Wl = `onSelect${ci}`, $E = `onHover${ci}`, Fl = `keyup${ci}`, Yl = `focusout${ci}`, jl = `keydown${ci}`, Kl = `mousedown${ci}`;\nclass GA {\n    constructor(t, e){\n        this._element = t, this._icons = d.find(xE, this._element), this._options = this._getConfig(e), this._index = -1, this._savedIndex = null, this._originalClassList = [], this._originalIcons = [], this._fn = {}, this._tooltips = [], this._element && (A.setData(t, sn, this), this._init());\n    }\n    // Getters\n    static get NAME() {\n        return Vl;\n    }\n    dispose() {\n        A.removeData(this._element, sn), this._options.readonly || (c.off(this._element, Fl), c.off(this._element, Yl), c.off(this._element, jl), this._element.removeEventListener(\"mouseleave\", this._fn.mouseleave), this._icons.forEach((t, e)=>{\n            c.off(t, Kl), t.removeEventListener(\"mouseenter\", this._fn.mouseenter[e]), h.removeClass(t, \"cursor-pointer\");\n        }), this._tooltips.forEach((t)=>{\n            t._element.removeAttribute(kE), t.dispose();\n        }), this._icons.forEach((t)=>t.removeAttribute(\"tabIndex\"))), this._element = null;\n    }\n    // Private\n    _init() {\n        this._options.readonly || (this._bindMouseEnter(), this._bindMouseLeave(), this._bindMouseDown(), this._bindKeyDown(), this._bindKeyUp(), this._bindFocusLost(), this._icons.forEach((t)=>{\n            h.addClass(t, \"cursor-pointer\");\n        })), this._options.dynamic && (this._saveOriginalClassList(), this._saveOriginalIcons()), this._setCustomText(), this._setToolTips(), this._options.value && (this._index = this._options.value - 1, this._updateRating(this._index));\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...DE,\n            ...e,\n            ...t\n        }, I(Vl, t, IE), t;\n    }\n    _bindMouseEnter() {\n        this._fn.mouseenter = [], this._icons.forEach((t, e)=>{\n            t.addEventListener(\"mouseenter\", // this._fn.mouseenter[i] is needed to create reference and unpin events after call dispose\n            // prettier-ignore\n            this._fn.mouseenter[e] = (i)=>{\n                this._index = this._icons.indexOf(i.target), this._updateRating(this._index), this._triggerEvents(t, $E);\n            });\n        });\n    }\n    _bindMouseLeave() {\n        this._element.addEventListener(\"mouseleave\", // this._fn.mouseleave is needed to create reference and unpin events after call dispose\n        // prettier-ignore\n        this._fn.mouseleave = ()=>{\n            this._savedIndex !== null ? (this._updateRating(this._savedIndex), this._index = this._savedIndex) : this._options.value ? (this._updateRating(this._options.value - 1), this._index = this._options.value - 1) : (this._index = -1, this._clearRating());\n        });\n    }\n    _bindMouseDown() {\n        this._icons.forEach((t)=>{\n            c.on(t, Kl, ()=>{\n                this._setElementOutline(\"none\"), this._savedIndex = this._index, this._triggerEvents(t, Wl);\n            });\n        });\n    }\n    _bindKeyDown() {\n        this._element.tabIndex = 0, c.on(this._element, jl, (t)=>this._updateAfterKeyDown(t));\n    }\n    _bindKeyUp() {\n        c.on(this._element, Fl, ()=>this._setElementOutline(\"auto\"));\n    }\n    _bindFocusLost() {\n        c.on(this._element, Yl, ()=>this._setElementOutline(\"none\"));\n    }\n    _setElementOutline(t) {\n        this._element.style.outline = t;\n    }\n    _triggerEvents(t, e) {\n        c.trigger(t, e, {\n            value: this._index + 1\n        });\n    }\n    _updateAfterKeyDown(t) {\n        const e = this._icons.length - 1, i = this._index;\n        t.key === SE && this._index < e && (this._index += 1), t.key === OE && this._index > -1 && (this._index -= 1), i !== this._index && (this._savedIndex = this._index, this._updateRating(this._savedIndex), this._triggerEvents(this._icons[this._savedIndex], Wl));\n    }\n    _updateRating(t) {\n        this._clearRating(), this._options.dynamic && this._restoreOriginalIcon(t), this._icons.forEach((e, i)=>{\n            i <= t && h.addClass(e.querySelector(\"svg\"), this._options.active);\n        });\n    }\n    _clearRating() {\n        this._icons.forEach((t, e)=>{\n            const i = t.querySelector(\"svg\");\n            this._options.dynamic && (t.classList = this._originalClassList[e], i.innerHTML = this._originalIcons[e]), h.removeClass(i, this._options.active);\n        });\n    }\n    _setToolTips() {\n        this._icons.forEach((t, e)=>{\n            const i = h.getDataAttribute(t, \"toggle\");\n            t.title && !i && (h.setDataAttribute(t, \"toggle\", \"tooltip\"), this._tooltips[e] = new ri(t, {\n                placement: this._options.tooltip\n            }));\n        });\n    }\n    _setCustomText() {\n        this._icons.forEach((t)=>{\n            const e = h.getDataAttribute(t, \"after\"), i = h.getDataAttribute(t, \"before\");\n            e && t.insertAdjacentHTML(\"afterEnd\", e), i && t.insertAdjacentHTML(\"beforeBegin\", i);\n        });\n    }\n    _saveOriginalClassList() {\n        this._icons.forEach((t)=>{\n            const e = t.classList.value;\n            this._originalClassList.push(e);\n        });\n    }\n    _saveOriginalIcons() {\n        this._icons.forEach((t)=>{\n            const e = t.querySelector(\"svg\").innerHTML;\n            this._originalIcons.push(e);\n        });\n    }\n    _restoreOriginalIcon(t) {\n        const e = this._originalClassList[t], i = this._originalIcons[t];\n        this._icons.forEach((n, o)=>{\n            if (o <= t) {\n                const r = n.querySelector(\"svg\");\n                r.innerHTML = i, n.classList = e;\n            }\n        });\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, sn);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Oo = \"popconfirm\", xi = \"te.popconfirm\", Vh = `.${xi}`, LE = `cancel${Vh}`, NE = `confirm${Vh}`, ME = \"[data-te-popconfirm-body]\", So = \"data-te-popconfirm-popover\", RE = \"data-te-popconfirm-modal\", zl = \"data-te-popconfirm-backdrop\", PE = {\n    popconfirmMode: \"string\",\n    message: \"string\",\n    cancelText: \"(null|string)\",\n    okText: \"(null|string)\",\n    popconfirmIconTemplate: \"string\",\n    cancelLabel: \"(null|string)\",\n    confirmLabel: \"(null|string)\",\n    position: \"(null|string)\"\n}, BE = {\n    popconfirmMode: \"inline\",\n    message: \"Are you sure?\",\n    cancelText: \"Cancel\",\n    okText: \"OK\",\n    popconfirmIconTemplate: \"\",\n    cancelLabel: \"Cancel\",\n    confirmLabel: \"Confirm\",\n    position: \"bottom\"\n}, HE = {\n    backdrop: \"string\",\n    body: \"string\",\n    btnCancel: \"string\",\n    btnConfirm: \"string\",\n    btnsContainer: \"string\",\n    fade: \"string\",\n    icon: \"string\",\n    message: \"string\",\n    messageText: \"string\",\n    modal: \"string\",\n    popover: \"string\"\n}, VE = {\n    backdrop: \"h-full w-full z-[1070] fixed top-0 left-0 bg-[#00000066] flex justify-center items-center\",\n    body: \"p-[1rem] bg-white rounded-[0.5rem] opacity-0 dark:bg-neutral-700\",\n    btnCancel: \"inline-block rounded bg-primary-100 px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-100 focus:bg-primary-accent-100 focus:outline-none focus:ring-0 active:bg-primary-accent-200\",\n    btnConfirm: \"inline-block rounded bg-primary px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]\",\n    btnsContainer: \"flex justify-end space-x-2\",\n    fade: \"transition-opacity duration-[150ms] ease-linear\",\n    icon: \"pr-2\",\n    message: \"flex mb-3\",\n    messageText: \"text-neutral-600 dark:text-white\",\n    modal: \"absolute w-[300px] z-[1080] shadow-sm rounded-[0.5rem]\",\n    popover: \"w-[300px] border-0 rounded-[0.5rem] z-[1080] shadow-sm\"\n};\nclass Wh {\n    constructor(t, e, i){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._popper = null, this._cancelButton = \"\", this._confirmButton = \"\", this._isOpen = !1, this._uid = this._element.id ? `popconfirm-${this._element.id}` : et(\"popconfirm-\"), t && A.setData(t, xi, this), this._clickHandler = this.open.bind(this), c.on(this._element, \"click\", this._clickHandler);\n    }\n    // Getters\n    static get NAME() {\n        return Oo;\n    }\n    get container() {\n        return d.findOne(`#${this._uid}`);\n    }\n    get popconfirmBody() {\n        return d.findOne(ME, this.container);\n    }\n    // Public\n    dispose() {\n        (this._isOpen || this.container !== null) && this.close(), A.removeData(this._element, xi), c.off(this._element, \"click\", this._clickHandler), this._element = null;\n    }\n    open() {\n        this._isOpen || (this._options.popconfirmMode === \"inline\" ? this._openPopover(this._getPopoverTemplate()) : this._openModal(this._getModalTemplate()), this._handleCancelButtonClick(), this._handleConfirmButtonClick(), this._listenToEscapeKey(), this._listenToOutsideClick());\n    }\n    close() {\n        if (this._isOpen) {\n            if (this._popper !== null || d.findOne(`[${So}]`) !== null) c.on(this.popconfirmBody, \"transitionend\", this._handlePopconfirmTransitionEnd.bind(this)), h.removeClass(this.popconfirmBody, \"opacity-100\");\n            else {\n                const t = d.findOne(`[${zl}]`);\n                h.removeClass(this.popconfirmBody, \"opacity-100\"), document.body.removeChild(t), this._isOpen = !1;\n            }\n            c.off(document, \"click\", this._handleOutsideClick.bind(this)), c.off(document, \"keydown\", this._handleEscapeKey.bind(this));\n        }\n    }\n    _handlePopconfirmTransitionEnd(t) {\n        if (t.target !== this.popconfirmBody) return;\n        const e = d.findOne(`[${So}]`);\n        c.off(this.popconfirmBody, \"transitionend\"), this._isOpen && t && t.propertyName === \"opacity\" && (this._popper.destroy(), e && document.body.removeChild(e), this._isOpen = !1);\n    }\n    // Private\n    _getPopoverTemplate() {\n        const t = $(\"div\"), e = this._getPopconfirmTemplate();\n        return t.setAttribute(So, \"\"), h.addClass(t, this._classes.popover), t.id = this._uid, t.innerHTML = e, t;\n    }\n    _getModalTemplate() {\n        const t = $(\"div\"), e = this._getPopconfirmTemplate();\n        return t.setAttribute(RE, \"\"), h.addClass(t, `${this._classes.modal}`), t.id = this._uid, t.innerHTML = e, t;\n    }\n    _getPopconfirmTemplate() {\n        return `<div data-te-popconfirm-body class=\"${this._classes.body}\">\n      <p class=\"${this._classes.message}\">\n      ${this._options.popconfirmIconTemplate ? `<span class=\"${this._classes.icon}\">${this._options.popconfirmIconTemplate}</span>` : \"\"}\n      <span class=\"${this._classes.messageText}\">${this._options.message}</span>\n      </p>\n      <div class=\"${this._classes.btnsContainer}\">\n      ${this._options.cancelText ? `<button type=\"button\" data-te-ripple-init data-te-ripple-color=\"light\" id=\"popconfirm-button-cancel\" aria-label=\"${this._options.cancelLabel}\"\n        class=\"${this._classes.btnCancel}\">${this._options.cancelText}</button>` : \"\"}\n      <button type=\"button\" data-te-ripple-init data-te-ripple-color=\"light\" id=\"popconfirm-button-confirm\"\n      aria-label=\"${this._options.confirmLabel}\"\n      class=\"${this._classes.btnConfirm}\">${this._options.okText ? this._options.okText : \"Ok\"}</button>\n      </div>\n    </div>`;\n    }\n    _getConfig(t) {\n        return t = {\n            ...BE,\n            ...h.getDataAttributes(this._element),\n            ...t\n        }, I(Oo, t, PE), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...VE,\n            ...e,\n            ...t\n        }, I(Oo, t, HE), t;\n    }\n    _openPopover(t) {\n        this._popper = se(this._element, t, {\n            placement: this._translatePositionValue(),\n            modifiers: [\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: [\n                            0,\n                            5\n                        ]\n                    }\n                }\n            ]\n        }), document.body.appendChild(t), setTimeout(()=>{\n            h.addClass(this.popconfirmBody, `${this._classes.fade} opacity-100`), this._isOpen = !0;\n        }, 0);\n    }\n    _openModal(t) {\n        const e = $(\"div\");\n        e.setAttribute(zl, \"\"), h.addClass(e, this._classes.backdrop), document.body.appendChild(e), e.appendChild(t), h.addClass(this.popconfirmBody, \"opacity-100\"), this._isOpen = !0;\n    }\n    _handleCancelButtonClick() {\n        const t = this.container;\n        this._cancelButton = d.findOne(\"#popconfirm-button-cancel\", t), ei.getOrCreateInstance(this._cancelButton, {\n            rippleColor: \"light\"\n        }), this._cancelButton !== null && c.on(this._cancelButton, \"click\", ()=>{\n            this.close(), c.trigger(this._element, LE);\n        });\n    }\n    _handleConfirmButtonClick() {\n        const t = this.container;\n        this._confirmButton = d.findOne(\"#popconfirm-button-confirm\", t), ei.getOrCreateInstance(this._confirmButton, {\n            rippleColor: \"light\"\n        }), c.on(this._confirmButton, \"click\", ()=>{\n            this.close(), c.trigger(this._element, NE);\n        });\n    }\n    _listenToEscapeKey() {\n        c.on(document, \"keydown\", this._handleEscapeKey.bind(this));\n    }\n    _handleEscapeKey(t) {\n        t.keyCode === we && this.close();\n    }\n    _listenToOutsideClick() {\n        c.on(document, \"click\", this._handleOutsideClick.bind(this));\n    }\n    _handleOutsideClick(t) {\n        const e = this.container, i = t.target === e, n = e && e.contains(t.target), o = t.target === this._element, r = this._element && this._element.contains(t.target);\n        !i && !n && !o && !r && this.close();\n    }\n    _translatePositionValue() {\n        switch(this._options.position){\n            case \"top left\":\n                return \"top-end\";\n            case \"top\":\n                return \"top\";\n            case \"top right\":\n                return \"top-start\";\n            case \"bottom left\":\n                return \"bottom-end\";\n            case \"bottom\":\n                return \"bottom\";\n            case \"bottom right\":\n                return \"bottom-start\";\n            case \"left\":\n                return \"left\";\n            case \"left top\":\n                return \"left-end\";\n            case \"left bottom\":\n                return \"left-start\";\n            case \"right\":\n                return \"right\";\n            case \"right top\":\n                return \"right-end\";\n            case \"right bottom\":\n                return \"right-start\";\n            case void 0:\n                return \"bottom\";\n            default:\n                return \"bottom\";\n        }\n    }\n    // Static\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            const i = A.getData(this, xi), n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t))) {\n                if (!i) return new Wh(this, n);\n                if (typeof t == \"string\") {\n                    if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                    i[t](e);\n                }\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, xi);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Io = \"lightbox\", Oi = \"te.lightbox\", WE = `.${Oi}`, FE = \".data-api\", Me = `click${WE}${FE}`, Fh = \"[data-te-lightbox-init]\", YE = `${Fh} img:not([data-te-lightbox-disabled])`, Ul = \"data-te-lightbox-caption\", jE = \"data-te-lightbox-disabled\", Dt = \"data-te-lightbox-active\", KE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75\" />\n</svg>\n`, zE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75\" />\n</svg>\n`, UE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15\" />\n</svg>\n`, XE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v4.5M9 15H4.5M9 15l-5.25 5.25M15 9h4.5M15 9V4.5M15 9l5.25-5.25M15 15h4.5M15 15v4.5m0-4.5l5.25 5.25\" />\n</svg>\n`, GE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6\" />\n</svg>\n`, qE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6\" />\n</svg>\n`, ZE = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n</svg>\n`, QE = {\n    container: \"string\",\n    zoomLevel: \"(number|string)\",\n    prevIconTemplate: \"string\",\n    nextIconTemplate: \"string\",\n    showFullscreenIconTemplate: \"string\",\n    hideFullscreenIconTemplate: \"string\",\n    zoomInIconTemplate: \"string\",\n    closeIconTemplate: \"string\",\n    zoomOutIconTemplate: \"string\",\n    spinnerContent: \"string\"\n}, JE = {\n    container: \"body\",\n    zoomLevel: 1,\n    prevIconTemplate: KE,\n    nextIconTemplate: zE,\n    showFullscreenIconTemplate: UE,\n    hideFullscreenIconTemplate: XE,\n    zoomInIconTemplate: GE,\n    zoomOutIconTemplate: qE,\n    closeIconTemplate: ZE,\n    spinnerContent: \"Loading...\"\n}, t0 = {\n    caption: \"text-white text-ellipsis overflow-hidden whitespace-nowrap mx-[10px] text-center\",\n    captionWrapper: \"fixed left-0 bottom-0 w-full h-[50px] flex justify-center items-center\",\n    closeBtn: \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\n    fullscreenBtn: \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\n    gallery: \"invisible fixed left-0 top-0 w-full h-full z-[1100] pointer-events-none opacity-0 bg-[#000000e6] transition-all duration-[400ms] motion-reduce:transition-none\",\n    galleryContent: \"fixed top-[50px] left-[50px] w-[calc(100%-100px)] h-[calc(100%-100px)]\",\n    galleryCounter: \"flex justify-center items-center px-[10px] mb-0 h-full text-[#b3b3b3]\",\n    img: \"absolute left-0 top-0 w-full max-h-full h-auto cursor-pointer pointer-events-auto\",\n    imgWrapper: \"absolute top-0 left-0 w-full h-full opacity-0 transform scale-[0.25] transition-all duration-[400ms] ease-out pointer-events-none motion-reduce:transition-none motion-reduce:transform-none\",\n    leftTools: \"float-left h-full\",\n    loader: \"fixed left-0 top-0 z-[2] w-full h-full text-neutral-50 opacity-1 flex justify-center items-center pointer-events-none transition-opacity duration-[1000ms] motion-reduce:transition-none\",\n    nextBtn: \"border-none bg-transparent w-full h-[50px] flex justify-center items-center text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\n    nextBtnWrapper: \"fixed right-0 top-0 w-[50px] h-full flex justify-center items-center transition-opacity duration-[400ms] motion-reduce:transition-none\",\n    prevBtn: \"border-none bg-transparent w-full h-[50px] flex justify-center items-center text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\n    prevBtnWrapper: \"fixed left-0 top-0 w-[50px] h-full flex justify-center items-center transition-opacity duration-[400ms] motion-reduce:transition-none\",\n    rightTools: \"float-right\",\n    spinner: \"inline-block h-8 w-8 animate-[spinner-grow_0.75s_linear_infinite] rounded-full bg-current align-[-0.125em] motion-reduce:animate-[spinner-grow_1.5s_linear_infinite]\",\n    spinnerContent: \"!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]\",\n    toolbar: \"absolute top-0 left-0 w-full h-[50px] z-20 transition-opacity duration-[400ms] motion-reduce:transition-none\",\n    vertical: \"h-full max-h-full w-auto\",\n    zoomBtn: \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\"\n}, e0 = {\n    caption: \"string\",\n    captionWrapper: \"string\",\n    closeBtn: \"string\",\n    fullscreenBtn: \"string\",\n    gallery: \"string\",\n    galleryContent: \"string\",\n    galleryCounter: \"string\",\n    img: \"string\",\n    imgWrapper: \"string\",\n    leftTools: \"string\",\n    loader: \"string\",\n    nextBtn: \"string\",\n    nextBtnWrapper: \"string\",\n    prevBtn: \"string\",\n    prevBtnWrapper: \"string\",\n    rightTools: \"string\",\n    spinner: \"string\",\n    spinnerContent: \"string\",\n    toolbar: \"string\",\n    vertical: \"string\",\n    zoomBtn: \"string\"\n};\nclass nn {\n    constructor(t, e = {}, i){\n        this._element = t, this._options = e, this._classes = this._getClasses(i), this._getContainer(), this._id = `lightbox-${Math.random().toString(36).substr(2, 9)}`, this._activeImg = 0, this._images = [], this._zoom = 1, this._gallery = null, this._galleryToolbar = null, this._galleryContent = null, this._loader = null, this._imgCounter = null, this._animating = !1, this._fullscreen = !1, this._zoomBtn = null, this._fullscreenBtn = null, this._toolsToggleTimer = 0, this._mousedown = !1, this._mousedownPositionX = 0, this._mousedownPositionY = 0, this._originalPositionX = 0, this._originalPositionY = 0, this._positionX = 0, this._positionY = 0, this._zoomTimer = 0, this._tapCounter = 0, this._tapTime = 0, this._rightArrow = null, this._leftArrowWrapper = null, this._rightArrowWrapper = null, this._initiated = !1, this._multitouch = !1, this._touchZoomPosition = [], this._element && (A.setData(t, Oi, this), this.init());\n    }\n    // Getters\n    static get NAME() {\n        return Io;\n    }\n    get activeImg() {\n        return this._activeImg;\n    }\n    get currentImg() {\n        return d.findOne(`[${Dt}]`, this._galleryContent);\n    }\n    get options() {\n        const t = {\n            ...JE,\n            ...h.getDataAttributes(this._element),\n            ...this._options\n        };\n        return I(Io, t, QE), t;\n    }\n    // Public\n    init() {\n        this._initiated || (this._appendTemplate(), this._initiated = !0);\n    }\n    open(t = 0) {\n        this._getImages(), this._setActiveImg(t), this._sortImages(), this._triggerEvents(\"open\", \"opened\"), this._loadImages().then((e)=>{\n            this._resizeImages(e), this._toggleTemplate(), this._addEvents(), this._focusFullscreenBtn();\n        });\n    }\n    close() {\n        this.reset(), this._removeEvents(), this._toggleTemplate(), this._triggerEvents(\"close\", \"closed\");\n    }\n    slide(t = \"right\") {\n        this._animating === !0 || this._images.length <= 1 || (this._triggerEvents(\"slide\", \"slided\"), this._beforeSlideEvents(), t === \"right\" && this._slideHorizontally(t), t === \"left\" && this._slideHorizontally(t), t === \"first\" && this._slideToTarget(t), t === \"last\" && this._slideToTarget(t), this._afterSlideEvents());\n    }\n    zoomIn() {\n        this._zoom >= 3 || (this._triggerEvents(\"zoomIn\", \"zoomedIn\"), this._zoom += parseFloat(this.options.zoomLevel), h.style(this.currentImg.parentNode, {\n            transform: `scale(${this._zoom})`\n        }), this._updateZoomBtn());\n    }\n    zoomOut() {\n        this._zoom <= 1 || (this._triggerEvents(\"zoomOut\", \"zoomedOut\"), this._zoom -= parseFloat(this.options.zoomLevel), h.style(this.currentImg.parentNode, {\n            transform: `scale(${this._zoom})`\n        }), this._updateZoomBtn(), this._updateImgPosition());\n    }\n    toggleFullscreen() {\n        this._fullscreen === !1 ? (this._fullscreenBtn.setAttribute(Dt, \"\"), this._fullscreenBtn.innerHTML = this.options.hideFullscreenIconTemplate, this._gallery.requestFullscreen && this._gallery.requestFullscreen(), this._fullscreen = !0) : (this._fullscreenBtn.removeAttribute(Dt), document.exitFullscreen && document.exitFullscreen(), this._fullscreen = !1);\n    }\n    reset() {\n        this._restoreDefaultFullscreen(), this._restoreDefaultPosition(), this._restoreDefaultZoom(), clearTimeout(this._toolsToggleTimer), clearTimeout(this._doubleTapTimer);\n    }\n    dispose() {\n        c.off(document, Me, YE, this.toggle), this._galleryContent && this._removeEvents(), this._gallery && this._gallery.remove(), A.removeData(this._element, Oi), this._element = null;\n    }\n    // Private\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...t0,\n            ...e,\n            ...t\n        }, I(Io, t, e0), t;\n    }\n    _getImages() {\n        const e = d.find(\"img\", this._element).filter((i)=>!i.hasAttribute(jE));\n        this._images = e;\n    }\n    _getContainer() {\n        this._container = d.findOne(this.options.container);\n    }\n    _setActiveImg(t) {\n        this._activeImg = typeof t == \"number\" ? t : this._images.indexOf(t.target);\n    }\n    _appendTemplate() {\n        this._gallery = $(\"div\"), h.addClass(this._gallery, `${this._classes.gallery}`), this._element.dataset.id = this._id, this._gallery.id = this._id, this._appendLoader(), this._appendToolbar(), this._appendContent(), this._appendArrows(), this._appendCaption(), this._container.append(this._gallery);\n    }\n    _appendToolbar() {\n        this._galleryToolbar = $(\"div\"), this._imgCounter = $(\"p\"), this._fullscreenBtn = $(\"button\"), this._zoomBtn = $(\"button\");\n        const t = $(\"button\"), e = $(\"div\"), i = $(\"div\");\n        h.addClass(this._galleryToolbar, `${this._classes.toolbar}`), h.addClass(this._imgCounter, `${this._classes.galleryCounter}`), h.addClass(this._fullscreenBtn, `${this._classes.fullscreenBtn}`), h.addClass(this._zoomBtn, `${this._classes.zoomInBtn}`), h.addClass(this._zoomBtn, this._classes.zoomBtn), h.addClass(e, `${this._classes.leftTools}`), h.addClass(i, `${this._classes.rightTools}`), h.addClass(t, `${this._classes.closeBtn}`), this._fullscreenBtn.innerHTML = this.options.showFullscreenIconTemplate, t.innerHTML = this.options.closeIconTemplate, this._zoomBtn.innerHTML = this.options.zoomInIconTemplate, this._fullscreenBtn.setAttribute(\"aria-label\", \"Toggle fullscreen\"), this._zoomBtn.setAttribute(\"aria-label\", \"Zoom in\"), t.setAttribute(\"aria-label\", \"Close\"), c.on(this._fullscreenBtn, Me, ()=>this.toggleFullscreen()), c.on(this._zoomBtn, Me, ()=>this._toggleZoom()), c.on(t, Me, ()=>this.close()), e.append(this._imgCounter), i.append(this._fullscreenBtn), i.append(this._zoomBtn), i.append(t), this._galleryToolbar.append(e), this._galleryToolbar.append(i), this._gallery.append(this._galleryToolbar);\n    }\n    _appendContent() {\n        this._galleryContent = $(\"div\"), h.addClass(this._galleryContent, `${this._classes.galleryContent}`), this._gallery.append(this._galleryContent);\n    }\n    _appendLoader() {\n        this._loader = $(\"div\");\n        const t = $(\"div\"), e = $(\"span\");\n        h.addClass(this._loader, `${this._classes.loader}`), h.addClass(t, `${this._classes.spinner}`), h.addClass(e, `${this._classes.spinnerContent}`), t.setAttribute(\"role\", \"status\"), e.innerHTML = this.options.spinnerContent, t.append(e), this._loader.append(t), this._gallery.append(this._loader);\n    }\n    _appendArrows() {\n        this._leftArrowWrapper = $(\"div\"), h.addClass(this._leftArrowWrapper, `${this._classes.prevBtnWrapper}`);\n        const t = $(\"button\");\n        t.setAttribute(\"aria-label\", \"Previous\"), h.addClass(t, `${this._classes.prevBtn}`), c.on(t, Me, ()=>this.slide(\"left\")), this._leftArrowWrapper.append(t), this._rightArrowWrapper = $(\"div\"), h.addClass(this._rightArrowWrapper, `${this._classes.nextBtnWrapper}`), this._rightArrow = $(\"button\"), this._rightArrow.setAttribute(\"aria-label\", \"Next\"), h.addClass(this._rightArrow, `${this._classes.nextBtn}`), c.on(this._rightArrow, Me, ()=>this.slide()), this._rightArrowWrapper.append(this._rightArrow), this._rightArrow.innerHTML = this.options.nextIconTemplate, t.innerHTML = this.options.prevIconTemplate, this._getImages(), !(this._images.length <= 1) && (this._gallery.append(this._leftArrowWrapper), this._gallery.append(this._rightArrowWrapper));\n    }\n    _appendCaption() {\n        const t = $(\"div\"), e = $(\"p\");\n        e.setAttribute(Ul, \"\"), h.addClass(t, `${this._classes.captionWrapper}`), h.addClass(e, `${this._classes.caption}`), t.append(e), this._gallery.append(t);\n    }\n    _sortImages() {\n        for(let t = 0; t < this._activeImg; t++)this._images.push(this._images.shift());\n    }\n    async _loadImages() {\n        const t = [], e = [];\n        this._galleryContent.innerHTML = \"\";\n        let i = 0;\n        return this._images.forEach((n, o)=>{\n            t.push(new Promise((r)=>{\n                const a = new Image(), l = $(\"div\");\n                h.addClass(l, `${this._classes.imgWrapper}`), h.addClass(a, `${this._classes.img}`), this._addImgStyles(a, l, i, o, n), l.append(a), this._galleryContent.append(l), a.onload = r, a.src = n.dataset.teImg || n.src, e.push(a), i += 100;\n            }));\n        }), await Promise.all(t), e;\n    }\n    _addImgStyles(t, e, i, n, o) {\n        t.alt = o.alt, t.draggable = !1, h.style(e, {\n            position: \"absolute\",\n            left: `${i}%`,\n            top: 0\n        }), (o.dataset.teCaption || o.dataset.teCaption === \"\") && (t.dataset.caption = o.dataset.teCaption), i === 0 ? (o.width < o.height && h.addClass(t, `${this._classes.vertical}`), h.style(e, {\n            opacity: 1\n        }), t.setAttribute(Dt, \"\")) : t.removeAttribute(Dt), n === this._images.length - 1 && this._images.length > 1 && h.style(e, {\n            left: \"-100%\"\n        });\n    }\n    _resizeImages(t) {\n        t.forEach((e)=>{\n            this._calculateImgSize(e);\n        });\n    }\n    _calculateImgSize(t) {\n        t.width >= t.height ? (t.style.width = \"100%\", t.style.maxWidth = \"100%\", t.style.height = \"auto\", t.style.top = `${(t.parentNode.offsetHeight - t.height) / 2}px`, t.style.left = 0) : (t.style.height = \"100%\", t.style.maxHeight = \"100%\", t.style.width = \"auto\", t.style.left = `${(t.parentNode.offsetWidth - t.width) / 2}px`, t.style.top = 0), t.width >= t.parentNode.offsetWidth && (t.style.width = `${t.parentNode.offsetWidth}px`, t.style.height = \"auto\", t.style.left = 0, t.style.top = `${(t.parentNode.offsetHeight - t.height) / 2}px`), t.height >= t.parentNode.offsetHeight && (t.style.height = `${t.parentNode.offsetHeight}px`, t.style.width = \"auto\", t.style.top = 0, t.style.left = `${(t.parentNode.offsetWidth - t.width) / 2}px`), this._positionX = parseFloat(t.style.left) || 0, this._positionY = parseFloat(t.style.top) || 0;\n    }\n    _onResize() {\n        this._images = d.find(\"img\", this._galleryContent), this._images.forEach((t)=>{\n            this._calculateImgSize(t);\n        });\n    }\n    _onFullscreenChange() {\n        (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement) === void 0 && (this._fullscreen = !1, this._fullscreenBtn.innerHTML = this.options.showFullscreenIconTemplate, this._fullscreenBtn.removeAttribute(Dt));\n    }\n    _beforeSlideEvents() {\n        this._animationStart(), this._restoreDefaultZoom(), this._restoreDefaultPosition(), this._resetDoubleTap();\n    }\n    _slideHorizontally(t) {\n        this._images = d.find(\"img\", this._galleryContent), this._images.forEach((e)=>{\n            let i;\n            t === \"right\" ? (i = parseInt(e.parentNode.style.left, 10) - 100, i < -100 && (i = (this._images.length - 2) * 100)) : (i = parseInt(e.parentNode.style.left, 10) + 100, i === (this._images.length - 1) * 100 && (i = -100)), this._slideImg(e, i);\n        }), this._updateActiveImg(t);\n    }\n    _slideImg(t, e) {\n        e === 0 ? (t.setAttribute(Dt, \"\"), h.style(t.parentNode, {\n            opacity: 1,\n            transform: \"scale(1)\"\n        })) : (t.removeAttribute(Dt), h.style(t.parentNode, {\n            opacity: 0,\n            transform: \"scale(0.25)\"\n        })), t.parentNode.style.left = `${e}%`;\n    }\n    _slideToTarget(t) {\n        t === \"first\" && this._activeImg === 0 || t === \"last\" && this._activeImg === this._images.length - 1 || (this.reset(), this._removeEvents(), this._showLoader(), this._getImages(), this._activeImg = t === \"first\" ? 0 : this._images.length - 1, this._sortImages(), h.style(this.currentImg.parentNode, {\n            transform: \"scale(0.25)\",\n            opacity: 0\n        }), setTimeout(()=>{\n            this._loadImages().then((e)=>{\n                this._resizeImages(e), this._addEvents(), this._updateCaption(), this._hideLoader(), setTimeout(()=>{\n                    h.style(this.currentImg.parentNode, {\n                        transform: \"scale(1)\",\n                        opacity: 1\n                    });\n                }, 10);\n            });\n        }, 400));\n    }\n    _updateActiveImg(t) {\n        t === \"right\" && (this._activeImg === this._images.length - 1 ? this._activeImg = 0 : this._activeImg++), t === \"left\" && (this._activeImg === 0 ? this._activeImg = this._images.length - 1 : this._activeImg--);\n    }\n    _afterSlideEvents() {\n        this._updateCounter(), this._updateCaption();\n    }\n    _updateCounter() {\n        this._images.length <= 1 || setTimeout(()=>{\n            this._imgCounter.innerHTML = `${this._activeImg + 1} / ${this._images.length}`;\n        }, 200);\n    }\n    _updateCaption() {\n        setTimeout(()=>{\n            let t = this.currentImg.alt;\n            (this.currentImg.dataset.caption || this.currentImg.dataset.caption === \"\") && (t = this.currentImg.dataset.caption), d.findOne(`[${Ul}]`, this._gallery).innerHTML = t;\n        }, 200);\n    }\n    _toggleTemplate() {\n        this._gallery.style.visibility === \"visible\" ? (h.style(this.currentImg.parentNode, {\n            transform: \"scale(0.25)\"\n        }), setTimeout(()=>{\n            this._hideGallery(), this._enableScroll(), this._showLoader();\n        }, 100)) : (this._showGallery(), this._disableScroll(), this._updateCounter(), this._updateCaption(), this._setToolsToggleTimout(), this._hideLoader());\n    }\n    _showLoader() {\n        h.style(this._loader, {\n            opacity: 1\n        });\n    }\n    _hideLoader() {\n        h.style(this._loader, {\n            opacity: 0\n        });\n    }\n    _hideGallery() {\n        h.style(this._gallery, {\n            opacity: 0,\n            pointerEvents: \"none\",\n            visibility: \"hidden\"\n        });\n    }\n    _showGallery() {\n        h.style(this._gallery, {\n            opacity: 1,\n            pointerEvents: \"initial\",\n            visibility: \"visible\"\n        }), setTimeout(()=>{\n            h.style(this.currentImg.parentNode, {\n                transform: \"scale(1)\"\n            });\n        }, 50);\n    }\n    _toggleZoom() {\n        this._zoom !== 1 ? this.zoomOut() : this.zoomIn();\n    }\n    _updateZoomBtn() {\n        this._zoom > 1 ? (this._zoomBtn.setAttribute(Dt, \"\"), this._zoomBtn.setAttribute(\"aria-label\", \"Zoom out\"), this._zoomBtn.innerHTML = this.options.zoomOutIconTemplate) : (this._zoomBtn.removeAttribute(Dt), this._zoomBtn.setAttribute(\"aria-label\", \"Zoom in\"), this._zoomBtn.innerHTML = this.options.zoomInIconTemplate);\n    }\n    _updateImgPosition() {\n        this._zoom === 1 && this._restoreDefaultPosition();\n    }\n    _addEvents() {\n        const t = d.find(\"img\", this._galleryContent);\n        this._onWindowTouchmove = this._onWindowTouchmove.bind(this), this._onWindowTouchstart = this._onWindowTouchstart.bind(this), this._onImgMousedown = this._onMousedown.bind(this), this._onImgMousemove = this._onMousemove.bind(this), this._onImgWheel = this._onZoom.bind(this), this._onImgMouseup = this._onMouseup.bind(this), this._onImgTouchend = this._onTouchend.bind(this), this._onImgDoubleClick = this._onDoubleClick.bind(this), this._onWindowResize = this._onResize.bind(this), this._onWindowFullscreenChange = this._onFullscreenChange.bind(this), this._onAnyImgAction = this._resetToolsToggler.bind(this), this._onGalleryClick = this._onBackdropClick.bind(this), this._onKeyupEvent = this._onKeyup.bind(this), this._onRightArrowKeydownEvent = this._onRightArrowKeydown.bind(this), this._onFullscreenBtnKeydownEvent = this._onFullscreenBtnKeydown.bind(this), t.forEach((e)=>{\n            c.on(e, \"mousedown\", this._onImgMousedown, {\n                passive: !0\n            }), c.on(e, \"touchstart\", this._onImgMousedown, {\n                passive: !0\n            }), c.on(e, \"mousemove\", this._onImgMousemove, {\n                passive: !0\n            }), c.on(e, \"touchmove\", this._onImgMousemove, {\n                passive: !0\n            }), c.on(e, \"wheel\", this._onImgWheel, {\n                passive: !0\n            }), c.on(e, \"dblclick\", this._onImgDoubleClick, {\n                passive: !0\n            });\n        }), document.addEventListener(\"touchmove\", this._onWindowTouchmove, {\n            passive: !1\n        }), c.on(window, \"touchstart\", this._onWindowTouchstart), c.on(window, \"mouseup\", this._onImgMouseup), c.on(window, \"touchend\", this._onImgTouchend), c.on(window, \"resize\", this._onWindowResize), c.on(window, \"orientationchange\", this._onWindowResize), c.on(window, \"keyup\", this._onKeyupEvent), c.on(window, \"fullscreenchange\", this._onWindowFullscreenChange), c.on(this._gallery, \"mousemove\", this._onAnyImgAction), c.on(this._gallery, \"click\", this._onGalleryClick), c.on(this._rightArrow, \"keydown\", this._onRightArrowKeydownEvent), c.on(this._fullscreenBtn, \"keydown\", this._onFullscreenBtnKeydownEvent);\n    }\n    _removeEvents() {\n        d.find(\"img\", this._galleryContent).forEach((e)=>{\n            c.off(e, \"mousedown\", this._onImgMousedown), c.off(e, \"touchstart\", this._onImgMousedown), c.off(e, \"mousemove\", this._onImgMousemove), c.off(e, \"touchmove\", this._onImgMousemove), c.off(e, \"wheel\", this._onImgWheel), c.off(e, \"dblclick\", this._onImgDoubleClick);\n        }), document.removeEventListener(\"touchmove\", this._onWindowTouchmove, {\n            passive: !1\n        }), c.off(window, \"touchstart\", this._onWindowTouchstart), c.off(window, \"mouseup\", this._onImgMouseup), c.off(window, \"touchend\", this._onImgTouchend), c.off(window, \"resize\", this._onWindowResize), c.off(window, \"orientationchange\", this._onWindowResize), c.off(window, \"keyup\", this._onKeyupEvent), c.off(window, \"fullscreenchange\", this._onWindowFullscreenChange), c.off(this._gallery, \"mousemove\", this._onAnyImgAction), c.off(this._gallery, \"click\", this._onGalleryClick), c.off(this._rightArrow, \"keydown\", this._onRightArrowKeydownEvent), c.off(this._fullscreenBtn, \"keydown\", this._onFullscreenBtnKeydownEvent);\n    }\n    _onMousedown(t) {\n        const e = t.touches, i = e ? e[0].clientX : t.clientX, n = e ? e[0].clientY : t.clientY;\n        this._originalPositionX = parseFloat(this.currentImg.style.left) || 0, this._originalPositionY = parseFloat(this.currentImg.style.top) || 0, this._positionX = this._originalPositionX, this._positionY = this._originalPositionY, this._mousedownPositionX = i * (1 / this._zoom) - this._positionX, this._mousedownPositionY = n * (1 / this._zoom) - this._positionY, this._mousedown = !0, t.type === \"touchstart\" && t.touches.length > 1 && (this._multitouch = !0, this._touchZoomPosition = t.touches);\n    }\n    _onMousemove(t) {\n        if (!this._mousedown) return;\n        const e = t.touches, i = e ? e[0].clientX : t.clientX, n = e ? e[0].clientY : t.clientY;\n        if (e && this._resetToolsToggler(), !this._multitouch) if (this._zoom !== 1) this._positionX = i * (1 / this._zoom) - this._mousedownPositionX, this._positionY = n * (1 / this._zoom) - this._mousedownPositionY, h.style(this.currentImg, {\n            left: `${this._positionX}px`,\n            top: `${this._positionY}px`\n        });\n        else {\n            if (this._images.length <= 1) return;\n            this._positionX = i * (1 / this._zoom) - this._mousedownPositionX, h.style(this.currentImg, {\n                left: `${this._positionX}px`\n            });\n        }\n    }\n    _onMouseup(t) {\n        this._mousedown = !1, this._moveImg(t.target);\n    }\n    _onTouchend(t) {\n        this._mousedown = !1, this._multitouch ? t.targetTouches.length === 0 && (this._multitouch = !1, this._touchZoomPosition = []) : this._multitouch || (this._checkDoubleTap(t), this._moveImg(t.target));\n    }\n    _calculateTouchZoom(t) {\n        const e = Math.hypot(this._touchZoomPosition[1].pageX - this._touchZoomPosition[0].pageX, this._touchZoomPosition[1].pageY - this._touchZoomPosition[0].pageY), i = Math.hypot(t.touches[1].pageX - t.touches[0].pageX, t.touches[1].pageY - t.touches[0].pageY), n = Math.abs(e - i), o = t.view.screen.width;\n        n > o * 0.03 && (e <= i ? this.zoomIn() : this.zoomOut(), this._touchZoomPosition = t.touches);\n    }\n    _onWindowTouchstart(t) {\n        t.touches.length > 1 && (this._multitouch = !0, this._touchZoomPosition = t.touches);\n    }\n    _onWindowTouchmove(t) {\n        t.preventDefault(), t.type === \"touchmove\" && t.targetTouches.length > 1 && this._calculateTouchZoom(t);\n    }\n    _onRightArrowKeydown(t) {\n        switch(t.keyCode){\n            case 9:\n                if (t.shiftKey) break;\n                t.preventDefault(), this._focusFullscreenBtn();\n                break;\n        }\n    }\n    _onFullscreenBtnKeydown(t) {\n        switch(t.keyCode){\n            case 9:\n                if (!t.shiftKey) break;\n                t.preventDefault(), this._focusRightArrow();\n                break;\n        }\n    }\n    _onKeyup(t) {\n        switch(this._resetToolsToggler(), t.keyCode){\n            case 39:\n                this.slide();\n                break;\n            case 37:\n                this.slide(\"left\");\n                break;\n            case 27:\n                this.close();\n                break;\n            case 36:\n                this.slide(\"first\");\n                break;\n            case 35:\n                this.slide(\"last\");\n                break;\n            case 38:\n                this.zoomIn();\n                break;\n            case 40:\n                this.zoomOut();\n                break;\n        }\n    }\n    _focusFullscreenBtn() {\n        setTimeout(()=>{\n            this._fullscreenBtn.focus();\n        }, 100);\n    }\n    _focusRightArrow() {\n        this._rightArrow.focus();\n    }\n    _moveImg(t) {\n        if (this._multitouch || this._zoom !== 1 || t !== this.currentImg || this._images.length <= 1) return;\n        const e = this._positionX - this._originalPositionX;\n        e > 0 ? this.slide(\"left\") : e < 0 && this.slide();\n    }\n    _checkDoubleTap(t) {\n        clearTimeout(this._doubleTapTimer);\n        const i = /* @__PURE__ */ new Date().getTime() - this._tapTime;\n        this._tapCounter > 0 && i < 500 ? (this._onDoubleClick(t), this._doubleTapTimer = setTimeout(()=>{\n            this._tapTime = /* @__PURE__ */ new Date().getTime(), this._tapCounter = 0;\n        }, 300)) : (this._tapCounter++, this._tapTime = /* @__PURE__ */ new Date().getTime());\n    }\n    _resetDoubleTap() {\n        this._tapTime = 0, this._tapCounter = 0, clearTimeout(this._doubleTapTimer);\n    }\n    _onDoubleClick(t) {\n        this._multitouch || (t.touches || this._setNewPositionOnZoomIn(t), this._zoom !== 1 ? this._restoreDefaultZoom() : this.zoomIn());\n    }\n    _onZoom(t) {\n        if (t.deltaY > 0) this.zoomOut();\n        else {\n            if (this._zoom >= 3) return;\n            this._setNewPositionOnZoomIn(t), this.zoomIn();\n        }\n    }\n    _onBackdropClick(t) {\n        this._resetToolsToggler(), t.target.tagName === \"DIV\" && this.close();\n    }\n    _setNewPositionOnZoomIn(t) {\n        clearTimeout(this._zoomTimer), this._positionX = window.innerWidth / 2 - t.offsetX - 50, this._positionY = window.innerHeight / 2 - t.offsetY - 50, this.currentImg.style.transition = \"all 0.5s ease-out\", this.currentImg.style.left = `${this._positionX}px`, this.currentImg.style.top = `${this._positionY}px`, this._zoomTimer = setTimeout(()=>{\n            this.currentImg.style.transition = \"none\";\n        }, 500);\n    }\n    _resetToolsToggler() {\n        this._showTools(), clearTimeout(this._toolsToggleTimer), this._setToolsToggleTimout();\n    }\n    _setToolsToggleTimout() {\n        this._toolsToggleTimer = setTimeout(()=>{\n            this._hideTools(), clearTimeout(this._toolsToggleTimer);\n        }, 4e3);\n    }\n    _hideTools() {\n        h.style(this._galleryToolbar, {\n            opacity: 0\n        }), h.style(this._leftArrowWrapper, {\n            opacity: 0\n        }), h.style(this._rightArrowWrapper, {\n            opacity: 0\n        });\n    }\n    _showTools() {\n        h.style(this._galleryToolbar, {\n            opacity: 1\n        }), h.style(this._leftArrowWrapper, {\n            opacity: 1\n        }), h.style(this._rightArrowWrapper, {\n            opacity: 1\n        });\n    }\n    _disableScroll() {\n        h.addClass(document.body, \"overflow-y-hidden relative\"), document.documentElement.scrollHeight > document.documentElement.clientHeight && h.addClass(document.body, \"md:pr-[17px]\");\n    }\n    _enableScroll() {\n        setTimeout(()=>{\n            h.removeClass(document.body, \"overflow-y-hidden relative\"), h.removeClass(document.body, \"md:pr-[17px]\");\n        }, 300);\n    }\n    _animationStart() {\n        this._animating = !0, setTimeout(()=>{\n            this._animating = !1;\n        }, 400);\n    }\n    _restoreDefaultZoom() {\n        this._zoom !== 1 && (this._zoom = 1, h.style(this.currentImg.parentNode, {\n            transform: `scale(${this._zoom})`\n        }), this._updateZoomBtn(), this._updateImgPosition());\n    }\n    _restoreDefaultFullscreen() {\n        this._fullscreen && this.toggleFullscreen();\n    }\n    _restoreDefaultPosition() {\n        clearTimeout(this._zoomTimer);\n        const t = this.currentImg;\n        h.style(this.currentImg.parentNode, {\n            left: 0,\n            top: 0\n        }), h.style(this.currentImg, {\n            transition: \"all 0.5s ease-out\",\n            left: 0,\n            top: 0\n        }), this._calculateImgSize(t), setTimeout(()=>{\n            h.style(this.currentImg, {\n                transition: \"none\"\n            });\n        }, 500);\n    }\n    async _triggerEvents(t, e) {\n        c.trigger(this._element, `${t}.te.lightbox`), e && await setTimeout(()=>{\n            c.trigger(this._element, `${e}.te.lightbox`);\n        }, 505);\n    }\n    static getInstance(t) {\n        return A.getData(t, Oi);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static toggle() {\n        return function(t) {\n            const e = d.closest(t.target, `${Fh}`);\n            (nn.getInstance(e) || new nn(e)).open(t);\n        };\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, Oi);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new nn(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n}\nconst i0 = {\n    isRequired: \"This is required\",\n    isEmail: \"Please enter a valid email address\",\n    isLongerThan: \"This field must be longer than {length} characters\",\n    isShorterThan: \"This field must be shorter than {length} characters\",\n    isChecked: \"This is required\",\n    isPhone: \"Please enter a valid phone number\",\n    isNumber: \"Expected value with type Number\",\n    isString: \"Expected value with type String\",\n    isBoolean: \"Expected value with type Boolean\",\n    isDate: \"Please enter a valid date\",\n    is12hFormat: \"Please enter a valid time in 12h format\",\n    is24hFormat: \"Please enter a valid time in 24h format\"\n}, s0 = {\n    isRequired: (s, t)=>(s == null ? void 0 : s.trim()) ? !0 : t,\n    isEmail: (s, t)=>/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(s) ? !0 : t,\n    isLongerThan: (s, t, e)=>s.length > e ? !0 : t.replace(\"{length}\", e),\n    isShorterThan: (s, t, e)=>s.length < e ? !0 : t.replace(\"{length}\", e),\n    isChecked: (s)=>s ? !0 : \"This is required\",\n    isPhone: (s, t)=>s.length === 9 ? !0 : t,\n    isNumber: (s, t)=>s && !isNaN(Number(s)) ? !0 : t,\n    isString: (s, t)=>typeof s == \"string\" ? !0 : t,\n    isBoolean: (s, t)=>typeof s == \"boolean\" ? !0 : t,\n    isDate: (s, t)=>{\n        const e = /^([0-9]{1,2})\\/([0-9]{1,2})\\/([0-9]{4})$/;\n        return s.match(e) ? !0 : t;\n    },\n    is12hFormat: (s, t)=>{\n        const e = /^(0?[1-9]|1[0-2]):[0-5][0-9] [APap][mM]$/;\n        return s.match(e) ? !0 : t;\n    },\n    is24hFormat: (s, t)=>{\n        const e = /^(?:[01]\\d|2[0-3]):[0-5][0-9]$/;\n        return s.match(e) ? !0 : t;\n    }\n}, Do = \"validation\", ir = \"te.validation\", yn = `.${ir}`, Yh = \"data-te-validate\", Ls = \"data-te-validated\", Ns = \"data-te-validation-state\", Ms = \"data-te-validation-feedback\", $o = \"data-te-valid-feedback\", Rs = \"data-te-invalid-feedback\", Xl = \"data-te-validation-ruleset\", n0 = \"data-te-submit-btn-ref\", o0 = `[${Yh}]`, r0 = \"[data-te-input-notch-ref] div\", a0 = `[${n0}]`, l0 = `validated${yn}`, c0 = `valid${yn}`, h0 = `invalid${yn}`, d0 = `changed${yn}`, u0 = {\n    validFeedback: \"string\",\n    invalidFeedback: \"string\",\n    disableFeedback: \"boolean\",\n    customRules: \"object\",\n    customErrorMessages: \"object\",\n    activeValidation: \"boolean\",\n    submitCallback: \"(function|null)\"\n}, Gl = {\n    validFeedback: \"Looks good!\",\n    invalidFeedback: \"Something is wrong!\",\n    disableFeedback: !1,\n    customRules: {},\n    customErrorMessages: {},\n    activeValidation: !1,\n    submitCallback: null\n}, p0 = {\n    // default notch\n    notchLeadingValid: \"border-[#14a44d] dark:border-[#14a44d] group-data-[te-input-focused]:shadow-[-1px_0_0_#14a44d,_0_1px_0_0_#14a44d,_0_-1px_0_0_#14a44d] group-data-[te-input-focused]:border-[#14a44d]\",\n    notchMiddleValid: \"border-[#14a44d] dark:border-[#14a44d] group-data-[te-input-focused]:shadow-[0_1px_0_0_#14a44d] group-data-[te-input-focused]:border-[#14a44d]\",\n    notchTrailingValid: \"border-[#14a44d] dark:border-[#14a44d] group-data-[te-input-focused]:shadow-[1px_0_0_#14a44d,_0_-1px_0_0_#14a44d,_0_1px_0_0_#14a44d] group-data-[te-input-focused]:border-[#14a44d]\",\n    notchLeadingInvalid: \"border-[#dc4c64] dark:border-[#dc4c64] group-data-[te-input-focused]:shadow-[-1px_0_0_#dc4c64,_0_1px_0_0_#dc4c64,_0_-1px_0_0_#dc4c64] group-data-[te-input-focused]:border-[#dc4c64]\",\n    notchMiddleInvalid: \"border-[#dc4c64] dark:border-[#dc4c64] group-data-[te-input-focused]:shadow-[0_1px_0_0_#dc4c64] group-data-[te-input-focused]:border-[#dc4c64]\",\n    notchTrailingInvalid: \"border-[#dc4c64] dark:border-[#dc4c64] group-data-[te-input-focused]:shadow-[1px_0_0_#dc4c64,_0_-1px_0_0_#dc4c64,_0_1px_0_0_#dc4c64] group-data-[te-input-focused]:border-[#dc4c64]\",\n    // basic inputs\n    basicInputValid: \"!border-[#14a44d] focus:!border-[#14a44d] focus:!shadow-[inset_0_0_0_1px_#14a44d]\",\n    basicInputInvalid: \"!border-[#dc4c64] focus:!border-[#dc4c64] focus:!shadow-[inset_0_0_0_1px_#dc4c64]\",\n    // checkbox\n    checkboxValid: \"checked:!border-[#14a44d] checked:!bg-[#14a44d] checked:after:!bg-[#14a44d]\",\n    checkboxInvalid: \"checked:!border-[#dc4c64] checked:!bg-[#dc4c64] checked:after:!bg-[#dc4c64]\",\n    radioValid: \"checked:!border-[#14a44d] checked:after:!bg-[#14a44d]\",\n    radioInvalid: \"checked:!border-[#dc4c64] checked:after:!bg-[#dc4c64]\",\n    // labels\n    labelValid: \"!text-[#14a44d]\",\n    labelInvalid: \"!text-[#dc4c64]\",\n    // feedback\n    validFeedback: \"absolute top-full left-0 m-1 w-auto text-sm text-[#14a44d] animate-[fade-in_0.3s_both]\",\n    invalidFeedback: \"absolute top-full left-0 m-1 w-auto text-sm text-[#dc4c64] animate-[fade-in_0.3s_both]\",\n    // element validated\n    elementValidated: \"mb-8\"\n}, _0 = {\n    notchLeadingValid: \"string\",\n    notchMiddleValid: \"string\",\n    notchTrailingValid: \"string\",\n    notchLeadingInvalid: \"string\",\n    notchMiddleInvalid: \"string\",\n    notchTrailingInvalid: \"string\",\n    basicInputValid: \"string\",\n    basicInputInvalid: \"string\",\n    checkboxValid: \"string\",\n    checkboxInvalid: \"string\",\n    radioValid: \"string\",\n    radioInvalid: \"string\",\n    labelValid: \"string\",\n    labelInvalid: \"string\",\n    validFeedback: \"string\",\n    invalidFeedback: \"string\",\n    elementValidated: \"string\"\n};\nclass jh extends ft {\n    constructor(t, e, i){\n        super(t), this._element = t, this._element && A.setData(t, ir, this), this._config = this._getConfig(e), this._classes = this._getClasses(i), this._isValid = !0, this._shouldApplyInputEvents = !0, this._submitCallback = null, this._errorMessages = {\n            ...i0,\n            ...this._config.customErrorMessages\n        }, this._validationElements = this._getValidationElements(), this._validationElements.forEach(({ element: n, input: o })=>{\n            this._createFeedbackWrapper(n, o);\n        }), this._validationObserver = this._watchForValidationChanges(), this._validationObserver.observe(this._element, {\n            attributes: !0\n        }), this._submitButton = null, this._handleSubmitButton(), this._validationResult = [];\n    }\n    // Getters\n    static get DefaultType() {\n        return u0;\n    }\n    static get Default() {\n        return Gl;\n    }\n    static get NAME() {\n        return Do;\n    }\n    // Public\n    dispose() {\n        var t;\n        (t = this._validationObserver) == null || t.disconnect(), this._validationObserver = null, this._submitCallback = null, this._element.removeAttribute(Ls), this._removeInputEvents(), this._removeValidationTraces(), this._validationResult = [], this._submitButton && c.off(this._submitButton, \"click\"), this._config.activeValidation && (this._validationElements.forEach((e)=>{\n            const { input: i } = e;\n            c.off(i, \"input\");\n        }), this._shouldApplyInputEvents = !0);\n    }\n    // Private\n    _removeValidationTraces() {\n        this._removeFeedbackWrapper(), this._validationElements.forEach(({ element: t, classes: e, initialHTML: i })=>{\n            t.className = e, t.innerHTML = i, t.removeAttribute(Ns), t.removeAttribute(Rs), t.removeAttribute($o);\n        }), this._validationElements = [];\n    }\n    _getValidationElements() {\n        return d.find(o0, this._element).map((e)=>{\n            const i = d.findOne(\"input\", e) || d.findOne(\"textarea\", e), n = d.findOne(\"select\", e);\n            return {\n                id: i.name || i.id || (n == null ? void 0 : n.name) || et(\"validation-\"),\n                element: e,\n                type: e.getAttribute(Yh),\n                input: i,\n                validFeedback: e.getAttribute($o),\n                invalidFeedback: e.getAttribute(Rs),\n                classes: e.className,\n                initialHTML: e.innerHTML,\n                ruleset: e.getAttribute(Xl)\n            };\n        });\n    }\n    _createFeedbackWrapper(t, e) {\n        if (t.querySelectorAll(`[${Ms}]`).length > 0) return;\n        const i = document.createElement(\"span\");\n        i.setAttribute(Ms, \"\"), e.parentNode.appendChild(i);\n    }\n    _removeFeedbackWrapper() {\n        d.find(`[${Ms}]`, this._element).forEach((e)=>{\n            e.remove();\n        });\n    }\n    _watchForValidationChanges() {\n        return new MutationObserver((e)=>{\n            e.forEach((i)=>{\n                const { attributeName: n } = i;\n                n === Ls && (this._handleValidation(), this._config.activeValidation && this._shouldApplyInputEvents && this._applyInputEvents());\n            });\n        });\n    }\n    _handleValidation() {\n        this._element.getAttribute(Ls) && (this._validationResult = [], this._isValid = !0, this._validationElements.forEach((t)=>this._validateSingleElement(t)), this._emitEvents(this._isValid), this._submitCallback && this._submitCallback(this._isValid));\n    }\n    _validateSingleElement(t) {\n        var p;\n        const { element: e, type: i, input: n, ruleset: o, id: r } = t;\n        o && this._validateByRuleset(t);\n        const a = e.getAttribute(Ns);\n        if (a !== \"valid\" && a !== \"invalid\") return;\n        const l = a.replace(a.charAt(0), a.charAt(0).toUpperCase());\n        i === \"input\" && this._restyleNotches(e, l), i === \"basic\" && this._restyleBasicInputs(n, l), (i === \"checkbox\" || i === \"radio\") && this._restyleCheckboxes(n, l, i), this._restyleLabels(e, l), a === \"invalid\" && (this._isValid = !1), this._config.disableFeedback || this._applyFeedback(e, a), c.trigger(this._element, d0, {\n            value: {\n                name: r,\n                result: a,\n                validation: (p = this._validationResult[r]) == null ? void 0 : p.validation\n            }\n        });\n    }\n    _validateByRuleset({ element: t, type: e, invalidFeedback: i, input: n, id: o }) {\n        const r = this._getRuleset(t);\n        if (!r.length) return;\n        const a = e === \"checkbox\" || e === \"radio\" ? n.checked : n.value;\n        let l = \"\", p = [];\n        for (const u of r){\n            const _ = u.callback(a, this._errorMessages[u.name] || this._config.invalidFeedback, u.parameter);\n            p.push({\n                result: _ === !0,\n                name: u.name,\n                fullName: u.fullName\n            }), typeof _ == \"string\" && !l && (l = _);\n        }\n        if (this._validationResult[o] = {\n            element: t,\n            validation: p\n        }, !l) {\n            t.setAttribute(Ns, \"valid\");\n            return;\n        }\n        t.setAttribute(Ns, \"invalid\"), i || t.setAttribute(Rs, l);\n    }\n    _handleInputChange(t) {\n        this._validateSingleElement(t);\n    }\n    _getRuleset(t) {\n        const i = t.getAttribute(Xl).split(\"|\");\n        let n = [];\n        const o = {\n            ...s0,\n            ...this._config.customRules\n        };\n        return i.forEach((r)=>{\n            const a = this._getRuleData(r, o);\n            a.callback ? n.push(a) : console.warn(`Rule ${r} does not exist`);\n        }), n;\n    }\n    _getRuleData(t, e) {\n        const i = t.split(\"(\");\n        return {\n            callback: e[i[0]],\n            parameter: i[1] ? i[1].split(\")\")[0] : null,\n            name: i[0],\n            fullName: t\n        };\n    }\n    _applyFeedback(t, e) {\n        const i = d.findOne(`[${Ms}]`, t), n = t.getAttribute($o) || this._config.validFeedback, o = t.getAttribute(Rs) || this._config.invalidFeedback;\n        h.addClass(t, this._classes.elementValidated), i.textContent = e === \"valid\" ? n : o, i.className = this._classes[e === \"valid\" ? \"validFeedback\" : \"invalidFeedback\"];\n    }\n    _restyleCheckboxes(t, e, i) {\n        h.removeClass(t, this._classes.checkboxValid), h.removeClass(t, this._classes.checkboxInvalid), h.addClass(t, this._classes[`${i}${e}`]);\n    }\n    _restyleBasicInputs(t, e) {\n        h.removeClass(t, this._classes.basicInputValid), h.removeClass(t, this._classes.basicInputInvalid), h.addClass(t, this._classes[`basicInput${e}`]);\n    }\n    _restyleNotches(t, e) {\n        d.find(r0, t).forEach((n, o)=>{\n            let r = o === 0 ? \"notchLeading\" : o === 1 ? \"notchMiddle\" : \"notchTrailing\";\n            n.className = \"\", h.addClass(n, ph[r]), r += e, h.addClass(n, this._classes[r]);\n        });\n    }\n    _restyleLabels(t, e) {\n        const i = d.find(\"label\", t);\n        i.length && i.forEach((n)=>{\n            h.removeClass(n, this._classes.labelValid), h.removeClass(n, this._classes.labelInvalid), h.addClass(n, this._classes[`label${e}`]);\n        });\n    }\n    _emitEvents(t) {\n        if (c.trigger(this._element, l0), t) {\n            c.trigger(this._element, c0, {\n                value: this._validationResult\n            });\n            return;\n        }\n        c.trigger(this._element, h0, {\n            value: this._validationResult\n        });\n    }\n    _applyInputEvents() {\n        this._validationElements.forEach((t)=>{\n            const { input: e, element: i } = t;\n            c.on(e, \"input\", ()=>this._handleInputChange(t)), c.on(i, \"valueChange.te.select\", ()=>this._delayedInputChange(t)), c.on(i, \"itemSelect.te.autocomplete\", ()=>this._delayedInputChange(t));\n        }), this._shouldApplyInputEvents = !1;\n    }\n    _removeInputEvents() {\n        this._validationElements.forEach((t)=>{\n            const { input: e, element: i } = t;\n            c.off(e, \"input\", ()=>this._handleInputChange(t)), c.off(i, \"valueChange.te.select\", ()=>this._delayedInputChange(t)), c.off(i, \"itemSelect.te.autocomplete\", ()=>this._delayedInputChange(t));\n        });\n    }\n    _delayedInputChange(t) {\n        setTimeout(()=>{\n            this._handleInputChange(t);\n        }, 10);\n    }\n    _handleSubmitButton() {\n        this._submitButton = d.findOne(a0, this._element), this._submitButton && c.on(this._submitButton, \"click\", (t)=>this._handleSubmitButtonClick(t));\n    }\n    _handleSubmitButtonClick(t) {\n        if (this._element.setAttribute(Ls, !0), this._config.submitCallback) {\n            this._submitCallback = (e)=>this._config.submitCallback(t, e);\n            return;\n        }\n    }\n    _getConfig(t) {\n        return t = {\n            ...Gl,\n            ...h.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, I(Do, t, this.constructor.DefaultType), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...p0,\n            ...e,\n            ...t\n        }, I(Do, t, _0), t;\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, ir);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = jh.getOrCreateInstance(this);\n            if (typeof t == \"string\") {\n                if (e[t] === void 0 || t.startsWith(\"_\") || t === \"constructor\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nclass Qi {\n    _getCoordinates(t) {\n        const [e] = t.touches;\n        return {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n    _getDirection({ x: t, y: e }) {\n        return {\n            x: {\n                direction: t < 0 ? \"left\" : \"right\",\n                value: Math.abs(t)\n            },\n            y: {\n                direction: e < 0 ? \"up\" : \"down\",\n                value: Math.abs(e)\n            }\n        };\n    }\n    _getOrigin({ x: t, y: e }, { x: i, y: n }) {\n        return {\n            x: t - i,\n            y: e - n\n        };\n    }\n    _getDistanceBetweenTwoPoints(t, e, i, n) {\n        return Math.hypot(e - t, n - i);\n    }\n    _getMidPoint({ x1: t, x2: e, y1: i, y2: n }) {\n        return {\n            x: (t + e) / 2,\n            y: (i + n) / 2\n        };\n    }\n    _getVectorLength({ x1: t, x2: e, y1: i, y2: n }) {\n        return Math.sqrt((e - t) ** 2 + (n - i) ** 2);\n    }\n    _getRightMostTouch(t) {\n        let e = null;\n        const i = Number.MIN_VALUE;\n        return t.forEach((n)=>{\n            n.clientX > i && (e = n);\n        }), e;\n    }\n    _getAngle(t, e, i, n) {\n        return Math.atan2(n - e, i - t);\n    }\n    _getAngularDistance(t, e) {\n        return e - t;\n    }\n    _getCenterXY({ x1: t, x2: e, y1: i, y2: n }) {\n        return {\n            x: t + (e - t) / 2,\n            y: i + (n - i) / 2\n        };\n    }\n    _getPinchTouchOrigin(t) {\n        const [e, i] = t, n = {\n            x1: e.clientX,\n            x2: i.clientX,\n            y1: e.clientY,\n            y2: i.clientY\n        };\n        return [\n            this._getVectorLength(n),\n            this._getCenterXY(n)\n        ];\n    }\n    _getPosition({ x1: t, x2: e, y1: i, y2: n }) {\n        return {\n            x1: t,\n            x2: e,\n            y1: i,\n            y2: n\n        };\n    }\n}\nconst Lo = \"press\", f0 = \"pressup\", m0 = {\n    time: \"number\",\n    pointers: \"number\"\n}, g0 = {\n    time: 250,\n    pointers: 1\n};\nclass b0 extends Qi {\n    constructor(t, e = {}){\n        super(), this._element = t, this._options = this._getConfig(e), this._timer = null;\n    }\n    // Getters\n    static get NAME() {\n        return Lo;\n    }\n    handleTouchStart(t) {\n        const { time: e, pointers: i } = this._options;\n        t.touches.length === i && (this._timer = setTimeout(()=>{\n            c.trigger(this._element, Lo, {\n                touch: t,\n                time: e\n            }), c.trigger(this._element, f0, {\n                touch: t\n            });\n        }, e));\n    }\n    handleTouchEnd() {\n        clearTimeout(this._timer);\n    }\n    _getConfig(t) {\n        const e = {\n            ...g0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Lo, e, m0), e;\n    }\n}\nconst v0 = \"swipe\", T0 = {\n    threshold: \"number\",\n    direction: \"string\"\n}, E0 = {\n    threshold: 10,\n    direction: \"all\"\n};\nclass C0 {\n    constructor(t, e){\n        this._element = t, this._startPosition = null, this._options = this._getConfig(e);\n    }\n    handleTouchStart(t) {\n        this._startPosition = this._getCoordinates(t);\n    }\n    handleTouchMove(t) {\n        if (!this._startPosition) return;\n        const e = this._getCoordinates(t), i = {\n            x: e.x - this._startPosition.x,\n            y: e.y - this._startPosition.y\n        }, n = this._getDirection(i);\n        if (this._options.direction === \"all\") {\n            if (n.y.value < this._options.threshold && n.x.value < this._options.threshold) return;\n            const r = n.y.value > n.x.value ? n.y.direction : n.x.direction;\n            c.trigger(this._element, `swipe${r}`, {\n                touch: t\n            }), c.trigger(this._element, \"swipe\", {\n                touch: t,\n                direction: r\n            }), this._startPosition = null;\n            return;\n        }\n        const o = this._options.direction === \"left\" || this._options === \"right\" ? \"x\" : \"y\";\n        n[o].direction === this._options.direction && n[o].value > this._options.threshold && (c.trigger(this._element, `swipe${n[o].direction}`, {\n            touch: t\n        }), this._startPosition = null);\n    }\n    handleTouchEnd() {\n        this._startPosition = null;\n    }\n    _getCoordinates(t) {\n        const [e] = t.touches;\n        return {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n    _getDirection(t) {\n        return {\n            x: {\n                direction: t.x < 0 ? \"left\" : \"right\",\n                value: Math.abs(t.x)\n            },\n            y: {\n                direction: t.y < 0 ? \"up\" : \"down\",\n                value: Math.abs(t.y)\n            }\n        };\n    }\n    _getConfig(t) {\n        const e = {\n            ...E0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(v0, e, T0), e;\n    }\n}\nconst Zt = \"pan\", A0 = `${Zt}start`, y0 = `${Zt}end`, w0 = `${Zt}move`, k0 = \"left\", x0 = \"right\", O0 = {\n    threshold: \"number\",\n    direction: \"string\",\n    pointers: \"number\"\n}, S0 = {\n    threshold: 20,\n    direction: \"all\",\n    pointers: 1\n};\nclass I0 extends Qi {\n    constructor(t, e = {}){\n        super(), this._element = t, this._options = this._getConfig(e), this._startTouch = null;\n    }\n    // Getters\n    static get NAME() {\n        return Zt;\n    }\n    handleTouchStart(t) {\n        this._startTouch = this._getCoordinates(t), this._movedTouch = t, c.trigger(this._element, A0, {\n            touch: t\n        });\n    }\n    handleTouchMove(t) {\n        t.type === \"touchmove\" && t.preventDefault();\n        const { threshold: e, direction: i } = this._options, n = this._getCoordinates(t), o = this._getCoordinates(this._movedTouch), r = this._getOrigin(n, this._startTouch), a = this._getOrigin(n, o), l = this._getDirection(r), p = this._getDirection(a), { x: u, y: _ } = l;\n        if (i === \"all\" && (_.value > e || u.value > e)) {\n            const g = _.value > u.value ? _.direction : u.direction;\n            c.trigger(this._element, `${Zt}${g}`, {\n                touch: t\n            }), c.trigger(this._element, Zt, {\n                ...a,\n                touch: t\n            });\n        }\n        const f = i === k0 || i === x0 ? \"x\" : \"y\";\n        p[f].direction === i && l[f].value > e && c.trigger(this._element, `${Zt}${i}`, {\n            touch: t,\n            [f]: n[f] - o[f]\n        }), this._movedTouch = t, c.trigger(this._element, w0, {\n            touch: t\n        });\n    }\n    handleTouchEnd(t) {\n        t.type === \"touchend\" && t.preventDefault(), this._movedTouch = null, this._startTouch = null, c.trigger(this._element, y0, {\n            touch: t\n        });\n    }\n    _getConfig(t) {\n        const e = {\n            ...S0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Zt, e, O0), e;\n    }\n}\nconst Ue = \"pinch\", D0 = `${Ue}end`, $0 = `${Ue}start`, L0 = `${Ue}move`, N0 = {\n    threshold: \"number\",\n    pointers: \"number\"\n}, M0 = {\n    threshold: 10,\n    pointers: 2\n};\nclass R0 extends Qi {\n    constructor(t, e = {}){\n        super(), this._element = t, this._options = this._getConfig(e), this._startTouch = null, this._origin = null, this._touch = null, this._math = null, this._ratio = null;\n    }\n    // Getters\n    static get NAME() {\n        return Ue;\n    }\n    get isNumber() {\n        return typeof this._startTouch == \"number\" && typeof this._touch == \"number\" && // eslint-disable-next-line no-restricted-globals\n        !isNaN(this._startTouch) && // eslint-disable-next-line no-restricted-globals\n        !isNaN(this._touch);\n    }\n    handleTouchStart(t) {\n        if (t.touches.length !== this._options.pointers) return;\n        t.type === \"touchstart\" && t.preventDefault();\n        const [e, i] = this._getPinchTouchOrigin(t.touches);\n        this._touch = e, this._origin = i, this._startTouch = this._touch, c.trigger(this._element, $0, {\n            touch: t,\n            ratio: this._ratio,\n            origin: this._origin\n        });\n    }\n    handleTouchMove(t) {\n        const { threshold: e, pointers: i } = this._options;\n        t.touches.length === i && (t.type === \"touchmove\" && t.preventDefault(), this._touch = this._getPinchTouchOrigin(t.touches)[0], this._ratio = this._touch / this._startTouch, this.isNumber && (this._origin.x > e || this._origin.y > e) && (this._startTouch = this._touch, c.trigger(this._element, Ue, {\n            touch: t,\n            ratio: this._ratio,\n            origin: this._origin\n        }), c.trigger(this._element, L0, {\n            touch: t,\n            ratio: this._ratio,\n            origin: this._origin\n        })));\n    }\n    handleTouchEnd(t) {\n        this.isNumber && (this._startTouch = null, c.trigger(this._element, D0, {\n            touch: t,\n            ratio: this._ratio,\n            origin: this._origin\n        }));\n    }\n    _getConfig(t) {\n        const e = {\n            ...M0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Ue, e, N0), e;\n    }\n}\nconst No = \"tap\", P0 = {\n    interval: \"number\",\n    time: \"number\",\n    taps: \"number\",\n    pointers: \"number\"\n}, B0 = {\n    interval: 500,\n    time: 250,\n    taps: 1,\n    pointers: 1\n};\nclass H0 extends Qi {\n    constructor(t, e){\n        super(), this._element = t, this._options = this._getConfig(e), this._timer = null, this._tapCount = 0;\n    }\n    // Getters\n    static get NAME() {\n        return No;\n    }\n    handleTouchStart(t) {\n        const { x: e, y: i } = this._getCoordinates(t), { interval: n, taps: o, pointers: r } = this._options;\n        return t.touches.length === r && (this._tapCount += 1, this._tapCount === 1 && (this._timer = setTimeout(()=>{\n            this._tapCount = 0;\n        }, n)), this._tapCount === o && (clearTimeout(this._timer), this._tapCount = 0, c.trigger(this._element, No, {\n            touch: t,\n            origin: {\n                x: e,\n                y: i\n            }\n        }))), t;\n    }\n    handleTouchEnd() {}\n    handleTouchMove() {}\n    _getConfig(t) {\n        const e = {\n            ...B0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(No, e, P0), e;\n    }\n}\nconst Wi = \"rotate\", V0 = `${Wi}end`, W0 = `${Wi}start`, F0 = {\n    angle: \"number\",\n    pointers: \"number\"\n}, Y0 = {\n    angle: 0,\n    pointers: 2\n};\nclass j0 extends Qi {\n    constructor(t, e){\n        super(), this._element = t, this._options = this._getConfig(e), this._origin = {};\n    }\n    // Getters\n    static get NAME() {\n        return Wi;\n    }\n    handleTouchStart(t) {\n        t.type === \"touchstart\" && t.preventDefault(), !(t.touches.length < 2) && (this._startTouch = t, this._origin = {}, c.trigger(this._element, W0, {\n            touch: t\n        }));\n    }\n    handleTouchMove(t) {\n        t.type === \"touchmove\" && t.preventDefault();\n        let e, i;\n        const n = t.touches;\n        if (n.length === 1 && this._options.pointers === 1) {\n            const { left: o, top: r, width: a, height: l } = this._element.getBoundingClientRect();\n            e = {\n                x: o + a / 2,\n                y: r + l / 2\n            }, i = n[0];\n        } else if (t.touches.length === 2 && this._options.pointers === 2) {\n            const [o, r] = t.touches, a = {\n                x1: r.clientX,\n                x2: o.clientX,\n                y1: r.clientY,\n                y2: o.clientY\n            };\n            e = this._getMidPoint(a), i = this._getRightMostTouch(t.touches);\n        } else return;\n        this.currentAngle = this._getAngle(e.x, e.y, i.clientX, i.clientY), this._origin.initialAngle ? (this._origin.change = this._getAngularDistance(this._origin.previousAngle, this.currentAngle), this._origin.distance += this._origin.change) : (this._origin.initialAngle = this._origin.previousAngle = this.currentAngle, this._origin.distance = this._origin.change = 0), this._origin.previousAngle = this.currentAngle, this.rotate = {\n            currentAngle: this.currentAngle,\n            distance: this._origin.distance,\n            change: this._origin.change\n        }, c.trigger(this._element, Wi, {\n            ...this.rotate,\n            touch: t\n        });\n    }\n    handleTouchEnd(t) {\n        t.type === \"touchend\" && t.preventDefault(), this._origin = {}, c.trigger(this._element, V0, {\n            touch: t\n        });\n    }\n    _getConfig(t) {\n        const e = {\n            ...Y0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Wi, e, F0), e;\n    }\n}\nconst sr = \"touch\", Mo = `te.${sr}`, K0 = {\n    event: \"string\"\n}, z0 = {\n    event: \"swipe\"\n};\nclass Kh {\n    constructor(t, e = {}){\n        this._element = t, this._options = this._getConfig(e), this._event = this._options.event, this.swipe = this._event === \"swipe\" ? new C0(t, e) : null, this.press = this._event === \"press\" ? new b0(t, e) : null, this.pan = this._event === \"pan\" ? new I0(t, e) : null, this.pinch = this._event === \"pinch\" ? new R0(t, e) : null, this.tap = this._event === \"tap\" ? new H0(t, e) : null, this.rotate = this._event === \"rotate\" ? new j0(t, e) : null, this._touchStartHandler = (i)=>this._handleTouchStart(i), this._touchMoveHandler = (i)=>this._handleTouchMove(i), this._touchEndHandler = (i)=>this._handleTouchEnd(i), c.on(this._element, \"touchstart\", this._touchStartHandler), c.on(this._element, \"touchmove\", this._touchMoveHandler), c.on(this._element, \"touchend\", this._touchEndHandler), this._element && A.setData(t, Mo, this);\n    }\n    // Getters\n    static get NAME() {\n        return sr;\n    }\n    dispose() {\n        c.off(this._element, \"touchstart\", this._touchStartHandler), c.off(this._element, \"touchmove\", this._touchMoveHandler), c.off(this._element, \"touchend\", this._touchEndHandler), this.swipe = null, this.press = null, this.pan = null, this.pinch = null, this.tap = null, this.rotate = null;\n    }\n    _getConfig(t) {\n        const e = {\n            ...z0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(sr, e, K0), e;\n    }\n    _handleTouchStart(t) {\n        this[this._event].handleTouchStart(t);\n    }\n    _handleTouchMove(t) {\n        this[this._event].handleTouchMove && this[this._event].handleTouchMove(t);\n    }\n    _handleTouchEnd(t) {\n        this[this._event].handleTouchEnd(t);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Mo);\n            const i = typeof t == \"object\" && t;\n            if (!(!e && /dispose/.test(t)) && (e || (e = new Kh(this, i)), typeof t == \"string\")) {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                return e[t];\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, Mo);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst nr = \"smoothScroll\", Si = `te.${nr}`, Or = `.${Si}`, U0 = {\n    container: \"string\",\n    offset: \"number\",\n    easing: \"string\",\n    duration: \"number\"\n}, X0 = {\n    container: \"body\",\n    offset: 0,\n    easing: \"linear\",\n    duration: 500\n}, G0 = `scrollStart${Or}`, q0 = `scrollEnd${Or}`, Z0 = `scrollCancel${Or}`;\nclass zh {\n    constructor(t, e = {}){\n        this._element = t, this._options = this._getConfig(e), this._href = this._element.getAttribute(\"href\"), this.isCancel = !1, this._element && (A.setData(t, Si, this), this._setup());\n    }\n    // getters\n    static get NAME() {\n        return nr;\n    }\n    get isWindow() {\n        return this._options.container === \"body\";\n    }\n    get containerToScroll() {\n        return this.isWindow ? document.documentElement : d.findOne(this._options.container, document.documentElement);\n    }\n    get elFromHrefExist() {\n        return !!d.findOne(this._href, this.containerToScroll);\n    }\n    get offsetFromEl() {\n        const t = this.containerToScroll.scrollTop, e = d.findOne(this._href, this.containerToScroll);\n        if (this.isWindow) return h.offset(e).top - this._options.offset + t;\n        const i = e.getBoundingClientRect().y, n = this.containerToScroll.getBoundingClientRect().y;\n        return i - n - this._options.offset + t;\n    }\n    get easingFunction() {\n        const t = this._options.easing, e = `_motion${t[0].toUpperCase()}${t.slice(1)}`;\n        return this[e] ? this[e] : this._motionLinear;\n    }\n    // public\n    dispose() {\n        c.off(this._element, \"click\", this._handleClick), A.removeData(this._element, Si), this._element = null;\n    }\n    cancelScroll() {\n        this.isCancel = !0;\n    }\n    // private\n    _getConfig(t) {\n        const e = {\n            ...X0,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(nr, e, U0), e;\n    }\n    _inViewport() {\n        if (this.isWindow) return !0;\n        const t = this.containerToScroll.getBoundingClientRect();\n        return t.top >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight);\n    }\n    _setup() {\n        const t = typeof this._href < \"u\", e = this._href.includes(\"#\");\n        t && e && this.elFromHrefExist && (this._scrollOnClickEvent(), this._preventNativeScroll());\n    }\n    _scrollOnClickEvent() {\n        c.on(this._element, \"click\", (t)=>{\n            this._handleClick(t);\n        });\n    }\n    _handleClick(t) {\n        t.preventDefault(), this.isCancel = !1, c.trigger(this._element, G0);\n        const e = this.containerToScroll, i = this.containerToScroll.scrollTop, n = this.offsetFromEl, o = 0, r = 1 / this._options.duration, a = 4.25, l = this.easingFunction;\n        this._inViewport() ? this._scrollOnNextTick(e, i, n, o, r, a, l) : (this._scrollOnNextTick(document.documentElement, document.documentElement.scrollTop, this.containerToScroll.offsetTop, o, r, a, l), setTimeout(()=>{\n            this._scrollOnNextTick(e, i, n, o, r, a, l), this.isCancel = !1;\n        }, this._options.duration));\n    }\n    _scrollOnNextTick(t, e, i, n, o, r, a) {\n        const l = n < 0, p = n > 1, u = o <= 0;\n        if (l || p || u || this.isCancel) {\n            if (this.isCancel) {\n                this.isInViewport && (this.isCancel = !1), c.trigger(this._element, Z0);\n                return;\n            }\n            c.trigger(this._element, q0), t.scrollTop = i;\n            return;\n        }\n        t.scrollTo({\n            top: e - (e - i) * a(n)\n        }), n += o * r, setTimeout(()=>{\n            this._scrollOnNextTick(t, e, i, n, o, r, a);\n        });\n    }\n    _preventDefault(t) {\n        t.preventDefault();\n    }\n    _preventNativeScroll() {\n        let t = !1;\n        try {\n            window.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n                get: ()=>t = !0\n            }));\n        } catch (n) {\n            this._scrollError = n;\n        }\n        const e = t ? {\n            passive: !1\n        } : !1, i = \"onwheel\" in $(\"div\") ? \"wheel\" : \"mousewheel\";\n        this.isWindow && (this._deleteScrollOnStart(e, i), this._addScrollOnEnd(e, i), this._addScrollOnCancel(e, i));\n    }\n    _deleteScrollOnStart(t, e) {\n        c.on(this._element, \"scrollStart.te.smoothScroll\", ()=>{\n            window.addEventListener(e, this._preventDefault, t), window.addEventListener(\"touchmove\", this._preventDefault, t);\n        });\n    }\n    _addScrollOnEnd(t, e) {\n        c.on(this._element, \"scrollEnd.te.smoothScroll\", ()=>{\n            window.removeEventListener(e, this._preventDefault, t), window.removeEventListener(\"touchmove\", this._preventDefault, t);\n        });\n    }\n    _addScrollOnCancel(t, e) {\n        c.on(this._element, \"scrollCancel.te.smoothScroll\", ()=>{\n            window.removeEventListener(e, this._preventDefault, t), window.removeEventListener(\"touchmove\", this._preventDefault, t);\n        });\n    }\n    // Motions\n    // Linear\n    _motionLinear(t) {\n        return t;\n    }\n    // Ease-In\n    _motionEaseInQuad(t) {\n        return t * t;\n    }\n    _motionEaseInCubic(t) {\n        return t * t * t;\n    }\n    _motionEaseInQuart(t) {\n        return t * t * t * t;\n    }\n    _motionEaseInQuint(t) {\n        return t * t * t * t * t;\n    }\n    // Ease-In-Out\n    _motionEaseInOutQuad(t) {\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n    }\n    _motionEaseInOutCubic(t) {\n        return t /= 0.5, t < 1 ? t * t * t / 2 : (t -= 2, (t * t * t + 2) / 2);\n    }\n    _motionEaseInOutQuart(t) {\n        return t /= 0.5, t < 1 ? 0.5 * t * t * t * t : (t -= 2, -(t * t * t * t - 2) / 2);\n    }\n    _motionEaseInOutQuint(t) {\n        return t /= 0.5, t < 1 ? t * t * t * t * t / 2 : (t -= 2, (t * t * t * t * t + 2) / 2);\n    }\n    // Ease-Out\n    _motionEaseOutQuad(t) {\n        return -t * (t - 2);\n    }\n    _motionEaseOutCubic(t) {\n        return t--, t * t * t + 1;\n    }\n    _motionEaseOutQuart(t) {\n        return t--, -(t * t * t * t - 1);\n    }\n    _motionEaseOutQuint(t) {\n        return t--, t * t * t * t * t + 1;\n    }\n    // static\n    static getInstance(t) {\n        return A.getData(t, Si);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Si);\n            const i = typeof t == \"object\" && t;\n            if (e || (e = new zh(this, i)), typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst ql = \"lazyLoad\", Ps = \"te.lazyLoad\", Q0 = \"[data-te-lazy-load-init]\", Zl = \"data-te-lazy-load\", J0 = \"onLoad.te.lazy\", tC = \"onError.te.lazy\", Ql = [\n    \"img\",\n    \"video\"\n], eC = {\n    lazySrc: \"(string|null)\",\n    lazyDelay: \"number\",\n    lazyAnimation: \"string\",\n    lazyOffset: \"number\",\n    lazyPlaceholder: \"(string|undefined)\",\n    lazyError: \"(string|undefined)\"\n}, iC = {\n    lazySrc: null,\n    lazyDelay: 500,\n    lazyAnimation: \"[fade-in_1s_ease-in-out]\",\n    lazyOffset: 0\n};\nclass or {\n    constructor(t, e){\n        this._element = t, this._element && A.setData(t, Ps, this), this._options = this._getConfig(e), this.scrollHandler = this._scrollHandler.bind(this), this.errorHandler = this._setElementError.bind(this), this._childrenInstances = null, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return ql;\n    }\n    get offsetValues() {\n        return this._element.getBoundingClientRect();\n    }\n    get inViewport() {\n        if (this.parent) {\n            const t = this.parent.getBoundingClientRect();\n            return t.y > 0 && t.y < window.innerHeight && this.offsetValues.y >= t.y && this.offsetValues.y <= t.y + t.height && this.offsetValues.y <= window.innerHeight;\n        }\n        return this.offsetValues.top + this._options.lazyOffset <= window.innerHeight && this.offsetValues.bottom >= 0;\n    }\n    get parent() {\n        const [t] = d.parents(this._element, Q0);\n        return t;\n    }\n    get node() {\n        return this._element.nodeName;\n    }\n    get isContainer() {\n        return !d.matches(this._element, Ql);\n    }\n    // Public\n    dispose() {\n        A.removeData(this._element, Ps), this._animation && (this._animation.dispose(), this._animation = null), this._element = null, this._childrenInstances && this._childrenInstances.forEach((t)=>t.dispose());\n    }\n    // Private\n    _init() {\n        if (this._element.setAttribute(Zl, \"\"), this.isContainer) {\n            this._setupContainer();\n            return;\n        }\n        this._setupElement();\n    }\n    _setupElement() {\n        c.one(this._element, \"error\", this.errorHandler), this._options.lazyPlaceholder && this._setPlaceholder(), this._animation = new wr(this._element, {\n            animation: `${this._options.lazyAnimation}`,\n            animationStart: \"onLoad\"\n        }), c.one(this._element, \"load\", ()=>this._scrollHandler()), this.parent && c.on(this.parent, \"scroll\", this.scrollHandler), c.on(window, \"scroll\", this.scrollHandler);\n    }\n    _scrollHandler() {\n        this.inViewport && (this._timeout = setTimeout(()=>{\n            this._setSrc(), this._element.removeAttribute(Zl), this._removeAttrs(), this._animation.init();\n        }, this._options.lazyDelay), this.parent && c.off(this.parent, \"scroll\", this.scrollHandler), c.off(window, \"scroll\", this.scrollHandler));\n    }\n    _setElementError() {\n        !this._options.lazyError || this._element.src === this._options.lazyError ? this._element.alt = \"404 not found\" : this._element.setAttribute(\"src\", this._options.lazyError), c.trigger(this._element, tC);\n    }\n    _setSrc() {\n        this._element.setAttribute(\"src\", this._options.lazySrc), c.trigger(this._element, J0);\n    }\n    _setPlaceholder() {\n        this.node === \"IMG\" ? this._element.setAttribute(\"src\", this._options.lazyPlaceholder) : this.node === \"VIDEO\" && this._element.setAttribute(\"poster\", this._options.lazyPlaceholder);\n    }\n    _removeAttrs() {\n        [\n            \"src\",\n            \"delay\",\n            \"animation\",\n            \"placeholder\",\n            \"offset\",\n            \"error\"\n        ].forEach((t)=>{\n            h.removeDataAttribute(this._element, `lazy-${t}`);\n        });\n    }\n    _setupContainer() {\n        this._childrenInstances = d.children(this._element, Ql).map((t)=>new or(t, this._options));\n    }\n    _getConfig(t) {\n        const e = {\n            ...iC,\n            ...t,\n            ...h.getDataAttributes(this._element)\n        };\n        return I(ql, e, eC), e;\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, Ps);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Ps);\n            const i = typeof t == \"object\" && t;\n            if (e || (e = new or(this, i)), typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst Jl = \"clipboard\", Ii = \"te.clipboard\", sC = `.${Ii}`, nC = {\n    clipboardTarget: null\n}, oC = {\n    clipboardTarget: \"null|string\"\n}, rC = `copy${sC}`;\nclass Uh {\n    constructor(t, e = {}){\n        this._element = t, this._options = e, this._element && (A.setData(t, Ii, this), this._initCopy = this._initCopy.bind(this), this._setup());\n    }\n    // Getters\n    static get NAME() {\n        return Jl;\n    }\n    get options() {\n        const t = {\n            ...nC,\n            ...h.getDataAttributes(this._element),\n            ...this._options\n        };\n        return I(Jl, t, oC), t;\n    }\n    get clipboardTarget() {\n        return d.findOne(this.options.clipboardTarget);\n    }\n    get copyText() {\n        const t = this.clipboardTarget.hasAttribute(\"data-te-clipboard-text\"), e = this.clipboardTarget.value, i = this.clipboardTarget.textContent;\n        return t ? this.clipboardTarget.getAttribute(\"data-te-clipboard-text\") : e || i;\n    }\n    // Public\n    dispose() {\n        c.off(this._element, \"click\", this._initCopy), A.removeData(this._element, Ii), this._element = null;\n    }\n    // Private\n    _setup() {\n        c.on(this._element, \"click\", this._initCopy);\n    }\n    _initCopy() {\n        const t = this._createNewInput();\n        document.body.appendChild(t), this._selectInput(t), c.trigger(this._element, rC, {\n            copyText: this.copyText\n        }), t.remove();\n    }\n    _createNewInput() {\n        const t = this.clipboardTarget.tagName === \"TEXTAREA\" ? \"textarea\" : \"input\", e = $(t);\n        return e.value = this.copyText, h.addClass(e, \"-left-[9999px] absolute\"), e;\n    }\n    _selectInput(t) {\n        t.select(), t.focus(), t.setSelectionRange(0, 99999), document.execCommand(\"copy\");\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Ii);\n            const i = typeof t == \"object\" && t;\n            if (e || (e = new Uh(this, i)), typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, Ii);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst rr = \"infiniteScroll\", Bs = `te.${rr}`, aC = {\n    infiniteDirection: \"y\"\n}, lC = {\n    infiniteDirection: \"string\"\n};\nclass Xh {\n    constructor(t, e){\n        this._element = t, this._element && A.setData(t, Bs, this), this._options = this._getConfig(e), this.scrollHandler = this._scrollHandler.bind(this), this._init();\n    }\n    // Getters\n    static get NAME() {\n        return rr;\n    }\n    get rect() {\n        return this._element.getBoundingClientRect();\n    }\n    get condition() {\n        return this._element === window ? Math.abs(window.scrollY + window.innerHeight - document.documentElement.scrollHeight) < 1 : this._options.infiniteDirection === \"x\" ? this.rect.width + this._element.scrollLeft + 10 >= this._element.scrollWidth : Math.ceil(this.rect.height + this._element.scrollTop) >= this._element.scrollHeight;\n    }\n    // Public\n    dispose() {\n        c.off(this._element, \"scroll\", this.scrollHandler), A.removeData(this._element, Bs), this._element = null;\n    }\n    // Private\n    _init() {\n        c.on(this._element, \"scroll\", ()=>this._scrollHandler());\n    }\n    _scrollHandler() {\n        this.condition && c.trigger(this._element, \"complete.te.infiniteScroll\"), c.off(this._element, \"scroll\", this.scrollHandler);\n    }\n    _getConfig(t) {\n        const e = {\n            ...aC,\n            ...this._element !== window ? h.getDataAttributes(this._element) : {},\n            ...t\n        };\n        return I(rr, e, lC), e;\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, Bs);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Bs);\n            const i = typeof t == \"object\" && t;\n            if (e || (e = new Xh(this, i)), typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nfunction cC({ backdropID: s }, t) {\n    const e = $(\"div\");\n    return h.addClass(e, `${t.backdrop} ${t.backdropColor}`), e.id = s, e;\n}\nconst Fi = \"loadingManagement\", Hs = `te.${Fi}`, hC = \"[data-te-loading-icon-ref]\", dC = \"[data-te-loading-text-ref]\", uC = `show.te.${Fi}`, pC = {\n    backdrop: \"(null|boolean)\",\n    backdropID: \"(null|string|number)\",\n    delay: \"(null|number)\",\n    loader: \"(null|string|number)\",\n    parentSelector: \"(null|string)\",\n    loadingIcon: \"boolean\",\n    loadingText: \"boolean\",\n    scroll: \"boolean\"\n}, _C = {\n    backdrop: !0,\n    backdropID: null,\n    delay: 0,\n    loader: \"\",\n    parentSelector: null,\n    scroll: !0,\n    loadingText: !0,\n    loadingIcon: !0\n}, fC = {\n    loadingSpinner: \"absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] flex flex-col justify-center items-center z-40\",\n    spinnerColor: \"text-primary dark:text-primary-400\",\n    backdrop: \"w-full h-full fixed top-0 left-0 bottom-0 right-0 z-30\",\n    backdropColor: \"bg-[rgba(0,0,0,0.4)]\"\n}, mC = {\n    loadingSpinner: \"string\",\n    spinnerColor: \"string\",\n    backdrop: \"string\",\n    backdropColor: \"string\"\n};\nclass Gh {\n    constructor(t, e = {}, i){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._element && A.setData(t, Hs, this), this._backdropElement = null, this._parentElement = d.findOne(this._options.parentSelector), this._loadingIcon = d.findOne(hC, this._element), this._loadingText = d.findOne(dC, this._element), this.init();\n    }\n    // Getters\n    static get NAME() {\n        return Fi;\n    }\n    // Public\n    init() {\n        const t = this._loadingIcon.cloneNode(!0), e = this._loadingText.cloneNode(!0);\n        this._removeElementsOnStart(), setTimeout(()=>{\n            h.addClass(this._element, `${this._classes.loadingSpinner} ${this._classes.spinnerColor}`), this._setBackdrop(), this._setLoadingIcon(t), this._setLoadingText(e), this._setScrollOption(), c.trigger(this._element, uC);\n        }, this._options.delay);\n    }\n    dispose() {\n        A.removeData(this._element, Hs), h.removeClass(this._element, `${this._classes.loadingSpinner} ${this._classes.spinnerColor}`);\n        const t = this._options.delay;\n        setTimeout(()=>{\n            this._removeBackdrop(), this._backdropElement = null, this._element = null, this._options = null;\n        }, t);\n    }\n    // Private\n    _setBackdrop() {\n        const { backdrop: t } = this._options;\n        t && (this._backdropElement = cC(this._options, this._classes), this._parentElement !== null ? (h.addClass(this._element, \"absolute\"), h.addClass(this._parentElement, \"relative\"), h.addClass(this._backdropElement, \"absolute\"), this._parentElement.appendChild(this._backdropElement)) : (h.addClass(this._element, \"!fixed\"), document.body.appendChild(this._backdropElement), document.body.appendChild(this._element)));\n    }\n    _removeBackdrop() {\n        const { backdrop: t } = this._options;\n        t && (this._parentElement !== null ? (h.removeClass(this._element, \"absolute\"), h.removeClass(this._parentElement, \"relative\"), this._backdropElement.remove()) : (this._backdropElement.remove(), this._element.remove()));\n    }\n    _setLoadingIcon(t) {\n        if (!this._options.loadingIcon) {\n            t.remove();\n            return;\n        }\n        this._element.appendChild(t), t.id = this._options.loader;\n    }\n    _setLoadingText(t) {\n        if (!this._options.loadingText) {\n            t.remove();\n            return;\n        }\n        this._element.appendChild(t);\n    }\n    _removeElementsOnStart() {\n        this._element !== null && (this._loadingIcon.remove(), this._loadingText.remove());\n    }\n    _setScrollOption() {\n        if (this._options.scroll) {\n            if (this._parentElement === null) {\n                h.addClass(document.body, \"overflow-auto\");\n                return;\n            }\n            h.addClass(this._parentElement, \"overflow-auto\");\n        } else {\n            if (this._parentElement === null) {\n                h.addClass(document.body, \"overflow-hidden\");\n                return;\n            }\n            h.addClass(this._parentElement, \"overflow-hidden\");\n        }\n    }\n    _getConfig(t) {\n        const e = {\n            ..._C,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(Fi, e, pC), e;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...fC,\n            ...e,\n            ...t\n        }, I(Fi, t, mC), t;\n    }\n    // Static\n    static getInstance(t) {\n        return A.getData(t, Hs);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = A.getData(this, Hs);\n            const i = typeof t == \"object\" && t;\n            if (e || (e = new Gh(this, i)), typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst gC = (s)=>{\n    const t = /^(0?[1-9]|1[012])(:[0-5]\\d) [APap][mM]$/, e = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/;\n    return s.match(t) || s.match(e);\n}, bC = (s)=>s && Object.prototype.toString.call(s) === \"[object Date]\" && !isNaN(s), vC = (s)=>s.getMonth(), TC = (s)=>s.getFullYear(), EC = (s)=>s.match(/[^(dmy)]{1,}/g), CC = (s, t, e, i)=>{\n    let n;\n    e[0] !== e[1] ? n = e[0] + e[1] : n = e[0];\n    const o = new RegExp(`[${n}]`), r = s.split(o), a = t.split(o), l = t.indexOf(\"mmm\") !== -1, p = [];\n    for(let b = 0; b < a.length; b++)a[b].indexOf(\"yy\") !== -1 && (p[0] = {\n        value: r[b],\n        format: a[b]\n    }), a[b].indexOf(\"m\") !== -1 && (p[1] = {\n        value: r[b],\n        format: a[b]\n    }), a[b].indexOf(\"d\") !== -1 && a[b].length <= 2 && (p[2] = {\n        value: r[b],\n        format: a[b]\n    });\n    let u;\n    t.indexOf(\"mmmm\") !== -1 ? u = i.monthsFull : u = i.monthsShort;\n    const _ = Number(p[0].value), f = l ? AC(p[1].value, u) : Number(p[1].value) - 1, g = Number(p[2].value);\n    return Ct(_, f, g);\n}, AC = (s, t)=>t.findIndex((e)=>e === s), yC = (s, t, e)=>`\n  <button type=\"button\" class=\"${e.pickerIcon}\" data-te-datepicker-toggle-button-ref>\n    ${s}\n  </button>\n  <button type=\"button\" class=\"${e.pickerIcon}\" data-te-timepicker-toggle-button-ref>\n    ${t}\n  </button>\n`, wC = (s, t)=>`\n  <button type=\"button\" class=\"${t.toggleButton}\" data-te-date-timepicker-toggle-ref>\n    ${s} \n  </button>\n`, on = \"datetimepicker\", Di = `te.${on}`, Sr = `.${Di}`, qh = \"data-te-datepicker-init\", Zh = \"data-te-timepicker-init\", kC = \"data-te-datepicker-header\", xC = \"data-te-datepicker-cancel-button-ref\", OC = \"data-te-datepicker-ok-button-ref\", Ro = \"data-te-timepicker-wrapper\", tc = \"data-te-timepicker-cancel\", SC = \"data-te-timepicker-submit\", IC = \"data-te-timepicker-clear\", ec = \"data-te-buttons-timepicker\", DC = \"data-te-date-timepicker-toggle-ref\", $C = \"data-te-datepicker-toggle-button-ref\", LC = \"data-te-timepicker-toggle-button-ref\", NC = `[${Zh}]`, MC = `[${qh}]`, RC = `[${DC}]`, PC = `[${LC}]`, BC = \"[data-te-input-notch-ref]\", HC = \"[data-te-date-timepicker-toggle-ref]\", VC = \"[data-te-timepicker-elements-wrapper]\", WC = \"[data-te-timepicker-clock-wrapper]\", FC = `open${Sr}`, YC = `close${Sr}`, jC = `datetimeChange${Sr}`, ic = \"close.te.datepicker\", sc = \"input.te.timepicker\", Re = $(\"div\"), nc = {\n    inline: !1,\n    toggleButton: !0,\n    container: \"body\",\n    disabled: !1,\n    disablePast: !1,\n    disableFuture: !1,\n    defaultTime: \"\",\n    defaultDate: \"\",\n    timepicker: {},\n    datepicker: {},\n    showFormat: !1,\n    dateTimepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n  <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\n  </svg>`,\n    datepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n  <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\n  </svg>`,\n    timepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>`\n}, KC = {\n    inline: \"boolean\",\n    toggleButton: \"boolean\",\n    container: \"string\",\n    disabled: \"boolean\",\n    disablePast: \"boolean\",\n    disableFuture: \"boolean\",\n    defaultTime: \"(string|date|number)\",\n    defaultDate: \"(string|date|number)\",\n    timepicker: \"object\",\n    datepicker: \"object\",\n    showFormat: \"boolean\",\n    dateTimepickerToggleIconTemplate: \"string\",\n    datepickerToggleIconTemplate: \"string\",\n    timepickerToggleIconTemplate: \"string\"\n}, zC = {\n    toggleButton: \"flex items-center justify-content-center [&>svg]:w-5 [&>svg]:h-5 absolute outline-none border-none bg-transparent right-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2 hover:text-primary focus:text-primary dark:hover:text-primary-400 dark:focus:text-primary-400 dark:text-neutral-200\",\n    pickerIcon: \"[&>svg]:w-6 [&>svg]:h-6 [&>svg]:mx-auto [&>svg]:pointer-events-none w-1/2 px-1.5 py-[1px] rounded-[10px] min-h-[40px] cursor-pointer outline-none border-none text-white hover:bg-primary-600 dark:hover:bg-neutral-600\",\n    buttonsContainer: \"flex justify-evenly items-end bg-primary dark:bg-zinc-800 dark:data-[te-buttons-timepicker]:bg-zinc-700\",\n    timepicker: {},\n    datepicker: {}\n}, UC = {\n    toggleButton: \"string\",\n    pickerIcon: \"string\",\n    buttonsContainer: \"string\",\n    timepicker: \"object\",\n    datepicker: \"object\"\n};\nclass Qh {\n    constructor(t, e, i){\n        this._element = t, this._input = d.findOne(\"input\", this._element), this._options = this._getConfig(e), this._classes = this._getClasses(i), this._timepicker = null, this._datepicker = null, this._dateValue = this._options.defaultDate ? this._options.defaultDate : \"\", this._timeValue = this._options.defaultTime ? this._options.defaultTime : \"\", this._isInvalidTimeFormat = !1, this._format = this._options.datepicker.format ? this._options.datepicker.format : \"dd/mm/yyyy\", this._cancel = !1, this._scrollBar = new ti(), this._element && A.setData(t, Di, this), this._init();\n    }\n    // Getters\n    static get NAME() {\n        return on;\n    }\n    get toggleButton() {\n        return d.findOne(RC, this._element);\n    }\n    get notch() {\n        return d.findOne(BC, this._element);\n    }\n    dispose() {\n        c.off(this._element, \"click\", this._openDatePicker), c.off(this._input, \"input\", this._handleInput), c.off(this._element, \"click\"), A.removeData(this._element, Di), this._removeTimePicker(), this._removeDatepicker(), this.toggleButton.remove(), this._options = nc, this._timepicker = null, this._datepicker = null, this._dateValue = null, this._timeValue = null, this._isInvalidTimeFormat = null;\n    }\n    update(t = {}) {\n        const e = this._getConfig({\n            ...this._options,\n            ...t\n        });\n        this.dispose(), this._options = e, this._init();\n    }\n    // Private\n    _init() {\n        this._addDatepicker(), this._addTimePicker(), this._appendToggleButton(), this._listenToToggleClick(), this._listenToUserInput(), this._disableInput(), this._setInitialDefaultInput(), this._applyFormatPlaceholder(), this._options.disablePast && this._handleTimepickerDisablePast(), this._options.disableFuture && this._handleTimepickerDisableFuture();\n    }\n    _removeDatepicker() {\n        const t = this._element.querySelector(MC);\n        t && t.remove();\n    }\n    _addDatepicker() {\n        const t = $(\"div\");\n        t.id = this._element.id ? `datepicker-${this._element.id}` : et(\"datepicker-\");\n        const e = '<input type=\"text\">';\n        t.innerHTML = e, t.setAttribute(qh, \"\"), this._element.appendChild(t), h.addClass(t, \"hidden\");\n        let i = {\n            ...this._options.datepicker,\n            container: this._options.container,\n            disablePast: this._options.disablePast,\n            disableFuture: this._options.disableFuture\n        };\n        (this._options.inline || this._options.datepicker.inline) && (i = {\n            ...i,\n            inline: !0\n        }), this._datepicker = new og(t, i, {\n            ...this._classes.datepicker\n        }), this._datepicker._input.value = this._dateValue;\n    }\n    _removeTimePicker() {\n        const t = this._element.querySelector(NC);\n        t && (t.remove(), this._scrollBar.reset());\n    }\n    _addTimePicker() {\n        const t = $(\"div\");\n        t.id = this._element.id ? `timepicker-${this._element.id}` : et(\"timepicker-\");\n        const e = '<input type=\"text\">';\n        t.innerHTML = e, t.setAttribute(Zh, \"\"), this._element.appendChild(t), h.addClass(t, \"hidden\");\n        let i = {\n            ...this._options.timepicker,\n            container: this._options.container\n        };\n        (this._options.inline || this._options.timepicker.inline) && (i = {\n            ...i,\n            inline: !0\n        }), this._timepicker = new Sg(t, i, {\n            ...this._classes.timepicker\n        }), this._timepicker.input.value = this._timeValue;\n    }\n    _addIconButtons() {\n        if (h.addClass(Re, this._classes.buttonsContainer), Re.innerHTML = yC(this._options.datepickerToggleIconTemplate, this._options.timepickerToggleIconTemplate, this._classes), Re.removeAttribute(ec), !(this._options.inline || this._options.datepicker.inline)) {\n            if (this._scrollBar.hide(), this._datepicker._isOpen) d.findOne(`[${kC}]`, document.body).appendChild(Re);\n            else if (this._timepicker._modal && !this._options.timepicker.inline) {\n                const t = d.findOne(VC, document.body), e = d.findOne(WC, document.body);\n                Re.setAttribute(ec, \"\"), t.insertBefore(Re, e);\n            }\n        }\n    }\n    _enableOrDisableToggleButton() {\n        this._options.disabled ? (this.toggleButton.disabled = !0, h.addClass(this.toggleButton, \"pointer-events-none\")) : (this.toggleButton.disabled = !1, h.removeClass(this.toggleButton, \"pointer-events-none\"));\n    }\n    _appendToggleButton() {\n        this._options.toggleButton && (this._element.insertAdjacentHTML(\"beforeend\", wC(this._options.dateTimepickerToggleIconTemplate, this._classes)), this._enableOrDisableToggleButton());\n    }\n    _applyFormatPlaceholder() {\n        this._options.showFormat && (this._input.placeholder = this._format);\n    }\n    _listenToCancelClick() {\n        const t = d.findOne(`[${xC}]`, document.body);\n        c.one(t, \"mousedown\", ()=>{\n            this._cancel = !0, this._scrollBar.reset(), c.off(t, \"mousedown\");\n        });\n    }\n    _listenToToggleClick() {\n        c.on(this._element, \"click\", HC, (t)=>{\n            t.preventDefault(), this._openDatePicker();\n        });\n    }\n    _listenToUserInput() {\n        c.on(this._input, \"input\", (t)=>{\n            this._handleInput(t.target.value);\n        });\n    }\n    _disableInput() {\n        this._options.disabled && (this._input.disabled = \"true\");\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...nc,\n            ...e,\n            ...t\n        }, I(on, t, KC), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...zC,\n            ...e,\n            ...t\n        }, I(on, t, UC), t;\n    }\n    _handleInput(t) {\n        const e = t.split(\", \"), i = EC(this._format), n = e[0], o = e[1] || \"\", r = CC(n, this._format, i, this._datepicker._options);\n        e.length === 2 && (bC(r) && gC(o) ? (this._dateValue = n, this._timeValue = o, this._datepicker._input.value = this._dateValue, this._datepicker._activeDate = this._dateValue, this._datepicker._selectedYear = TC(r), this._datepicker._selectedMonth = vC(r), this._datepicker._headerDate = r, this._timepicker.input.value = this._timeValue, this._timepicker._isInvalidTimeFormat = !1) : (this._datepicker._activeDate = /* @__PURE__ */ new Date(), this._datepicker._selectedDate = null, this._datepicker._selectedMonth = null, this._datepicker._selectedYear = null, this._datepicker._headerDate = null, this._datepicker._headerMonth = null, this._datepicker._headerYear = null, this._timepicker._isInvalidTimeFormat = !0));\n    }\n    _openDatePicker() {\n        if (c.trigger(this._element, FC).defaultPrevented) return;\n        this._datepicker.open(), this._options.inline || this._scrollBar.hide(), (this._options.inline || this._options.datepicker.inline) && this._openDropdownDate(), this._addIconButtons(), this._listenToCancelClick(), this._options.inline && this._datepicker._isOpen && h.addClass(this.toggleButton, \"pointer-events-none\"), c.one(this._datepicker._element, ic, ()=>{\n            if (this._dateValue = this._datepicker._input.value, this._updateInputValue(), this._cancel) {\n                this._cancel = !1;\n                return;\n            }\n            let i = !1;\n            c.on(this._datepicker.container, \"click\", (n)=>{\n                !this._datepicker._selectedDate && n.target.hasAttribute(OC) || i || (this._openTimePicker(), i = !0, setTimeout(()=>{\n                    i = !1;\n                }, 500));\n            }), setTimeout(()=>{\n                d.findOne(`[${Ro}]`, document.body) || this._scrollBar.reset();\n            }, 10), this._options.inline && h.removeClass(this.toggleButton, \"pointer-events-none\");\n        });\n        const e = d.findOne(PC, document.body);\n        c.on(e, \"click\", ()=>{\n            this._datepicker.close(), this._scrollBar.hide(), c.trigger(this._datepicker._element, ic);\n        });\n    }\n    _handleTimepickerDisablePast() {\n        const t = /* @__PURE__ */ new Date();\n        t.setHours(0, 0, 0, 0), c.on(this._datepicker._element, \"dateChange.te.datepicker\", ()=>{\n            this._datepicker._selectedDate.getTime() === t.getTime() ? this._timepicker.update({\n                disablePast: !0\n            }) : this._timepicker.update({\n                disablePast: !1\n            });\n        });\n    }\n    _handleTimepickerDisableFuture() {\n        const t = /* @__PURE__ */ new Date();\n        t.setHours(0, 0, 0, 0), c.on(this._datepicker._element, \"dateChange.te.datepicker\", ()=>{\n            this._datepicker._selectedDate.getTime() === t.getTime() ? this._timepicker.update({\n                disableFuture: !0\n            }) : this._timepicker.update({\n                disableFuture: !1\n            });\n        });\n    }\n    _handleEscapeKey() {\n        c.one(document.body, \"keyup\", ()=>{\n            setTimeout(()=>{\n                d.findOne(`[${Ro}]`, document.body) || this._scrollBar.reset();\n            }, 250);\n        });\n    }\n    _handleCancelButton() {\n        const t = d.findOne(`[${tc}]`, document.body);\n        c.one(t, \"mousedown\", ()=>{\n            this._scrollBar.reset();\n        });\n    }\n    _openDropdownDate() {\n        const t = this._datepicker._popper;\n        t.state.elements.reference = this._input, this._scrollBar.reset();\n    }\n    _openTimePicker() {\n        c.trigger(this._timepicker.elementToggle, \"click\"), setTimeout(()=>{\n            if (this._addIconButtons(), (this._options.inline || this._options.timepicker.inline) && this._openDropdownTime(), this._timepicker._modal) {\n                const t = d.findOne(`[${tc}]`, document.body);\n                this._handleEscapeKey(), this._handleCancelButton(), c.on(this._timepicker._modal, \"click\", (e)=>{\n                    (e.target.hasAttribute(Ro) || e.target.hasAttribute(SC)) && setTimeout(()=>{\n                        this._scrollBar.reset();\n                    }, 200), e.target.hasAttribute(IC) && c.trigger(this._timepicker._element, sc), e.target.hasAttribute($C) && (c.trigger(t, \"click\"), setTimeout(()=>{\n                        this._openDatePicker(), this._scrollBar.hide();\n                    }, 200));\n                });\n            }\n        }), c.one(this._timepicker._element, sc, ()=>{\n            this._timeValue = this._timepicker.input.value, this._updateInputValue(), c.trigger(this._element, YC);\n        });\n    }\n    _openDropdownTime() {\n        const t = this._timepicker._popper;\n        t.state.elements.reference = this._input, t.update(), this._scrollBar.reset();\n    }\n    _setInitialDefaultInput() {\n        (this._options.defaultDate || this._options.defaultTime) && this._updateInputValue();\n    }\n    _updateInputValue() {\n        this._timeValue && this._dateValue && (this._input.value = `${this._dateValue}, ${this._timeValue}`, c.trigger(this._element, jC, {\n            value: this._input.value\n        }).defaultPrevented) || (c.trigger(this._input, \"focus\"), this.notch && this.notch.removeAttribute(\"data-te-input-focused\"));\n    }\n    // static\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, Di);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new Qh(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, Di);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst rn = \"sticky\", $i = `te.${rn}`, Jh = `.${$i}`, XC = `active${Jh}`, GC = `inactive${Jh}`, qC = {\n    stickyAnimationSticky: \"\",\n    stickyAnimationUnsticky: \"\",\n    stickyBoundary: !1,\n    stickyDelay: 0,\n    stickyDirection: \"down\",\n    stickyMedia: 0,\n    stickyOffset: 0,\n    stickyPosition: \"top\",\n    stickyZIndex: 100\n}, ZC = {\n    stickyAnimationSticky: \"string\",\n    stickyAnimationUnsticky: \"string\",\n    stickyBoundary: \"(boolean|string)\",\n    stickyDelay: \"number\",\n    stickyDirection: \"string\",\n    stickyMedia: \"number\",\n    stickyOffset: \"number\",\n    stickyPosition: \"string\",\n    stickyZIndex: \"(string|number)\"\n}, QC = {\n    stickyActive: \"\"\n}, JC = {\n    stickyActive: \"string\"\n};\nclass td {\n    constructor(t, e, i){\n        this._element = t, this._hiddenElement = null, this._elementPositionStyles = {}, this._scrollDirection = \"\", this._isSticked = !1, this._elementOffsetTop = null, this._scrollTop = 0, this._pushPoint = \"\", this._manuallyDeactivated = !1, this._element && (this._options = this._getConfig(e), this._classes = this._getClasses(i), A.setData(t, $i, this), this._init());\n    }\n    // Getters\n    static get NAME() {\n        return rn;\n    }\n    // Public\n    dispose() {\n        const { stickyAnimationUnsticky: t } = this._options;\n        let { animationDuration: e } = getComputedStyle(this._element);\n        e = t !== \"\" ? parseFloat(e) * 1e3 : 0, this._disableSticky(), setTimeout(()=>{\n            A.removeData(this._element, $i), this._element = null, this._options = null, this._hiddenElement = null, this._elementPositionStyles = null, this._scrollDirection = null, this._isSticked = null, this._elementOffsetTop = null, this._scrollTop = null, this._pushPoint = null, this._manuallyDeactivated = null;\n        }, e);\n    }\n    active() {\n        this._isSticked || (this._createHiddenElement(), this._enableSticky(), this._changeBoundaryPosition(), this._isSticked = !0, this._manuallyDeactivated = !1);\n    }\n    inactive() {\n        this._isSticked && (this._disableSticky(), this._isSticked = !1, this._manuallyDeactivated = !0);\n    }\n    // Private\n    _init() {\n        this._userActivityListener();\n    }\n    _userActivityListener() {\n        c.on(window, \"resize\", ()=>{\n            this._updateElementPosition(), this._updateElementOffset();\n        }), c.on(window, \"scroll\", ()=>{\n            if (!this._element || window.innerWidth <= this._options.stickyMedia || this._manuallyDeactivated) return;\n            const t = document.documentElement, { stickyDirection: e } = this._options, i = window.pageYOffset || t.scrollTop;\n            this._updateElementOffset(), this._updatePushPoint(), this._updateScrollDirection(i), this._clearInProgressAnimations();\n            const n = [\n                this._scrollDirection,\n                \"both\"\n            ].includes(e), o = this._pushPoint <= i, r = o && !this._isSticked && n, a = (!o || !n) && this._isSticked;\n            r && (this._createHiddenElement(), this._enableSticky(), this._changeBoundaryPosition(), this._isSticked = !0), a && (this._disableSticky(), this._isSticked = !1), this._isSticked && (this._updatePosition({\n                styles: this._elementPositionStyles\n            }), this._changeBoundaryPosition()), this._scrollTop = i <= 0 ? 0 : i;\n        });\n    }\n    _updatePushPoint() {\n        this._options.stickyPosition === \"top\" ? this._pushPoint = this._elementOffsetTop - this._options.stickyDelay : this._pushPoint = this._elementOffsetTop + this._element.height - document.body.scrollHeight + this._options.stickyDelay;\n    }\n    _updateElementOffset() {\n        this._hiddenElement ? this._elementOffsetTop = this._hiddenElement.offsetTop : this._elementOffsetTop = this._element.offsetTop, this._options.stickyAnimationUnsticky && (this._elementOffsetTop += this._element.height || 0);\n    }\n    _updateElementPosition() {\n        if (this._hiddenElement) {\n            const { left: t } = this._hiddenElement.getBoundingClientRect();\n            this._elementPositionStyles = {\n                left: `${t}px`\n            };\n        } else this._elementPositionStyles = {};\n        this._setStyle(this._element, this._elementPositionStyles);\n    }\n    _updateScrollDirection(t) {\n        t > this._scrollTop ? this._scrollDirection = \"down\" : this._scrollDirection = \"up\";\n    }\n    _clearInProgressAnimations() {\n        const t = this._scrollDirection === \"up\", e = this._element.classList.contains(this._options.stickyAnimationUnsticky), i = window.scrollY <= this._elementOffsetTop - this._element.height;\n        t && e && i && (this._removeUnstickyAnimation(), this._resetStyles(), this._removeHiddenElement());\n    }\n    _enableSticky() {\n        const { stickyAnimationSticky: t, stickyAnimationUnsticky: e, stickyOffset: i, stickyPosition: n, stickyZIndex: o } = this._options, { height: r, left: a, width: l } = this._element.getBoundingClientRect();\n        t !== \"\" && this._toggleClass(t, e, this._element), this._toggleClass(this._classes.stickyActive, \"\", this._element), this._setStyle(this._element, {\n            top: n === \"top\" && `${0 + i}px`,\n            bottom: n === \"bottom\" && `${0 + i}px`,\n            height: `${r}px`,\n            width: `${l}px`,\n            left: `${a}px`,\n            zIndex: `${o}`,\n            position: \"fixed\"\n        }), this._hiddenElement.hidden = !1, c.trigger(this._element, XC);\n    }\n    _changeBoundaryPosition() {\n        const { stickyPosition: t, stickyBoundary: e, stickyOffset: i } = this._options, { height: n } = this._element.getBoundingClientRect(), o = {\n            height: this._element.parentElement.getBoundingClientRect().height,\n            ...this._getOffset(this._element.parentElement)\n        };\n        let r;\n        const a = d.findOne(e);\n        a ? r = this._getOffset(a).top - n - i : r = o.height + o[t] - n - i;\n        const l = t === \"top\", p = t === \"bottom\", u = e, _ = r < 0, f = r > o.height - n;\n        let g;\n        l && (_ && u ? g = {\n            top: `${i + r}px`\n        } : g = {\n            top: `${i + 0}px`\n        }), p && (_ && u ? g = {\n            bottom: `${i + r}px`\n        } : f && u ? g = {\n            bottom: `${i + o.bottom}px`\n        } : g = {\n            bottom: `${i + 0}px`\n        }), this._setStyle(this._element, g);\n    }\n    _disableSticky() {\n        const { stickyAnimationUnsticky: t, stickyAnimationSticky: e } = this._options;\n        let { animationDuration: i } = getComputedStyle(this._element);\n        i = t !== \"\" ? parseFloat(i) * 1e3 : 0, this._options.stickyAnimationUnsticky !== \"\" && this._toggleClass(t, e, this._element), setTimeout(()=>{\n            this._element.classList.contains(e) || (this._removeUnstickyAnimation(), this._resetStyles(), this._removeHiddenElement(), this._toggleClass(\"\", this._classes.stickyActive, this._element), c.trigger(this._element, GC));\n        }, i);\n    }\n    _createHiddenElement() {\n        this._hiddenElement || (this._hiddenElement = this._copyElement(this._element));\n    }\n    _removeHiddenElement() {\n        this._hiddenElement && (this._hiddenElement.remove(), this._hiddenElement = null);\n    }\n    _removeUnstickyAnimation() {\n        this._toggleClass(\"\", this._options.stickyAnimationUnsticky, this._element);\n    }\n    _resetStyles() {\n        this._setStyle(this._element, {\n            top: null,\n            bottom: null,\n            position: null,\n            left: null,\n            zIndex: null,\n            width: null,\n            height: null\n        });\n    }\n    _updatePosition({ styles: t }) {\n        this._setStyle(this._element, t);\n    }\n    _toggleClass(t, e, i) {\n        t && h.addClass(i, t), e && h.removeClass(i, e);\n    }\n    _getOffset(t) {\n        const e = h.offset(t), i = t.getBoundingClientRect(), n = e.left === 0 && e.top === 0 ? 0 : window.innerHeight - i.bottom;\n        return {\n            ...e,\n            bottom: n\n        };\n    }\n    _copyElement(t) {\n        const { height: e, width: i } = t.getBoundingClientRect(), n = t.cloneNode(!1);\n        return n.hidden = !0, this._setStyle(n, {\n            height: `${e}px`,\n            width: `${i}px`,\n            opacity: \"0\"\n        }), t.parentElement.insertBefore(n, t), n;\n    }\n    _getConfig(t = {}) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...qC,\n            ...e,\n            ...t\n        }, I(rn, t, ZC), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...QC,\n            ...e,\n            ...t\n        }, I(rn, t, JC), t;\n    }\n    _setStyle(t, e) {\n        Object.keys(e).forEach((i)=>{\n            t.style[i] = e[i];\n        });\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, $i);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose|hide/.test(t)) && (i || (i = new td(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, $i);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst tA = \"data-te-autocomplete-dropdown-ref\", eA = \"data-te-autocomplete-items-list-ref\", iA = \"data-te-autocomplete-item-ref\", sA = \"data-te-autocomplete-loader-ref\";\nfunction nA(s, t) {\n    const { id: e, items: i, width: n, options: o } = s, r = $(\"div\");\n    h.addClass(r, t.dropdownContainer), h.addStyle(r, {\n        width: `${n}px`\n    }), r.setAttribute(\"id\", e);\n    const a = $(\"div\");\n    a.setAttribute(tA, \"\"), h.addClass(a, t.dropdown);\n    const l = $(\"ul\"), p = o.listHeight;\n    l.setAttribute(eA, \"\"), h.addClass(l, t.autocompleteList), h.addClass(l, t.scrollbar), h.addStyle(l, {\n        maxHeight: `${p}px`\n    }), l.setAttribute(\"role\", \"listbox\");\n    const u = ed(i, o);\n    return l.innerHTML = u, a.appendChild(l), r.appendChild(a), r;\n}\nfunction ed(s = [], t, e) {\n    const i = t.displayValue, n = t.itemContent;\n    return `\n    ${s.map((o, r)=>{\n        const a = typeof n == \"function\" ? pn(n(o), sh, null) : i(o);\n        return `<li data-te-index=\"${r}\" role=\"option\" class=\"${e}\" ${iA} >${a}</li>`;\n    }).join(\"\")}\n  `;\n}\nfunction oA(s) {\n    const t = $(\"div\");\n    t.setAttribute(sA, \"\"), h.addClass(t, s.autocompleteLoader), h.addClass(t, s.spinnerIcon), t.setAttribute(\"role\", \"status\");\n    const e = '<span class=\"absolute -m-px h-px w-px overflow-hidden whitespace-nowrap border-0 p-0 [clip:rect(0,0,0,0)]\">Loading...</span>';\n    return t.innerHTML = e, t;\n}\nfunction rA(s, t) {\n    return `<li class=\"${t.autocompleteItem}\">${s}</li>`;\n}\nconst Po = \"autocomplete\", Li = \"te.autocomplete\", Pe = \"data-te-input-state-active\", Bo = \"data-te-autocomplete-item-active\", oc = \"data-te-input-focused\", rc = \"data-te-autocomplete-state-open\", aA = \"data-te-autocomplete-custom-content-ref\", lA = \"[data-te-autocomplete-dropdown-ref]\", Vs = \"[data-te-autocomplete-items-list-ref]\", ac = \"[data-te-autocomplete-item-ref]\", cA = \"[data-te-autocomplete-loader-ref]\", hA = `[${aA}]`, dA = \"[data-te-input-notch-ref]\", wn = `.${Li}`, uA = `close${wn}`, pA = `open${wn}`, lc = `itemSelect${wn}`, _A = `update${wn}`, fA = {\n    autoSelect: !1,\n    container: \"body\",\n    customContent: \"\",\n    debounce: 300,\n    displayValue: (s)=>s,\n    filter: null,\n    itemContent: null,\n    listHeight: 190,\n    loaderCloseDelay: 300,\n    noResults: \"No results found\",\n    threshold: 0\n}, mA = {\n    autoSelect: \"boolean\",\n    container: \"string\",\n    customContent: \"string\",\n    debounce: \"number\",\n    displayValue: \"function\",\n    filter: \"(null|function)\",\n    itemContent: \"(null|function)\",\n    listHeight: \"number\",\n    loaderCloseDelay: \"number\",\n    noResults: \"string\",\n    threshold: \"number\"\n}, gA = {\n    autocompleteItem: \"flex flex-row items-center justify-between w-full px-4 py-[0.4375rem] truncate text-gray-700 bg-transparent select-none cursor-pointer hover:[&:not([data-te-autocomplete-option-disabled])]:bg-black/5 data-[te-autocomplete-item-active]:bg-black/5 data-[data-te-autocomplete-option-disabled]:text-gray-400 data-[data-te-autocomplete-option-disabled]:cursor-default dark:text-gray-200 dark:hover:[&:not([data-te-autocomplete-option-disabled])]:bg-white/30 dark:data-[te-autocomplete-item-active]:bg-white/30\",\n    autocompleteList: \"list-none m-0 p-0 overflow-y-auto\",\n    autocompleteLoader: \"absolute right-1 top-2 w-[1.4rem] h-[1.4rem] border-[0.15em]\",\n    dropdown: \"relative outline-none min-w-[100px] m-0 scale-y-[0.8] opacity-0 bg-white shadow-[0_2px_5px_0_rgba(0,0,0,0.16),_0_2px_10px_0_rgba(0,0,0,0.12)] transition duration-200 motion-reduce:transition-none data-[te-autocomplete-state-open]:scale-y-100 data-[te-autocomplete-state-open]:opacity-100 dark:bg-zinc-700\",\n    dropdownContainer: \"z-[1070]\",\n    scrollbar: \"[&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar]:h-1 [&::-webkit-scrollbar-button]:block [&::-webkit-scrollbar-button]:h-0 [&::-webkit-scrollbar-button]:bg-transparent [&::-webkit-scrollbar-track-piece]:bg-transparent [&::-webkit-scrollbar-track-piece]:rounded-none [&::-webkit-scrollbar-track-piece]: [&::-webkit-scrollbar-track-piece]:rounded-l [&::-webkit-scrollbar-thumb]:h-[50px] [&::-webkit-scrollbar-thumb]:bg-[#999] [&::-webkit-scrollbar-thumb]:rounded\",\n    spinnerIcon: \"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\"\n}, bA = {\n    autocompleteItem: \"string\",\n    autocompleteList: \"string\",\n    autocompleteLoader: \"string\",\n    dropdown: \"string\",\n    dropdownContainer: \"string\",\n    scrollbar: \"string\",\n    spinnerIcon: \"string\"\n};\nclass id {\n    constructor(t, e, i){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(i), this._getContainer(), this._input = d.findOne(\"input\", t), this._notch = d.findOne(dA, t), this._customContent = d.findOne(hA, t), this._loader = oA(this._classes), this._popper = null, this._debounceTimeoutId = null, this._loaderTimeout = null, this._activeItemIndex = -1, this._activeItem = null, this._filteredResults = null, this._lastQueryValue = null, this._canOpenOnFocus = !0, this._isOpen = !1, this._outsideClickHandler = this._handleOutsideClick.bind(this), this._inputFocusHandler = this._handleInputFocus.bind(this), this._userInputHandler = this._handleUserInput.bind(this), this._keydownHandler = this._handleKeydown.bind(this), t && A.setData(t, Li, this), this._init();\n    }\n    static get NAME() {\n        return Po;\n    }\n    get filter() {\n        return this._options.filter;\n    }\n    get dropdown() {\n        return d.findOne(lA, this._dropdownContainer);\n    }\n    get items() {\n        return d.find(ac, this._dropdownContainer);\n    }\n    get itemsList() {\n        return d.findOne(Vs, this._dropdownContainer);\n    }\n    initSearch(t) {\n        this._filterResults(t);\n    }\n    _getContainer() {\n        this._container = d.findOne(this._options.container);\n    }\n    _getConfig(t) {\n        const e = h.getDataAttributes(this._element);\n        return t = {\n            ...fA,\n            ...e,\n            ...t\n        }, I(Po, t, mA), t;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...gA,\n            ...e,\n            ...t\n        }, I(Po, t, bA), t;\n    }\n    _init() {\n        this._initDropdown(), this._updateInputState(), this._setInputAriaAttributes(), this._listenToInputFocus(), this._listenToUserInput(), this._listenToKeydown();\n    }\n    _initDropdown() {\n        this._dropdownContainerId = this._element.id ? `autocomplete-dropdown-${this._element.id}` : et(\"autocomplete-dropdown-\");\n        const t = {\n            id: this._dropdownContainerId,\n            items: [],\n            width: this._input.offsetWidth,\n            options: this._options\n        };\n        if (this._dropdownContainer = nA(t, this._classes), this._options.customContent !== \"\") {\n            const e = this._options.customContent, i = pn(e, sh, null);\n            this.dropdown.insertAdjacentHTML(\"beforeend\", i);\n        }\n    }\n    _setInputAriaAttributes() {\n        this._input.setAttribute(\"role\", \"combobox\"), this._input.setAttribute(\"aria-expanded\", !1), this._input.setAttribute(\"aria-owns\", this._dropdownContainerId), this._input.setAttribute(\"aria-haspopup\", !0), this._input.setAttribute(\"autocomplete\", \"off\");\n    }\n    _updateInputState() {\n        var t, e;\n        this._input.value !== \"\" || this._isOpen ? (this._input.setAttribute(Pe, \"\"), (t = this._notch) == null || t.setAttribute(Pe, \"\")) : (this._input.removeAttribute(Pe), (e = this._notch) == null || e.removeAttribute(Pe));\n    }\n    _listenToInputFocus() {\n        c.on(this._input, \"focus\", this._inputFocusHandler);\n    }\n    _handleInputFocus(t) {\n        const { value: e } = t.target, i = this._options.threshold;\n        if (!this._canOpenOnFocus) {\n            this._canOpenOnFocus = !0;\n            return;\n        }\n        e.length < i || (this._lastQueryValue !== e ? this._filterResults(e) : this.open());\n    }\n    _listenToWindowResize() {\n        c.on(window, \"resize\", this._handleWindowResize.bind(this));\n    }\n    _handleWindowResize() {\n        this._dropdownContainer && this._updateDropdownWidth();\n    }\n    _updateDropdownWidth() {\n        const t = this._input.offsetWidth;\n        h.addStyle(this._dropdownContainer, {\n            width: `${t}px`\n        });\n    }\n    _listenToUserInput() {\n        c.on(this._input, \"input\", this._userInputHandler);\n    }\n    _handleUserInput(t) {\n        const { value: e } = t.target, i = this._options.threshold, n = this._options.debounce;\n        if (this.filter) {\n            if (e.length < i) {\n                this._isOpen && this.close();\n                return;\n            }\n            this._debounceFilter(e, n);\n        }\n    }\n    _debounceFilter(t, e) {\n        this._debounceTimeoutId && clearTimeout(this._debounceTimeoutId), this._debounceTimeoutId = setTimeout(()=>{\n            this._filterResults(t);\n        }, e);\n    }\n    _filterResults(t) {\n        this._lastQueryValue = t;\n        const e = this.filter(t);\n        this._isPromise(e) ? this._asyncUpdateResults(e) : this._updateResults(e);\n    }\n    _isPromise(t) {\n        return !!t && typeof t.then == \"function\";\n    }\n    _asyncUpdateResults(t) {\n        this._resetActiveItem(), this._showLoader(), t.then((e)=>{\n            this._updateResults(e), this._loaderTimeout = setTimeout(()=>{\n                this._hideLoader(), this._loaderTimeout = null;\n            }, this._options.loaderCloseDelay);\n        });\n    }\n    _resetActiveItem() {\n        const t = this._activeItem;\n        t && (t.removeAttribute(Bo), this._activeItem = null, this._activeItemIndex = -1);\n    }\n    _showLoader() {\n        this._element.appendChild(this._loader);\n    }\n    _hideLoader() {\n        d.findOne(cA, this._element) && this._element.removeChild(this._loader);\n    }\n    _updateResults(t) {\n        this._resetActiveItem(), this._filteredResults = t, c.trigger(this._element, _A, {\n            results: t\n        });\n        const e = d.findOne(Vs, this._dropdownContainer), i = ed(t, this._options, this._classes.autocompleteItem), n = rA(this._options.noResults, this._classes);\n        t.length === 0 && this._options.noResults !== \"\" ? e.innerHTML = n : e.innerHTML = i, this._isOpen || this.open(), this._popper && this._popper.forceUpdate();\n    }\n    _listenToKeydown() {\n        c.on(this._element, \"keydown\", this._keydownHandler);\n    }\n    _handleKeydown(t) {\n        this._isOpen ? this._handleOpenKeydown(t) : this._handleClosedKeydown(t);\n    }\n    _handleOpenKeydown(t) {\n        const e = t.keyCode;\n        if (e === ke && this._options.autoSelect && this._selectActiveItem(), e === we || e === U && t.altKey) {\n            this.close(), this._input.focus();\n            return;\n        }\n        if (e === we || e === U && t.altKey || e === ke) {\n            this.close(), this._input.focus();\n            return;\n        }\n        switch(e){\n            case z:\n                this._setActiveItem(this._activeItemIndex + 1), this._scrollToItem(this._activeItem);\n                break;\n            case U:\n                this._setActiveItem(this._activeItemIndex - 1), this._scrollToItem(this._activeItem);\n                break;\n            case Te:\n                this._activeItemIndex > -1 ? (this._setActiveItem(0), this._scrollToItem(this._activeItem)) : this._input.setSelectionRange(0, 0);\n                break;\n            case Ee:\n                if (this._activeItemIndex > -1) this._setActiveItem(this.items.length - 1), this._scrollToItem(this._activeItem);\n                else {\n                    const n = this._input.value.length;\n                    this._input.setSelectionRange(n, n);\n                }\n                break;\n            case it:\n                if (t.preventDefault(), this._activeItemIndex > -1) {\n                    const n = this._filteredResults[this._activeItemIndex];\n                    this._handleSelection(n);\n                }\n                return;\n            default:\n                return;\n        }\n        t.preventDefault();\n    }\n    _setActiveItem(t) {\n        const e = this.items;\n        e[t] && this._updateActiveItem(e[t], t);\n    }\n    _updateActiveItem(t, e) {\n        const i = this._activeItem;\n        i && i.removeAttribute(Bo), t.setAttribute(Bo, \"\"), this._activeItemIndex = e, this._activeItem = t;\n    }\n    _scrollToItem(t) {\n        if (!t) return;\n        const e = this.itemsList, i = e.offsetHeight, n = this.items.indexOf(t), o = t.offsetHeight, r = e.scrollTop;\n        if (n > -1) {\n            const a = n * o, l = a + o > r + i;\n            a < r ? e.scrollTop = a : l ? e.scrollTop = a - i + o : e.scrollTop = r;\n        }\n    }\n    _handleClosedKeydown(t) {\n        t.key === \"Enter\" && t.preventDefault();\n        const e = t.keyCode;\n        (e === it || e === z || e === z) && this.open();\n    }\n    open() {\n        this._lastQueryValue === null && this._filterResults(\"\");\n        const t = c.trigger(this._element, pA);\n        this._isOpen || t.defaultPrevented || (this._updateDropdownWidth(), this._listenToWindowResize(), this._popper = se(this._element, this._dropdownContainer, {\n            modifiers: [\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: [\n                            0,\n                            1\n                        ]\n                    }\n                }\n            ]\n        }), this._container.appendChild(this._dropdownContainer), this._listenToOutsideClick(), this._listenToItemsClick(), setTimeout(()=>{\n            this.dropdown.setAttribute(rc, \"\"), this._isOpen = !0, this._setInputActiveStyles(), this._updateInputState();\n        }, 0));\n    }\n    _listenToOutsideClick() {\n        c.on(document, \"click\", this._outsideClickHandler);\n    }\n    _handleOutsideClick(t) {\n        const e = this._input === t.target, i = t.target === this._dropdownContainer, n = this._dropdownContainer && this._dropdownContainer.contains(t.target);\n        !e && !i && !n && this.close();\n    }\n    _listenToItemsClick() {\n        const t = d.findOne(Vs, this._dropdownContainer);\n        c.on(t, \"click\", this._handleItemsClick.bind(this));\n    }\n    _handleItemsClick(t) {\n        const e = d.closest(t.target, ac), i = h.getDataAttribute(e, \"index\"), n = this._filteredResults[i];\n        this._handleSelection(n);\n    }\n    _selectActiveItem() {\n        const t = this._filteredResults[this._activeItemIndex];\n        if (!t) return;\n        const e = this._options.displayValue(t);\n        c.trigger(this._element, lc, {\n            value: t\n        }).defaultPrevented || setTimeout(()=>{\n            this._canOpenOnFocus = !1, this._updateInputValue(e), this._updateInputState();\n        }, 0);\n    }\n    _handleSelection(t) {\n        const e = this._options.displayValue(t), i = c.trigger(this._element, lc, {\n            value: t\n        });\n        t !== void 0 && (i.defaultPrevented || setTimeout(()=>{\n            this._canOpenOnFocus = !1, this._updateInputValue(e), this._updateInputState(), this._input.focus(), this.close();\n        }, 0));\n    }\n    _updateInputValue(t) {\n        this._input.value = t;\n    }\n    _setInputActiveStyles() {\n        this._input.setAttribute(oc, \"\");\n    }\n    close() {\n        var e;\n        const t = c.trigger(this._element, uA);\n        !this._isOpen || t.defaultPrevented || (this._resetActiveItem(), this._removeDropdownEvents(), this.dropdown.removeAttribute(rc), c.on(this.dropdown, \"transitionend\", this._handleDropdownTransitionEnd.bind(this)), this._input.removeAttribute(oc), this._input.value || (this._input.removeAttribute(Pe), (e = this._notch) == null || e.removeAttribute(Pe)));\n    }\n    _removeDropdownEvents() {\n        const t = d.findOne(Vs, this._dropdownContainer);\n        c.off(t, \"click\"), c.off(document, \"click\", this._outsideClickHandler), c.off(window, \"resize\", this._handleWindowResize.bind(this));\n    }\n    _handleDropdownTransitionEnd(t) {\n        this._isOpen && t && t.propertyName === \"opacity\" && (this._popper.destroy(), this._dropdownContainer && this._container.removeChild(this._dropdownContainer), this._isOpen = !1, c.off(this.dropdown, \"transitionend\"), this._canOpenOnFocus = !0);\n    }\n    dispose() {\n        this._isOpen && this.close(), this._removeInputAndElementEvents(), this._dropdownContainer.remove(), A.removeData(this._element, Li);\n    }\n    _removeInputAndElementEvents() {\n        c.off(this._input, \"focus\", this._inputFocusHandler), c.off(this._input, \"input\", this._userInputHandler), c.off(this._element, \"keydown\", this._keydownHandler);\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, Li);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose/.test(t)) && (i || (i = new id(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, Li);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst vA = (s, t)=>`<div class=\"${s.connectContainer}\" ${t}>\n  <div class=\"${s.connect}\"></div>\n  </div>`, TA = (s, t)=>`<div class=\"${s.hand}\" ${t}>\n    <span></span>\n  </div>`, EA = (s, t)=>`\n    <span class=\"${s.tooltip}\" ${t}>\n      <span class=\"${s.tooltipValue}\"></span>\n    </span>\n    `, pe = (s)=>s.type === \"touchmove\" ? s.touches[0].clientX : s.clientX, an = \"multiRangeSlider\", ln = `te.${an}`, CA = `.${ln}`, cc = `valueChanged${CA}`, _e = \"data-te-active\", hc = \"data-te-multi-range-slider-hand-ref\", dc = \"data-te-multi-range-slider-connect-ref\", uc = \"data-te-multi-range-slider-tooltip-ref\", AA = {\n    max: \"number\",\n    min: \"number\",\n    numberOfRanges: \"number\",\n    startValues: \"(array|string)\",\n    step: \"(string|null|number)\",\n    tooltip: \"boolean\"\n}, yA = {\n    max: 100,\n    min: 0,\n    numberOfRanges: 2,\n    startValues: [\n        0,\n        100\n    ],\n    step: null,\n    tooltip: !1\n}, wA = {\n    connect: \"z-10 h-full w-full bg-[#eee] will-change-transform dark:bg-[#4f4f4f]\",\n    connectContainer: \"relative border-[1px] border-[#eee] z-0 h-full w-full overflow-hidden dark:border-[#4f4f4f]\",\n    container: \"apperance-none relative m-auto w-full cursor-pointer h-1 border-0 bg-transparent p-0 focus:outline-none dark:border-[#4f4f4f]\",\n    hand: \"apperance-none absolute top-[50%] border-0 -mt-1 h-4 w-4 cursor-pointer rounded-[50%] border-0 bg-primary transition-colors ease-in-out will-change-transform active:bg-[#c4d4ef] active:z-60\",\n    tooltip: \"absolute -top-[18px] origin-[50%_50%] -translate-x-[6px] -rotate-45 scale-0 rounded-bl-none rounded-br-2xl rounded-tl-2xl rounded-tr-2xl bg-primary text-white transition-all duration-[200ms] data-[te-active]:-top-[38px] data-[te-active]:scale-100\",\n    tooltipValue: \"block h-[30px] w-[30px] -translate-x-[6px] translate-y-[6px] rotate-45 text-center text-[10px]\"\n}, kA = {\n    container: \"string\",\n    connectContainer: \"string\",\n    connect: \"string\",\n    hand: \"string\",\n    tooltip: \"string\",\n    tooltipValue: \"string\"\n};\nclass sd extends ft {\n    constructor(t, e, i){\n        super(t), this._options = this._getConfig(e), this._mousemove = !1, this._classes = this._getClasses(i), this._maxTranslation = null, this._minTranslation = null, this._currentStepValue = null, this._canChangeStep = !1, this.init();\n    }\n    // Getters\n    static get NAME() {\n        return an;\n    }\n    get hands() {\n        return d.find(`[${hc}]`, this._element);\n    }\n    get connect() {\n        return d.findOne(`[${dc}]`, this._element);\n    }\n    get leftConnectRect() {\n        return this.connect.getBoundingClientRect().left;\n    }\n    get handActive() {\n        return d.findOne(`[${_e}]`);\n    }\n    get activeTooltipValue() {\n        return d.find(`[${uc}]`).filter((n)=>n.hasAttribute(_e))[0].children[0];\n    }\n    // Public\n    init() {\n        this._setContainerClasses(), this._setRangeConnectsElement(), this._setRangeHandleElements(), this._setMaxAndMinTranslation(), this._setTransofrmationOnStart(), this._handleClickEventOnHand(), this._handleEndMoveEventDocument(), this._handleClickOnRange(), this._setTooltipToHand();\n    }\n    dispose() {\n        A.removeData(this._element, ln), this._options = null, this._mousemove = null, this._maxTranslation = null, this._minTranslation = null, this._currentStepValue = null, this._canChangeStep = null, this.hands.forEach((t)=>{\n            K.off(t, \"mousedown touchstart\"), K.off(t, \"mouseup touchend\");\n        }), K.off(document, \"mousemove touchmove\"), K.off(document, \"mouseup touchend\"), K.off(this.connect, \"mousedown touchstart\");\n    }\n    // Private\n    _setMaxAndMinTranslation() {\n        this._maxTranslation = this.connect.offsetWidth - this.hands[0].offsetWidth / 2, this._minTranslation = this.connect.offsetLeft - this.hands[0].offsetWidth / 2;\n    }\n    _setTransofrmationOnStart() {\n        const { max: t, min: e } = this._options;\n        let { startValues: i } = this._options;\n        typeof i == \"string\" && (i = JSON.parse(i.replace(/'/g, '\"'))), i.length === 0 ? this.hands.forEach((n)=>{\n            h.setDataAttribute(n, \"translation\", Math.round(this._minTranslation)), h.addStyle(n, {\n                transform: `translate(${this._minTranslation}px,-25%)`\n            });\n        }) : this.hands.forEach((n, o)=>{\n            if (i[o] > t || i[o] < e) return;\n            if (i[o] === void 0) {\n                h.setDataAttribute(n, \"translation\", Math.round(this._maxTranslation)), h.addStyle(n, {\n                    transform: `translate(${this._maxTranslation}px,-25%)`,\n                    zIndex: this.hands.length - o\n                });\n                return;\n            }\n            const a = (i[o] - e) / (t - e) * this.connect.offsetWidth - n.offsetWidth / 2;\n            h.setDataAttribute(n, \"translation\", Math.round(a)), h.addStyle(n, {\n                transform: `translate(${a}px,-25%)`,\n                zIndex: this.hands.length - o\n            });\n        });\n    }\n    _handleOutOfMaxRangeValue(t, e) {\n        this._updateHand(t, this._maxTranslation), this._options.tooltip && (this.activeTooltipValue.innerText = e);\n    }\n    _handleOutOfMinRangeValue(t, e) {\n        this._updateHand(t, this._minTranslation), this._options.tooltip && (this.activeTooltipValue.innerText = e);\n    }\n    _handleNormalMove(t, e, i) {\n        this._updateHand(t, e), this._options.tooltip && (this.activeTooltipValue.innerText = Math.round(i));\n    }\n    _handleClickEventOnHand() {\n        const { max: t, min: e, step: i } = this._options;\n        this.hands.forEach((n)=>{\n            K.on(n, \"mousedown touchstart\", (o)=>{\n                if (this._mousemove = !0, n.setAttribute(_e, \"\"), this._options.tooltip && n.children[1].setAttribute(_e, \"\"), this._handleMoveEvent(n), this._handleEndMoveEvent(n, o), !this._canChangeStep && i !== null) return;\n                const r = pe(o) - this.leftConnectRect - n.offsetWidth / 2, a = (pe(o) - this.leftConnectRect) / (this.connect.offsetWidth / (t - e)) % (t - e);\n                r >= this._maxTranslation ? this._handleOutOfMaxRangeValue(n, t) : r <= this._minTranslation ? this._handleOutOfMinRangeValue(n, e) : this._handleNormalMove(n, r, a);\n            });\n        });\n    }\n    _setContainerClasses() {\n        h.addClass(this._element, this._classes.container);\n    }\n    _setRangeConnectsElement() {\n        this._element.insertAdjacentHTML(\"afterbegin\", vA({\n            connectContainer: this._classes.connectContainer,\n            connect: this._classes.connect\n        }, dc));\n    }\n    _setRangeHandleElements() {\n        for(let t = 0; t < this._options.numberOfRanges; t++)this._element.insertAdjacentHTML(\"beforeend\", TA({\n            hand: this._classes.hand\n        }, hc));\n        this.hands.forEach((t, e)=>{\n            t.setAttribute(\"aria-orientation\", \"horizontal\"), t.setAttribute(\"role\", \"slider\"), h.setDataAttribute(t, \"handle\", e);\n        });\n    }\n    _setTooltipToHand() {\n        this._options.tooltip && this.hands.forEach((t)=>t.insertAdjacentHTML(\"beforeend\", EA({\n                tooltip: this._classes.tooltip,\n                tooltipValue: this._classes.tooltipValue\n            }, uc)));\n    }\n    _handleMoveEvent(t) {\n        const { tooltip: e, step: i } = this._options;\n        K.on(document, \"mousemove touchmove\", (n)=>{\n            n.type === \"mousemove\" && n.preventDefault();\n            const { max: o, min: r, numberOfRanges: a } = this._options;\n            if (t.hasAttribute(_e)) {\n                const l = (pe(n) - this.leftConnectRect) / this.connect.offsetWidth * o;\n                let p = (pe(n) - this.leftConnectRect) / (this.connect.offsetWidth / (o - r)) % (o - r) + r;\n                if ((this._currentStepValue === Math.round(p) || Math.round(p) % i !== 0) && i !== null) {\n                    this._canChangeStep = !1;\n                    return;\n                }\n                this._canChangeStep = !0;\n                let u = pe(n) - this.leftConnectRect - t.offsetWidth / 2;\n                const _ = h.getDataAttribute(this.handActive, \"handle\"), f = h.getDataAttribute(this.handActive, \"translation\");\n                if (p < r) u = r - t.offsetWidth / 2, p = r;\n                else if (l >= o) return;\n                const g = this.hands.map((m)=>h.getDataAttribute(m, \"translation\"));\n                if (a < 2) Math.round(p) % i === 0 && i !== null ? (this._currentStepValue = Math.round(p), h.addStyle(t, {\n                    transform: `translate(${u}px,-25%)`\n                }), e && (this.activeTooltipValue.innerText = Math.round(p))) : i === null && (h.addStyle(t, {\n                    transform: `translate(${u}px,-25%)`\n                }), e && (this.activeTooltipValue.innerText = Math.round(p))), h.setDataAttribute(t, \"translation\", u);\n                else {\n                    const m = _ > 0 && _ < a - 1;\n                    let b = u, v = !1;\n                    const T = g[_ + 1], y = g[_ - 1];\n                    _ === 0 && f >= T ? (b = T, v = u <= b) : _ === a - 1 && f <= y ? (b = y, v = u >= b) : m && (f >= T || f <= y) && (b = f >= T ? T : y, v = b === T ? u <= b : u >= b), Math.round(p) % i === 0 && i !== null ? (this._currentStepValue = Math.round(p), h.addStyle(t, {\n                        transform: `translate(${b}px,-25%)`\n                    }), e && b === u && this.activeTooltipValue !== null && (this.activeTooltipValue.innerText = Math.round(p))) : i === null && (h.addStyle(t, {\n                        transform: `translate(${b}px,-25%)`\n                    }), e && b === u && this.activeTooltipValue !== null && (this.activeTooltipValue.innerText = Math.round(p))), h.setDataAttribute(t, \"translation\", v ? u : b);\n                }\n                this._canChangeStep && this._handleEventChangeValuesOnRange();\n            }\n        });\n    }\n    _handleEventChangeValuesOnRange() {\n        const { max: t, min: e, numberOfRanges: i } = this._options, n = (r)=>{\n            const a = r.getBoundingClientRect().left - this.leftConnectRect + r.offsetWidth / 2;\n            let l = a / (this.connect.offsetWidth / (t - e)) % (t - e);\n            return a === this.connect.offsetWidth ? l = t : l += e, h.setDataAttribute(r, \"value\", Math.round(l * 10) / 10), {\n                value: l\n            };\n        };\n        if (i < 2) {\n            const { value: r } = n(this.hands[0]);\n            c.trigger(this._element, cc, {\n                values: {\n                    value: r + e,\n                    rounded: Math.round(r + e)\n                }\n            });\n            return;\n        }\n        const o = this.hands.map((r)=>n(r));\n        c.trigger(this._element, cc, {\n            values: {\n                value: o.map(({ value: r })=>r + e),\n                rounded: o.map(({ value: r })=>Math.round(r + e))\n            }\n        });\n    }\n    _resetHandState(t, e) {\n        c.off(t, e), t.removeAttribute(_e), this._options.tooltip && t.children[1].removeAttribute(_e);\n    }\n    _handleEndMoveEventDocument() {\n        K.on(document, \"mouseup touchend\", ()=>{\n            this._mousemove && (this.hands.forEach((t)=>{\n                this._resetHandState(t, \"mousemove\");\n            }), K.off(document, \"mousemove touchmove\"), this._mousemove = !1);\n        });\n    }\n    _handleEndMoveEvent(t) {\n        K.on(t, \"mouseup touchend\", ()=>{\n            this._resetHandState(t, \"mousemove\"), K.off(document, \"mousemove touchmove\"), this._mousemove = !1;\n        });\n    }\n    _handleClickOnRange() {\n        this._options.step === null && K.on(this.connect, \"mousedown touchstart\", (t)=>{\n            const e = [];\n            let i = 0;\n            if (this.hands.forEach((n)=>{\n                this._mousemove = !0;\n                const o = pe(t), r = n.offsetWidth, a = h.getDataAttribute(n, \"translation\"), l = o - this.leftConnectRect - r / 2;\n                this._options.numberOfRanges < 2 ? this._updateHand(n, l) : (e.push(Math.abs(l - a)), e.forEach((p, u)=>{\n                    p < e[i] && (i = u);\n                }));\n            }), this._options.numberOfRanges >= 2) {\n                const n = pe(t) - this.leftConnectRect - this.hands[i].offsetWidth / 2;\n                this._updateAdjacentHands(i, n);\n            }\n            this._handleEventChangeValuesOnRange();\n        });\n    }\n    _updateHand(t, e) {\n        h.addStyle(t, {\n            transform: `translate(${e}px,-25%)`\n        }), h.setDataAttribute(t, \"translation\", e);\n    }\n    _updateAdjacentHands(t, e) {\n        const i = this.hands[t + 1], n = this.hands[t - 1], o = i ? h.getDataAttribute(i, \"translation\") : void 0, r = n ? h.getDataAttribute(n, \"translation\") : void 0;\n        i && e > o ? this._updateHand(i, e) : n && e < r ? this._updateHand(n, e) : this._updateHand(this.hands[t], e);\n    }\n    _getConfig(t) {\n        const e = {\n            ...yA,\n            ...h.getDataAttributes(this._element),\n            ...t\n        };\n        return I(an, e, AA), e;\n    }\n    _getClasses(t) {\n        const e = h.getDataClassAttributes(this._element);\n        return t = {\n            ...wA,\n            ...e,\n            ...t\n        }, I(an, t, kA), t;\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let i = A.getData(this, ln);\n            const n = typeof t == \"object\" && t;\n            if (!(!i && /dispose|hide/.test(t)) && (i || (i = new sd(this, n)), typeof t == \"string\")) {\n                if (typeof i[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                i[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return A.getData(t, ln);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst xA = (s)=>{\n    gc(()=>{\n        const t = mc();\n        if (t) {\n            const e = s.NAME, i = t.fn[e];\n            t.fn[e] = s.jQueryInterface, t.fn[e].Constructor = s, t.fn[e].noConflict = ()=>(t.fn[e] = i, s.jQueryInterface);\n        }\n    });\n}, OA = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}`, t, function(e) {\n        e.preventDefault(), s.getOrCreateInstance(this).toggle();\n    });\n}, SA = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}.data-api`, t, function(e) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), be(this)) return;\n        s.getOrCreateInstance(this).show();\n    });\n}, IA = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}.data-api`, t, function(e) {\n        const i = te(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), be(this)) return;\n        c.one(i, s.EVENT_HIDDEN, ()=>{\n            Mt(this) && this.focus();\n        });\n        const n = d.findOne(s.OPEN_SELECTOR);\n        n && n !== i && s.getInstance(n).hide(), s.getOrCreateInstance(i).toggle(this);\n    });\n}, DA = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}`, t, (e)=>{\n        e.preventDefault();\n        const i = e.target.closest(t);\n        s.getOrCreateInstance(i).toggle();\n    });\n}, $A = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}`, t, function(e) {\n        const i = te(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), c.one(i, s.EVENT_SHOW, (r)=>{\n            r.defaultPrevented || c.one(i, s.EVENT_HIDDEN, ()=>{\n                Mt(this) && this.focus();\n            });\n        });\n        const n = d.findOne(`[${s.OPEN_SELECTOR}=\"true\"]`);\n        n && s.getInstance(n).hide(), s.getOrCreateInstance(i).toggle(this);\n    });\n}, LA = (s, t)=>{\n    c.one(document, \"mousedown\", t, s.autoInitial(new s()));\n}, NA = (s, t)=>{\n    c.on(document, `click.te.${s.NAME}.data-api`, t, function(e) {\n        (e.target.tagName === \"A\" || e.delegateTarget && e.delegateTarget.tagName === \"A\") && e.preventDefault();\n        const i = lr(this);\n        d.find(i).forEach((o)=>{\n            s.getOrCreateInstance(o, {\n                toggle: !1\n            }).toggle();\n        });\n    });\n}, MA = (s, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(i) {\n        return new s(i);\n    });\n}, RA = (s, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(i) {\n        return new s(i);\n    });\n}, PA = (s, t)=>{\n    d.find(t).forEach((e)=>{\n        new s(e);\n    }), c.on(document, `click.te.${s.NAME}.data-api`, `${t} img:not([data-te-lightbox-disabled])`, s.toggle());\n}, BA = (s, t)=>{\n    const e = (o)=>o[0] === \"{\" && o[o.length - 1] === \"}\" || o[0] === \"[\" && o[o.length - 1] === \"]\", i = (o)=>typeof o != \"string\" ? o : e(o) ? JSON.parse(o.replace(/'/g, '\"')) : o, n = (o)=>{\n        const r = {};\n        return Object.keys(o).forEach((a)=>{\n            if (a.match(/dataset.*/)) {\n                const l = a.slice(7, 8).toLowerCase().concat(a.slice(8));\n                r[l] = i(o[a]);\n            }\n        }), r;\n    };\n    d.find(t).forEach((o)=>{\n        if (h.getDataAttribute(o, \"chart\") !== \"bubble\" && h.getDataAttribute(o, \"chart\") !== \"scatter\") {\n            const r = h.getDataAttributes(o), a = {\n                data: {\n                    datasets: [\n                        n(r)\n                    ]\n                }\n            };\n            return r.chart && (a.type = r.chart), r.labels && (a.data.labels = JSON.parse(r.labels.replace(/'/g, '\"'))), new s(o, {\n                ...a,\n                ...wi[a.type]\n            });\n        }\n        return null;\n    });\n};\nclass HA {\n    constructor(){\n        this.inits = [];\n    }\n    get initialized() {\n        return this.inits;\n    }\n    isInited(t) {\n        return this.inits.includes(t);\n    }\n    add(t) {\n        this.isInited(t) || this.inits.push(t);\n    }\n}\nconst ar = new HA(), Ni = {\n    alert: {\n        name: \"Alert\",\n        selector: \"[data-te-alert-init]\",\n        isToggler: !1\n    },\n    animation: {\n        name: \"Animate\",\n        selector: \"[data-te-animation-init]\",\n        isToggler: !1\n    },\n    carousel: {\n        name: \"Carousel\",\n        selector: \"[data-te-carousel-init]\",\n        isToggler: !1\n    },\n    chips: {\n        name: \"ChipsInput\",\n        selector: \"[data-te-chips-input-init]\",\n        isToggler: !1\n    },\n    chip: {\n        name: \"Chip\",\n        selector: \"[data-te-chip-init]\",\n        isToggler: !1,\n        onInit: \"init\"\n    },\n    datepicker: {\n        name: \"Datepicker\",\n        selector: \"[data-te-datepicker-init]\",\n        isToggler: !1\n    },\n    datetimepicker: {\n        name: \"Datetimepicker\",\n        selector: \"[data-te-date-timepicker-init]\",\n        isToggler: !1\n    },\n    input: {\n        name: \"Input\",\n        selector: \"[data-te-input-wrapper-init]\",\n        isToggler: !1\n    },\n    perfectScrollbar: {\n        name: \"PerfectScrollbar\",\n        selector: \"[data-te-perfect-scrollbar-init]\",\n        isToggler: !1\n    },\n    rating: {\n        name: \"Rating\",\n        selector: \"[data-te-rating-init]\",\n        isToggler: !1\n    },\n    scrollspy: {\n        name: \"ScrollSpy\",\n        selector: \"[data-te-spy='scroll']\",\n        isToggler: !1\n    },\n    select: {\n        name: \"Select\",\n        selector: \"[data-te-select-init]\",\n        isToggler: !1\n    },\n    sidenav: {\n        name: \"Sidenav\",\n        selector: \"[data-te-sidenav-init]\",\n        isToggler: !1\n    },\n    stepper: {\n        name: \"Stepper\",\n        selector: \"[data-te-stepper-init]\",\n        isToggler: !1\n    },\n    timepicker: {\n        name: \"Timepicker\",\n        selector: \"[data-te-timepicker-init]\",\n        isToggler: !1\n    },\n    toast: {\n        name: \"Toast\",\n        selector: \"[data-te-toast-init]\",\n        isToggler: !1\n    },\n    datatable: {\n        name: \"Datatable\",\n        selector: \"[data-te-datatable-init]\"\n    },\n    popconfirm: {\n        name: \"Popconfirm\",\n        selector: \"[data-te-toggle='popconfirm']\"\n    },\n    validation: {\n        name: \"Validation\",\n        selector: \"[data-te-validation-init]\"\n    },\n    smoothScroll: {\n        name: \"SmoothScroll\",\n        selector: \"a[data-te-smooth-scroll-init]\"\n    },\n    lazyLoad: {\n        name: \"LazyLoad\",\n        selector: \"[data-te-lazy-load-init]\"\n    },\n    clipboard: {\n        name: \"Clipboard\",\n        selector: \"[data-te-clipboard-init]\"\n    },\n    infiniteScroll: {\n        name: \"InfiniteScroll\",\n        selector: \"[data-te-infinite-scroll-init]\"\n    },\n    loadingManagement: {\n        name: \"LoadingManagement\",\n        selector: \"[data-te-loading-management-init]\"\n    },\n    sticky: {\n        name: \"Sticky\",\n        selector: \"[data-te-sticky-init]\"\n    },\n    multiRangeSlider: {\n        name: \"MultiRangeSlider\",\n        selector: \"[data-te-multi-range-slider-init]\"\n    },\n    // advancedInits\n    chart: {\n        name: \"Chart\",\n        selector: \"[data-te-chart]\",\n        isToggler: !1,\n        advanced: BA\n    },\n    // togglers\n    button: {\n        name: \"Button\",\n        selector: \"[data-te-toggle='button']\",\n        isToggler: !0,\n        callback: DA\n    },\n    collapse: {\n        name: \"Collapse\",\n        selector: \"[data-te-collapse-init]\",\n        isToggler: !0,\n        callback: NA\n    },\n    dropdown: {\n        name: \"Dropdown\",\n        selector: \"[data-te-dropdown-toggle-ref]\",\n        isToggler: !0,\n        callback: OA\n    },\n    modal: {\n        name: \"Modal\",\n        selector: \"[data-te-toggle='modal']\",\n        isToggler: !0,\n        callback: $A\n    },\n    ripple: {\n        name: \"Ripple\",\n        selector: \"[data-te-ripple-init]\",\n        isToggler: !0,\n        callback: LA\n    },\n    offcanvas: {\n        name: \"Offcanvas\",\n        selector: \"[data-te-offcanvas-toggle]\",\n        isToggler: !0,\n        callback: IA\n    },\n    tab: {\n        name: \"Tab\",\n        selector: \"[data-te-toggle='tab'], [data-te-toggle='pill'], [data-te-toggle='list']\",\n        isToggler: !0,\n        callback: SA\n    },\n    tooltip: {\n        name: \"Tooltip\",\n        selector: \"[data-te-toggle='tooltip']\",\n        isToggler: !1,\n        callback: MA\n    },\n    popover: {\n        name: \"Popover\",\n        selector: \"[data-te-toggle='popover']\",\n        isToggler: !0,\n        callback: RA\n    },\n    lightbox: {\n        name: \"Lightbox\",\n        selector: \"[data-te-lightbox-init]\",\n        isToggler: !0,\n        callback: PA\n    },\n    touch: {\n        name: \"Touch\",\n        selector: \"[data-te-touch-init]\"\n    }\n}, VA = (s)=>Ni[s.NAME] || null, WA = (s, t)=>{\n    if (!s || !t.allowReinits && ar.isInited(s.NAME)) return;\n    ar.add(s.NAME);\n    const e = VA(s), i = (e == null ? void 0 : e.isToggler) || !1;\n    if (xA(s), e != null && e.advanced) {\n        e == null || e.advanced(s, e == null ? void 0 : e.selector);\n        return;\n    }\n    if (i) {\n        e == null || e.callback(s, e == null ? void 0 : e.selector);\n        return;\n    }\n    d.find(e == null ? void 0 : e.selector).forEach((n)=>{\n        let o = s.getInstance(n);\n        o || (o = new s(n), e != null && e.onInit && o[e.onInit]());\n    });\n}, FA = (s, t)=>{\n    s.forEach((e)=>WA(e, t));\n}, YA = {\n    allowReinits: !1,\n    checkOtherImports: !1\n}, qA = (s, t = {})=>{\n    t = {\n        ...YA,\n        ...t\n    };\n    const e = Object.keys(Ni).map((i)=>{\n        if (!!document.querySelector(Ni[i].selector)) {\n            const o = s[Ni[i].name];\n            return !o && !ar.isInited(i) && t.checkOtherImports && console.warn(`Please import ${Ni[i].name} from \"tw-elements\" package and add it to a object parameter inside \"initTE\" function`), o;\n        }\n    });\n    FA(e, t);\n};\n //# sourceMappingURL=tw-elements.es.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tw-elements/dist/js/tw-elements.es.min.js\n");

/***/ })

};
;